data_types:
	//Job options
	sodalite.datatypes.modak.job_options:
		derived_from: tosca.datatypes.Root
		properties:
			job_name:
				type: string
			account:
				type: string
				required: false
				default: "null"
			queue:
				type: string
				required: false
				default: "null"
			wall_time_limit:
				type: string
			node_count:
				type: integer
			core_count:
				type: integer
			process_count_per_node:
				type: integer
				required: false
				default: "null"
			core_count_per_process:
				type: integer
				required: false
				default: "null"
			memory_limit:
				type: scalar-unit.size
				required: false
				default: "null"
			minimum_memory_per_processor:
				type: scalar-unit.size
				required: false
				default: "null"
			request_gpus:
				type: integer
				required: false
				default: "null"
			request_specific_nodes:
				type: string
				required: false
				default: "null"
			job_array:
				type: string
				required: false
				default: "null"
			standard_output_file:
				type: string
			standard_error_file:
				type: string
			combine_stdout_stderr:
				type: boolean
			architecture_constraint:
				type: string
				required: false
				default: "null"
			copy_environment:
				type: boolean
				required: false
				default: "null"
			copy_environment_variable:
				type: string
				required: false
				default: "null"
			job_dependency:
				type: string
				required: false
				default: "null"
			request_event_notification:
				type: string
				required: false
				default: "null"
			email_address:
				type: string
				required: false
				default: "null"
			defer_job:
				type: string
				required: false
				default: "null"
			node_exclusive:
				type: boolean
				required: false
				default: "null"
				
	//Application build
	sodalite.datatypes.modak.build:
		derived_from: tosca.datatypes.Root
		properties:
			src:
				type: string
			build_command:
				type: string				
				
	//Application
	sodalite.datatypes.modak.application:
		derived_from: tosca.datatypes.Root
		properties:
			app_tag:
				type: string
			container_runtime:
				type: string
			app_type:
				type: string
			executable:
				type: string
			arguments:
				type: string
			mpi_ranks:
				type: integer
				required: false
				default: "null"
			threads:
				type: integer
				required: false
				default: "null"
			build:
				type: map
				required: false
				default: "null"
				entry_schema: sodalite.datatypes.modak.build				
				
	//Target
	sodalite.datatypes.modak.target:
		derived_from: tosca.datatypes.Root
		properties:
			name:
				type: string
			queue_type:
				type: string
				
	//Optimization build
	sodalite.datatypes.modak.optimisation.opt_build:
		derived_from: tosca.datatypes.Root
		properties:
			cpu_type:
				type: string
				constraints:
					valid_values: [ "x86", "arm", "amd", "power" ]
			acc_type:
				type: string
				constraints:
 					valid_values: [ "nvidia", "amd", "fpga" ]				
				
	//Optimization autotuning
	sodalite.datatypes.modak.optimisation.autotuning:
		derived_from: tosca.datatypes.Root
		properties:
			tuner:
				type: string
			input:
				type: string		
							
	//Optimization AI training
	sodalite.datatypes.modak.optimisation.ai_training.config:
		derived_from: tosca.datatypes.Root
		properties:
			ai_framework:
				type: string
				constraints:
					valid_values: [ "tensorflow", "pytorch", "keras", "cntk", "mxnet" ]
			config_type:
				type: string
				constraints:
					valid_values: [ "image_classification", "object_detection", "translation", "recommendation", "reinforncement_learning" ]
			distributed_training:
				type: boolean
			layers:
				type: integer
			parameters:
				type: integer	
				
	sodalite.datatypes.modak.optimisation.ai_training.data.etl:
		derived_from: tosca.datatypes.Root
		properties:
			prefetch:
				type: integer
			cache:
				type: integer
				
	sodalite.datatypes.modak.optimisation.ai_training.data:
		derived_from: tosca.datatypes.Root
		properties:
			location:
				type: string
			basedata:
				type: string
				constraints:
					valid_values: [ "Imagenet", "CIFAR", "MNIST" ]
			size:
				type: integer
			count:
				type: integer
			etl:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.ai_training.data.etl							

	sodalite.datatypes.modak.optimisation.ai_training.ai_framework-keras:
		derived_from: tosca.datatypes.Root
		properties:
			version:
				type: string
			backend:
				type: string
				constraints:
					valid_values: [ "tensorflow", "pytorch", "cntk", "mxnet", "keras" ]	
          
	sodalite.datatypes.modak.optimisation.ai_training.ai_framework-tensorflow:
		derived_from: tosca.datatypes.Root
		properties:
			version:
				type: string
			xla:
				type: boolean         
          
	sodalite.datatypes.modak.optimisation.ai_training.ai_framework-pytorch:
		derived_from: tosca.datatypes.Root
		properties:
			version:
				type: string
			glow:
				type: boolean          
          
	sodalite.datatypes.modak.optimisation.ai_training:
		derived_from: tosca.datatypes.Root
		properties:
			config:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.ai_training.config
			data:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.ai_training.data
			ai_framework-keras:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.ai_training.ai_framework-keras
			ai_framework-tensorflow:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.ai_training.ai_framework-tensorflow
			ai_framework-pytorch:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.ai_training.ai_framework-pytorch       

	//Optimization HPC	
	sodalite.datatypes.modak.optimisation.hpc.config:
		derived_from: tosca.datatypes.Root
		properties:
			parallelisation:
				type: string
				constraints:
					valid_values: [ "mpi", "openmp", "opencc", "opencl" ]

	sodalite.datatypes.modak.optimisation.hpc.data.etl:
		derived_from: tosca.datatypes.Root
		properties:
			prefetch:
				type: boolean
			cache:
				type: boolean       
       
	sodalite.datatypes.modak.optimisation.hpc.data:
		derived_from: tosca.datatypes.Root
		properties:
			location:
				type: string
			basedata:
				type: string
				constraints:
					valid_values: [ "IMAGE", "RESTART" ]
			size:
				type: integer
			count:
				type: integer
			etl:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.hpc.data.etl 
       
	sodalite.datatypes.modak.optimisation.hpc.parallelisation-mpi:
		derived_from: tosca.datatypes.Root
		properties:
			library:
				type: string
				constraints:
					valid_values: [ "mvapch", "opnmpi" ]
			version:
				type: string
			scaling_efficiency:
				type: float
			core_subscription:
				type: integer
			message_size:
				type: string
				constraints:
					valid_values: [ "small", "medium", "large" ]          

	sodalite.datatypes.modak.optimisation.hpc.parallelisation-openmp:
		derived_from: tosca.datatypes.Root
		properties:
			number_of_threads:
				type: integer
			scaling_efficiency:
				type: float
			affinity:
				type: string
				constraints:
					valid_values: [ "block", "simple" ]		
		
	sodalite.datatypes.modak.optimisation.hpc.parallelisation-opencc:
    	derived_from: tosca.datatypes.Root
    	properties:
      		compiler:
        		type: string
        		constraints:
          			valid_values: [ "pgi", "cray" ]
      		version:
        		type: string
      		number_of_acc:
        		type: integer   
        		
	sodalite.datatypes.modak.optimisation.hpc.parallelisation-opencl:
    	derived_from: tosca.datatypes.Root
    	properties:
      		compiler:
        		type: string
        		constraints:
          			valid_values: [ "pgi", "cray" ]
      		version:
        		type: string
      		number_of_acc:
        		type: integer

	sodalite.datatypes.modak.optimisation.hpc:
    	derived_from: tosca.datatypes.Root
    	properties:
      		config:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.hpc.config
      		data:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.hpc.data
      		parallelisation-mpi:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.hpc.parallelisation-mpi
      		parallelisation-openmp:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.hpc.parallelisation-openmp
      		parallelisation-opencc:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.hpc.parallelisation-opencc
      		parallelisation-opencl:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.hpc.parallelisation-opencl

	//TODO: Optimization Big Data
	sodalite.datatypes.modak.optimisation.big_data:
    	derived_from: tosca.datatypes.Root

	//TODO: Optimization AI inference
  	sodalite.datatypes.modak.optimisation.ai_inference:
    	derived_from: tosca.datatypes.Root

	//Optimization
  	sodalite.datatypes.modak.optimisation:
		derived_from: tosca.datatypes.Root
		properties:
      		enable_opt_build:
        		type: boolean
      		enable_autotuning:
        		type: boolean
      		app_type:
        		type: string
        		constraints:
         			valid_values: [ "ai_training", "hpc", "big_data", "ai_inference" ]
      		opt_build:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.opt_build
      		autotuning:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.autotuning
      		app_type-ai_training:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.ai_training
      		app_type-hpc:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation.hpc
      		app_type-big_data:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.big_data
      		app_type-ai_inference:
        		type: map
        		entry_schema: sodalite.datatypes.modak.optimisation.ai_inference       		

capability_types:
	 sodalite.capabilities.modak.ModakEndpoint:
    	 derived_from: tosca.capabilities.Root

node_types:
	sodalite.nodes.modak:
    	derived_from: tosca.nodes.Root
    	properties:
      		endpoint:
        		type: string
    	capabilities:
      		modak_endpoint:
        		type: sodalite.capabilities.modak.ModakEndpoint
        		valid_source_types: [ sodalite.nodes.modak.job ]


	// here we can have the playbook that directly interfaces MODAK (src/docker)
	// and then proceed with the normal job workflow from HPC examples
	sodalite.nodes.modak.job:
		derived_from: tosca.nodes.Root
		properties:
			job_script:
				type: string
			job_options:
				type: map
				entry_schema: sodalite.datatypes.modak.job_options
			application:
				type: map
				entry_schema: sodalite.datatypes.modak.application
			target:
				type: map
				entry_schema: sodalite.datatypes.modak.target
			optimisation:
				type: map
				entry_schema: sodalite.datatypes.modak.optimisation
		attributes:
			artifact_url:
				type: string
			container_runtime:
				type: string
		requirements:
			modak_endpoint:
				node: sodalite.nodes.modak
				capability: sodalite.capabilities.modak.ModakEndpoint
				relationship: tosca.relationships.DependsOn
				occurrences: [ 1, 1 ]
		interfaces:
			Standard:
				type: tosca.interfaces.node.lifecycle.Standard
				operations:
					create:
						inputs:
							//job script location
							job_script: 
								default: get_property: 
									entity: SELF
									property: sodalite.nodes.modak.job.job_script
							//modak_endpoint properties
							modak_endpoint: 
								default: get_property: 
									entity: SELF
									property: sodalite.nodes.modak.endpoint
									req_cap: sodalite.nodes.modak.job.modak_endpoint
							//job_options properties
							job_options: 
								default: get_property: 
									entity: SELF
									property: sodalite.nodes.modak.job.job_options
							//application properties
							application: 
								default: get_property: 
									entity: SELF
									property: sodalite.nodes.modak.job.application
							//target properties
							target: 
								default: get_property: 
									entity: SELF
									property: sodalite.nodes.modak.job.target
							//optimisation properties
							optimisation: 
								default: get_property: 
									entity: SELF
									property: sodalite.nodes.modak.job.optimisation
						implementation: 
							primary: "/home/yosu/Projects/Sodalite/Git/iac-management/use-cases/modules/hpc/modak/job/playbooks/create-modak-job.yml"	