inputs:
	ssh-key-name:
		type: string

	docker-registry-ip:
		type: string

node_templates:
	
	security-rules-snow:
		type: sodalite.nodes.OpenStack.SecurityRules
		properties:
			group_name: "snow"
			group_description: "Snow UC security group"
			ports:
				http_port:  
					protocol: 'tcp' 
					port_range_min: 80
					port_range_max: 80
					remote_ip_prefix: "0.0.0.0/0"
				
				component_ports:
					protocol: 'tcp' 
					port_range_min: 8080
					port_range_max: 8081
					remote_ip_prefix: "0.0.0.0/0"

	snow-vm:
		type: sodalite.nodes.OpenStack.VM
		properties:
			name: 'snow-vm'
			image: 'centos7'
			flavor: 'm1.small'
			network: 'orchestrator-net'
			security_groups: 'default,snow'
			key_name: get_input: ssh-key-name
			user_name: "root"
		
		requirements:
			protected_by:
				node: security-rules-snow
			
		capabilities:
			host:
				properties:
					disk_size: "10 GB"
					num_cpus: 4
					num_gpus: 1
					mem_size: "4 GB"
				
			os:
				properties:
					architecture: "x86_64"
				

	snow-docker_host:
		type: sodalite.nodes.DockerHost
		properties:
			registry_ip: get_input: docker-registry-ip
			
		requirements:
			host:
				node: snow-vm
 
	skyline_extractor:
		 type: sodalite.nodes.DockerizedComponent
		 properties:
		 	image_name: 'snow-skyline-extractor'
		 	ports: ['8080:8080']
		 	exposed_ports: [8080]
		 	volumes: "/tmp/docker:/tmp"
		 	alias: "alias"
		 	registry_url: "registry_url"
		 	
		 optimization: ai_training.tensor_flow
		 
		 requirements:
		 	host:
		 		node: snow-docker_host
		 	
		 	dependency:
		 		node: tensorflow
		 				 	
	
	skyline_alignment: 
		type: sodalite.nodes.DockerizedComponent
		properties:
			image_name: "snow-skyline-alignment"
			ports: ["8081:8080", "80:8080"]
			exposed_ports: [8080]
			volumes: "/tmp/docker:/tmp"
			alias: "alias"
			registry_url: "registry_url"

		requirements:
			host:
				node: snow-docker_host
	
	tensorflow:
		type:tosca.nodes.SoftwareComponent