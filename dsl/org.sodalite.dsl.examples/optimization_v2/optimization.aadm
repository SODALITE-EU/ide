inputs:
	ssh-key-name:  
		type: string 
	image-name:  
		type: string 
	openstack-network-name:  
		type: string 
	security-groups:  
 		type: string    
	flavor-name:  
		type: string                   
	demo-files-path:  
		type: string 
		default: ""       
	docker-registry-url: 
		type: string
	docker-network: 
		type: string      
	docker-registry-cert-country-name:
		type: string
		default: ""
	docker-registry-cert-organization-name: 
		type: string
		default: ""
	docker-registry-cert-email-address: 
		type: string
		default: ""
	mysql-db-pass: 
		type: string
		default: "" 
		
node_templates:

	optimization-security-rules:  
		type: sodalite.nodes.OpenStack.SecurityRules 
		properties:  
			ports:  
				component_ports:  
					port_range_max: 8081 
					remote_ip_prefix: "0.0.0.0/0" 
					port_range_min: 8080
					protocol: "tcp" 
				http_port:  
					port_range_min: 80 
					port_range_max: 80
					protocol: "tcp" 
					remote_ip_prefix: "0.0.0.0/0" 
			group_name:  "optimization" 
			group_description:  "Optimization UC security group"
	
	optimization-vm:  
		type: sodalite.nodes.optimization.VM
		properties:  
			key_name:  get_input: ssh-key-name 
			image: get_input: image-name 
			name:  "optimization-vm_am_10"
			network: get_input: openstack-network-name  
			security_groups:  get_input: security-groups 
			flavor:  get_input: flavor-name
		requirements:  
			protected_by: 
				node: optimization-security-rules
		capabilities:
			host:
				properties:
					disk_size: "10 GB"
					num_cpus: 4
					num_gpus: 1
					mem_size: "4 GB"
			os:
				properties:
					architecture: "x86_64"
					
	optimization-docker-host:  
		type: sodalite.nodes.DockerHost 
		requirements:
			host:  
				node: optimization-vm	
				
	optimization-docker-registry1:
		type: sodalite.nodes.DockerRegistry
		properties:  
			docker_registry_url: get_input: docker-registry-url 
		requirements:
			host: 
				node: optimization-vm
			dependency: 
				node: optimization-docker-host 

	optimization-skyline-extractor:  
		type: sodalite.nodes.DockerizedComponent 
		optimization: ai_training.tensor_flow
		properties:  
			alias: "optimization-skyline-extractor"
			volumes:  "/tmp/docker:/tmp" 
			image_name:  "optimization-skyline-extractor:latest"
			ports:  ['8080:8080'] 
			exposed_ports:  [8080]
			registry_url: get_input: docker-registry-url
		requirements:  
			registry: 
				node: optimization-docker-registry1
			host:
				node: optimization-vm
			