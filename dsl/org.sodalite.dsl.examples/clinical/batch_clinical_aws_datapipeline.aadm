module: clinical

import: aws
import: batch
import: docker

inputs:

  clinical-uc-input-tarball-url:
    type: string
  clinical-uc-output-tarball-url:
    type: string

  aws-ssh-key-name:  
    type: string 
  aws-ssh-public-key:  
    type: string 
  vpc-id:  
    type: string 
  region:  
    type: string 
  vpc-subnet-id:  
    type: string 
  _get_secret_aws-access-key:  
    type: string 
  _get_secret_aws-secret-key:  
    type: string 

  _get_secret_minio-access-key:  
    type: string 
  _get_secret_minio-secret-key:  
    type: string   

  aws-image-name:  
    type: string 
  aws-security-rules:  
    type: list 
  aws-security-rules_egress:  
    type: list 
  aws-security-groups:  
    type: list 
  aws-flavor-name:  
    type: string 
  aws-vm-username:  
    type: string 
  aws-userdata:  
    type: string 

  _get_secret_gridftp-usercert:
    type: string
  _get_secret_gridftp-userkey:
    type: string
  globus_certificates_tarball_url:
    type: string


node_templates:

  aws-keypair:
    type: aws/sodalite.nodes.AWS.Keypair
    properties:  
      name:             get_input: aws-ssh-key-name
      public_key:       get_input: aws-ssh-public-key
      region:           get_input: region
      aws_access_key:   get_input: _get_secret_aws-access-key
      aws_secret_key:   get_input: _get_secret_aws-secret-key

  aws-security-rules:  
    type: aws/sodalite.nodes.AWS.SecurityRules 
    properties:        
      group_name: "clinical-uc-sec-group" 
      group_description: "Clinical UC SSH, GridFTP Security Rules" 
      rules:            get_input: aws-security-rules 
      rules_egress:     get_input: aws-security-rules_egress
      vpc_id:           get_input: vpc-id  
      region:           get_input: region  
      aws_access_key:   get_input: _get_secret_aws-access-key  
      aws_secret_key:   get_input: _get_secret_aws-secret-key  

  aws-vm:  
    type: aws/sodalite.nodes.AWS.VM
    properties:  
      name:             "clinical-uc-ec2-vm-3"
      key_name:         get_input: aws-ssh-key-name  
      image:            get_input: aws-image-name 
      network:          get_input: vpc-subnet-id  
      security_groups:  get_input: aws-security-groups  
      flavor:           get_input: aws-flavor-name 
      username:         get_input: aws-vm-username 
      region:           get_input: region  
      aws_access_key:   get_input: _get_secret_aws-access-key  
      aws_secret_key:   get_input: _get_secret_aws-secret-key  
      userdata:         get_input: aws-userdata  
    requirements:  
      protected_by:
        node: clinical/aws-security-rules
      dependency:
        node: clinical/aws-keypair


  docker-host:
    type: docker/sodalite.nodes.DockerHost
    requirements:
      host:
        node: clinical/vm

  docker-registry:
    type: docker/sodalite.nodes.DockerRegistry
    properties:
      docker_registry_url: "registry.hub.docker.com"
    requirements:
      host:
        node: clinical/vm

  docker-network:
    type: docker/sodalite.nodes.DockerNetwork
    properties:
      name: get_input: docker-network
    requirements:
      host:
        node: clinical/vm
      dependency:
        node: clinical/docker-host

  clinical-minio:
    type: docker/sodalite.nodes.DockerizedComponent
    properties:
      docker_network_name: get_property:
        entity: SELF
        property: clinical/docker-network.name
        req_cap: clinical/clinical-minio.network
      volumes: [ "minio-volume:/data" ]
      image_name: "quay.io/minio/minio"
      alias: "minio"
      ports: ['9000:9000','9001:9001']
      restart_policy: "always"
      command: [ "server /data --console-address ':9001'"]
      registry_url: get_input: docker-registry-url
      env:
        MINIO_ROOT_USER: get_input: _get_secret_minio-access-key
        MINIO_ROOT_PASSWORD: get_input: _get_secret_minio-secret-key
    requirements:
      host:
        node: clinical/docker-host
      network:
        node: clinical/docker-network
      registry:
        node: clinical/docker-registry
  

  
  clinical-uc-config:
    type: clinical/sodalite.nodes.clinical.Config
    properties:
      workspace:          "~/workflow-ide"
      input_tarball_url:  get_input: clinical-uc-input-tarball-url
      output_tarball_url: get_input: clinical-uc-output-tarball-url
    requirements:
      host:
        node: clinical/aws-vm
  
  aws-vm-singularity-runtime:
    type: batch/sodalite.nodes.batch.Container.Runtime
    properties:
      runtime: "singularity"
      images_location: "images"
    requirements:
      host:
        node: clinical/aws-vm

  aws-gridftp-client:
    type: batch/sodalite.data.mover.GridFTP.Client
    properties:
      cert_path: "/tmp/test-gridftp-certs"
      usercert: get_input: _get_secret_gridftp-usercert
      userkey:  get_input: _get_secret_gridftp-userkey
      globus_certificates_tarball_url:  get_input: globus_certificates_tarball_url
    requirements:
      host: 
        node: clinical/aws-vm

  // APPLICATIONS
  density-mapper-app:
    type: batch/sodalite.nodes.batch.Container.Application
    properties:
      app_tag: "density-mapper"
      app_type: "fortran"
      container_runtime: "docker://sodaliteh2020/cadt:1.0.0" // from private registry
      executable: "cadt < $(pwd)/input/cadt-density-output-iso.input"
    requirements:
      runtime:
        node: clinical/aws-vm-singularity-runtime
      host:
        node: clinical/aws-vm
      dependency:
        node: clinical/clinical-uc-config
  
  prob-mapper-app:
    type: batch/sodalite.nodes.batch.Container.Application
    optimization: hlrs.mpi
    properties:
      app_tag: "prob-mapper"
      app_type: "hpc"
      mpi_ranks: 2
      container_runtime: "private://moduli:1.0.0" // from private registry
      executable: "bash -c \"cd moduli/build/lib/moduli/ && python3 main_mpi.py -s -f $WORKSPACE_DIR/output/iso/L1L2-iso.dens -o $WORKSPACE_DIR/output/moduli\""
      build:
        src: "$HOME/moduli/.git"
        build_command: "bash -c \"cd moduli && pip3 --no-cache-dir install setuptools && pip3 --no-cache-dir install numpy pandas mpi4py --user && python3 setup.py install --user\""
    requirements:
      runtime:
        node: clinical/hlrs-singularity-runtime
      host:
        node: clinical/hlrs-testbed
      dependency:
        node: clinical/clinical-uc-config
  
  boundary-condition-app:
    type: batch/sodalite.nodes.batch.Container.Application
    properties:
      app_tag: "boundary-condition"
      app_type: "fortran"
      container_runtime: "docker://sodaliteh2020/cadt:1.0.0" // from private registry
      executable: "cadt < $(pwd)/input/cadt-med-output-iso.input"
    requirements:
      runtime:
        node: clinical/aws-vm-singularity-runtime
      host:
        node: clinical/aws-vm
      dependency:
        node: clinical/clinical-uc-config

  // JOB EXECUTIONS
  density-mapper-job:
    type: batch/sodalite.nodes.batch.Container.BatchExecution
    properties:
      workspace: "~/workflow-ide"
    requirements:
      application:
        node: clinical/density-mapper-app
      runtime:
        node: clinical/aws-vm-singularity-runtime
      host:
        node: clinical/aws-vm
  
  prob-mapper-job:
    type: batch/sodalite.nodes.batch.Container.JobExecution
    properties:
      job_name: "prob-mapper-job"
      node_count: 2
      process_count_per_node: 2
      wall_time_limit: "1:00:00"
      standard_output_file: "prob-mapper.out"
      standard_error_file: "prob-mapper.err"
      combine_stdout_stderr: true
      workspace: "~/workflow-ide"
    requirements:
      application:
        node: clinical/prob-mapper-app
      runtime:
        node: clinical/hlrs-singularity-runtime
      host:
        node: clinical/hlrs-testbed
  
  boundary-condition-job:
    type: batch/sodalite.nodes.batch.Container.BatchExecution
    properties:
      workspace: "~/workflow-ide"
    requirements:
      application:
        node: clinical/boundary-condition-app
      runtime:
        node: clinical/aws-vm-singularity-runtime
      host:
        node: clinical/aws-vm


  // WORKFLOW
  dm-exec:
    type: batch/sodalite.nodes.workflow.Job
    requirements:
      execution: 
        node: clinical/density-mapper-job
      host:
        node: clinical/aws-vm
  
  dm-result:
    type: batch/sodalite.nodes.workflow.Result
    requirements:
      job:
        node: clinical/dm-exec
      host:
        node: clinical/aws-vm
  
  dm-result-transfer:
    type: batch/sodalite.data.mover.GridFTP.Transfer
    properties:
      name: "Transfer density mapper results"
      src_protocol: "file"
      src_address: "localhost"
      src_path: "~/workflow-ide/output/"
      dst_protocol: "gsiftp"
      dst_address: "sodalite-fe.hlrs.de"
      dst_path: "~/workflow-ide/output/"
    requirements:
      client:
        node: clinical/aws-gridftp-client
      host: 
        node: clinical/aws-vm
      dependency:
        node: clinical/dm-result
  
  pm-exec:
    type: batch/sodalite.nodes.workflow.Job
    requirements:
      execution:
        node: clinical/prob-mapper-job
      host:
        node: clinical/hlrs-testbed
      dependency:
        node: clinical/dm-result-transfer
  
  pm-result:
    type: batch/sodalite.nodes.workflow.Result
    requirements:
      job:
        node: clinical/pm-exec
      host:
        node: clinical/hlrs-testbed
  
  pm-result-transfer:
    type: batch/sodalite.data.mover.GridFTP.Transfer
    properties:
      name: "Transfer of a file"
      src_protocol: "gsiftp"
      src_address: "sodalite-fe.hlrs.de"
      src_path: "~/workflow-ide/output/"
      dst_protocol: "file"
      dst_address: "localhost"
      dst_path: "~/workflow-ide/output/"
    requirements:
      client:
        node: clinical/aws-gridftp-client
      host: 
        node: clinical/aws-vm
      dependency:
        node: clinical/pm-result
  
  bc-exec:
    type: batch/sodalite.nodes.workflow.Job
    requirements:
      execution:
        node: clinical/boundary-condition-job
      host:
        node: clinical/aws-vm
      dependency:
        node: clinical/pm-result-transfer
  
  bc-result:
    type: batch/sodalite.nodes.workflow.Result
    requirements:
      job:
        node: clinical/bc-exec
      host:
        node: clinical/aws-vm