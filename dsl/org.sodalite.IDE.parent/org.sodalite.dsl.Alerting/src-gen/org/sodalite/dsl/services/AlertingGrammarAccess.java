/*
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlertingGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class Alerting_ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.Alerting_Model");
		private final Assignment cGroupsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGroupsEGroupsParserRuleCall_0 = (RuleCall)cGroupsAssignment.eContents().get(0);
		
		//Alerting_Model:
		//	groups+=EGroups*;
		@Override public ParserRule getRule() { return rule; }
		
		//groups+=EGroups*
		public Assignment getGroupsAssignment() { return cGroupsAssignment; }
		
		//EGroups
		public RuleCall getGroupsEGroupsParserRuleCall_0() { return cGroupsEGroupsParserRuleCall_0; }
	}
	public class EGroupsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EGroups");
		private final Assignment cGroupsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGroupsEGroupParserRuleCall_0 = (RuleCall)cGroupsAssignment.eContents().get(0);
		
		//EGroups:
		//	groups+=EGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//groups+=EGroup
		public Assignment getGroupsAssignment() { return cGroupsAssignment; }
		
		//EGroup
		public RuleCall getGroupsEGroupParserRuleCall_0() { return cGroupsEGroupParserRuleCall_0; }
	}
	public class EGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesERuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//EGroup:
		//	'group:' name=ID
		//	BEGIN
		//	rules+=ERule*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'group:' name=ID BEGIN rules+=ERule* END
		public Group getGroup() { return cGroup; }
		
		//'group:'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//rules+=ERule*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//ERule
		public RuleCall getRulesERuleParserRuleCall_3_0() { return cRulesERuleParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class ERuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ERule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAlertAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAlertIDTerminalRuleCall_1_0 = (RuleCall)cAlertAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cExprKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprEExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDurationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDurationSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDurationAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cLabelsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cLabelsELabelParserRuleCall_6_2_0 = (RuleCall)cLabelsAssignment_6_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAnnotationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cAnnotationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAnnotationsELabelParserRuleCall_7_2_0 = (RuleCall)cAnnotationsAssignment_7_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final RuleCall cENDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ERule:
		//	'alert:' alert=ID
		//	BEGIN
		//	'expr:' expr=EExpression ('for:' duration=STRING)? ('labels:'
		//	BEGIN
		//	labels+=ELabel*
		//	END)? ('annotations:'
		//	BEGIN
		//	annotations+=ELabel*
		//	END)?
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'alert:' alert=ID BEGIN 'expr:' expr=EExpression ('for:' duration=STRING)? ('labels:' BEGIN labels+=ELabel* END)?
		//('annotations:' BEGIN annotations+=ELabel* END)? END
		public Group getGroup() { return cGroup; }
		
		//'alert:'
		public Keyword getAlertKeyword_0() { return cAlertKeyword_0; }
		
		//alert=ID
		public Assignment getAlertAssignment_1() { return cAlertAssignment_1; }
		
		//ID
		public RuleCall getAlertIDTerminalRuleCall_1_0() { return cAlertIDTerminalRuleCall_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//'expr:'
		public Keyword getExprKeyword_3() { return cExprKeyword_3; }
		
		//expr=EExpression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//EExpression
		public RuleCall getExprEExpressionParserRuleCall_4_0() { return cExprEExpressionParserRuleCall_4_0; }
		
		//('for:' duration=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'for:'
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }
		
		//duration=STRING
		public Assignment getDurationAssignment_5_1() { return cDurationAssignment_5_1; }
		
		//STRING
		public RuleCall getDurationSTRINGTerminalRuleCall_5_1_0() { return cDurationSTRINGTerminalRuleCall_5_1_0; }
		
		//('labels:' BEGIN labels+=ELabel* END)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'labels:'
		public Keyword getLabelsKeyword_6_0() { return cLabelsKeyword_6_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_6_1() { return cBEGINTerminalRuleCall_6_1; }
		
		//labels+=ELabel*
		public Assignment getLabelsAssignment_6_2() { return cLabelsAssignment_6_2; }
		
		//ELabel
		public RuleCall getLabelsELabelParserRuleCall_6_2_0() { return cLabelsELabelParserRuleCall_6_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6_3() { return cENDTerminalRuleCall_6_3; }
		
		//('annotations:' BEGIN annotations+=ELabel* END)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'annotations:'
		public Keyword getAnnotationsKeyword_7_0() { return cAnnotationsKeyword_7_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7_1() { return cBEGINTerminalRuleCall_7_1; }
		
		//annotations+=ELabel*
		public Assignment getAnnotationsAssignment_7_2() { return cAnnotationsAssignment_7_2; }
		
		//ELabel
		public RuleCall getAnnotationsELabelParserRuleCall_7_2_0() { return cAnnotationsELabelParserRuleCall_7_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7_3() { return cENDTerminalRuleCall_7_3; }
		
		//END
		public RuleCall getENDTerminalRuleCall_8() { return cENDTerminalRuleCall_8; }
	}
	public class ELabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ELabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ELabel:
		//	key=ID ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class EExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EExpression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprEBinaryStatementParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//EExpression:
		//	expr=EBinaryStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=EBinaryStatement
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//EBinaryStatement
		public RuleCall getExprEBinaryStatementParserRuleCall_0() { return cExprEBinaryStatementParserRuleCall_0; }
	}
	public class EBinaryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EBinaryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLexprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLexprEStatementParserRuleCall_0_0 = (RuleCall)cLexprAssignment_0.eContents().get(0);
		private final Assignment cOperAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperEComparisonOperatorParserRuleCall_1_0 = (RuleCall)cOperAssignment_1.eContents().get(0);
		private final Assignment cRexprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRexprENUMBERParserRuleCall_2_0 = (RuleCall)cRexprAssignment_2.eContents().get(0);
		
		//EBinaryStatement:
		//	lexpr=EStatement oper=EComparisonOperator rexpr=ENUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//lexpr=EStatement oper=EComparisonOperator rexpr=ENUMBER
		public Group getGroup() { return cGroup; }
		
		//lexpr=EStatement
		public Assignment getLexprAssignment_0() { return cLexprAssignment_0; }
		
		//EStatement
		public RuleCall getLexprEStatementParserRuleCall_0_0() { return cLexprEStatementParserRuleCall_0_0; }
		
		//oper=EComparisonOperator
		public Assignment getOperAssignment_1() { return cOperAssignment_1; }
		
		//EComparisonOperator
		public RuleCall getOperEComparisonOperatorParserRuleCall_1_0() { return cOperEComparisonOperatorParserRuleCall_1_0; }
		
		//rexpr=ENUMBER
		public Assignment getRexprAssignment_2() { return cRexprAssignment_2; }
		
		//ENUMBER
		public RuleCall getRexprENUMBERParserRuleCall_2_0() { return cRexprENUMBERParserRuleCall_2_0; }
	}
	public class EStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEVectorMatchingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVectorExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EStatement:
		//	=> EVectorMatching | EVectorExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> EVectorMatching | EVectorExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> EVectorMatching
		public RuleCall getEVectorMatchingParserRuleCall_0() { return cEVectorMatchingParserRuleCall_0; }
		
		//EVectorExpr
		public RuleCall getEVectorExprParserRuleCall_1() { return cEVectorExprParserRuleCall_1; }
	}
	public class EVectorMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EVectorMatching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLexprEVectorExprParserRuleCall_1_0 = (RuleCall)cLexprAssignment_1.eContents().get(0);
		private final Assignment cOperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperEBinaryOperatorParserRuleCall_2_0 = (RuleCall)cOperAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeEVECTORMATCHINGTYPETerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLabelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelsELabelListParserRuleCall_5_0 = (RuleCall)cLabelsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRexprAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRexprEVectorExprParserRuleCall_7_0 = (RuleCall)cRexprAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EVectorMatching:
		//	'(' lexpr=EVectorExpr oper=EBinaryOperator type=EVECTORMATCHINGTYPE '(' labels=ELabelList ')' rexpr=EVectorExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' lexpr=EVectorExpr oper=EBinaryOperator type=EVECTORMATCHINGTYPE '(' labels=ELabelList ')' rexpr=EVectorExpr ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//lexpr=EVectorExpr
		public Assignment getLexprAssignment_1() { return cLexprAssignment_1; }
		
		//EVectorExpr
		public RuleCall getLexprEVectorExprParserRuleCall_1_0() { return cLexprEVectorExprParserRuleCall_1_0; }
		
		//oper=EBinaryOperator
		public Assignment getOperAssignment_2() { return cOperAssignment_2; }
		
		//EBinaryOperator
		public RuleCall getOperEBinaryOperatorParserRuleCall_2_0() { return cOperEBinaryOperatorParserRuleCall_2_0; }
		
		//type=EVECTORMATCHINGTYPE
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//EVECTORMATCHINGTYPE
		public RuleCall getTypeEVECTORMATCHINGTYPETerminalRuleCall_3_0() { return cTypeEVECTORMATCHINGTYPETerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//labels=ELabelList
		public Assignment getLabelsAssignment_5() { return cLabelsAssignment_5; }
		
		//ELabelList
		public RuleCall getLabelsELabelListParserRuleCall_5_0() { return cLabelsELabelListParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//rexpr=EVectorExpr
		public Assignment getRexprAssignment_7() { return cRexprAssignment_7; }
		
		//EVectorExpr
		public RuleCall getRexprEVectorExprParserRuleCall_7_0() { return cRexprEVectorExprParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ELabelListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ELabelList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cELabelListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListESingleLabelParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListESingleLabelParserRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		
		//ELabelList:
		//	{ELabelList} list+=ESingleLabel? (',' list+=ESingleLabel)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ELabelList} list+=ESingleLabel? (',' list+=ESingleLabel)*
		public Group getGroup() { return cGroup; }
		
		//{ELabelList}
		public Action getELabelListAction_0() { return cELabelListAction_0; }
		
		//list+=ESingleLabel?
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ESingleLabel
		public RuleCall getListESingleLabelParserRuleCall_1_0() { return cListESingleLabelParserRuleCall_1_0; }
		
		//(',' list+=ESingleLabel)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=ESingleLabel
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//ESingleLabel
		public RuleCall getListESingleLabelParserRuleCall_2_1_0() { return cListESingleLabelParserRuleCall_2_1_0; }
	}
	public class ESingleLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ESingleLabel");
		private final Assignment cLabelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_0 = (RuleCall)cLabelAssignment.eContents().get(0);
		
		//ESingleLabel:
		//	label=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//label=ID
		public Assignment getLabelAssignment() { return cLabelAssignment; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_0() { return cLabelIDTerminalRuleCall_0; }
	}
	public class EAggregationExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EAggregationExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperEAGGREGATIONOPERTerminalRuleCall_0_0 = (RuleCall)cOperAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cModifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cModifierEAGGREGATIONOPERMODIFIERTerminalRuleCall_1_0_0 = (RuleCall)cModifierAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLabelsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLabelsELabelListParserRuleCall_1_2_0 = (RuleCall)cLabelsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprEVectorExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EAggregationExpr:
		//	oper=EAGGREGATIONOPER (modifier=EAGGREGATIONOPERMODIFIER '(' labels=ELabelList ')')? '(' expr=EVectorExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//oper=EAGGREGATIONOPER (modifier=EAGGREGATIONOPERMODIFIER '(' labels=ELabelList ')')? '(' expr=EVectorExpr ')'
		public Group getGroup() { return cGroup; }
		
		//oper=EAGGREGATIONOPER
		public Assignment getOperAssignment_0() { return cOperAssignment_0; }
		
		//EAGGREGATIONOPER
		public RuleCall getOperEAGGREGATIONOPERTerminalRuleCall_0_0() { return cOperEAGGREGATIONOPERTerminalRuleCall_0_0; }
		
		//(modifier=EAGGREGATIONOPERMODIFIER '(' labels=ELabelList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//modifier=EAGGREGATIONOPERMODIFIER
		public Assignment getModifierAssignment_1_0() { return cModifierAssignment_1_0; }
		
		//EAGGREGATIONOPERMODIFIER
		public RuleCall getModifierEAGGREGATIONOPERMODIFIERTerminalRuleCall_1_0_0() { return cModifierEAGGREGATIONOPERMODIFIERTerminalRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//labels=ELabelList
		public Assignment getLabelsAssignment_1_2() { return cLabelsAssignment_1_2; }
		
		//ELabelList
		public RuleCall getLabelsELabelListParserRuleCall_1_2_0() { return cLabelsELabelListParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expr=EVectorExpr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//EVectorExpr
		public RuleCall getExprEVectorExprParserRuleCall_3_0() { return cExprEVectorExprParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EVectorExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EVectorExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEBinaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEFunctionExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEAggregationExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEMetricExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cENUMBERParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//EVectorExpr:
		//	EBinaryExpr | EFunctionExpr | EAggregationExpr | EMetricExpr | ENUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//EBinaryExpr | EFunctionExpr | EAggregationExpr | EMetricExpr | ENUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EBinaryExpr
		public RuleCall getEBinaryExprParserRuleCall_0() { return cEBinaryExprParserRuleCall_0; }
		
		//EFunctionExpr
		public RuleCall getEFunctionExprParserRuleCall_1() { return cEFunctionExprParserRuleCall_1; }
		
		//EAggregationExpr
		public RuleCall getEAggregationExprParserRuleCall_2() { return cEAggregationExprParserRuleCall_2; }
		
		//EMetricExpr
		public RuleCall getEMetricExprParserRuleCall_3() { return cEMetricExprParserRuleCall_3; }
		
		//ENUMBER
		public RuleCall getENUMBERParserRuleCall_4() { return cENUMBERParserRuleCall_4; }
	}
	public class EBinaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EBinaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLexprEVectorExprParserRuleCall_1_0 = (RuleCall)cLexprAssignment_1.eContents().get(0);
		private final Assignment cOperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperEBinaryOperatorParserRuleCall_2_0 = (RuleCall)cOperAssignment_2.eContents().get(0);
		private final Assignment cRexprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRexprEVectorExprParserRuleCall_3_0 = (RuleCall)cRexprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EBinaryExpr:
		//	'(' lexpr=EVectorExpr oper=EBinaryOperator rexpr=EVectorExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' lexpr=EVectorExpr oper=EBinaryOperator rexpr=EVectorExpr ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//lexpr=EVectorExpr
		public Assignment getLexprAssignment_1() { return cLexprAssignment_1; }
		
		//EVectorExpr
		public RuleCall getLexprEVectorExprParserRuleCall_1_0() { return cLexprEVectorExprParserRuleCall_1_0; }
		
		//oper=EBinaryOperator
		public Assignment getOperAssignment_2() { return cOperAssignment_2; }
		
		//EBinaryOperator
		public RuleCall getOperEBinaryOperatorParserRuleCall_2_0() { return cOperEBinaryOperatorParserRuleCall_2_0; }
		
		//rexpr=EVectorExpr
		public Assignment getRexprAssignment_3() { return cRexprAssignment_3; }
		
		//EVectorExpr
		public RuleCall getRexprEVectorExprParserRuleCall_3_0() { return cRexprEVectorExprParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EFunctionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EFunctionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionEFUNCTIONTYPETerminalRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprEVectorExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EFunctionExpr:
		//	function=EFUNCTIONTYPE '(' expr=EVectorExpr? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//function=EFUNCTIONTYPE '(' expr=EVectorExpr? ')'
		public Group getGroup() { return cGroup; }
		
		//function=EFUNCTIONTYPE
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//EFUNCTIONTYPE
		public RuleCall getFunctionEFUNCTIONTYPETerminalRuleCall_0_0() { return cFunctionEFUNCTIONTYPETerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=EVectorExpr?
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//EVectorExpr
		public RuleCall getExprEVectorExprParserRuleCall_2_0() { return cExprEVectorExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EMetricExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EMetricExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeEMetricTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTagsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagsETagParserRuleCall_2_0 = (RuleCall)cTagsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTagsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTagsETagParserRuleCall_3_1_0 = (RuleCall)cTagsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPeriodAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPeriodEPeriodParserRuleCall_5_1_0 = (RuleCall)cPeriodAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//EMetricExpr:
		//	type=EMetricType '{' tags+=ETag? (',' tags+=ETag)* '}' ('[' period=EPeriod ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=EMetricType '{' tags+=ETag? (',' tags+=ETag)* '}' ('[' period=EPeriod ']')?
		public Group getGroup() { return cGroup; }
		
		//type=EMetricType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//EMetricType
		public RuleCall getTypeEMetricTypeParserRuleCall_0_0() { return cTypeEMetricTypeParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//tags+=ETag?
		public Assignment getTagsAssignment_2() { return cTagsAssignment_2; }
		
		//ETag
		public RuleCall getTagsETagParserRuleCall_2_0() { return cTagsETagParserRuleCall_2_0; }
		
		//(',' tags+=ETag)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tags+=ETag
		public Assignment getTagsAssignment_3_1() { return cTagsAssignment_3_1; }
		
		//ETag
		public RuleCall getTagsETagParserRuleCall_3_1_0() { return cTagsETagParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('[' period=EPeriod ']')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//period=EPeriod
		public Assignment getPeriodAssignment_5_1() { return cPeriodAssignment_5_1; }
		
		//EPeriod
		public RuleCall getPeriodEPeriodParserRuleCall_5_1_0() { return cPeriodEPeriodParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}
	public class EPeriodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EPeriod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentsEPeriodSegmentParserRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Assignment cSegmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSegmentsEPeriodSegmentParserRuleCall_1_0 = (RuleCall)cSegmentsAssignment_1.eContents().get(0);
		
		//EPeriod:
		//	segments+=EPeriodSegment segments+=EPeriodSegment*;
		@Override public ParserRule getRule() { return rule; }
		
		//segments+=EPeriodSegment segments+=EPeriodSegment*
		public Group getGroup() { return cGroup; }
		
		//segments+=EPeriodSegment
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }
		
		//EPeriodSegment
		public RuleCall getSegmentsEPeriodSegmentParserRuleCall_0_0() { return cSegmentsEPeriodSegmentParserRuleCall_0_0; }
		
		//segments+=EPeriodSegment*
		public Assignment getSegmentsAssignment_1() { return cSegmentsAssignment_1; }
		
		//EPeriodSegment
		public RuleCall getSegmentsEPeriodSegmentParserRuleCall_1_0() { return cSegmentsEPeriodSegmentParserRuleCall_1_0; }
	}
	public class EPeriodSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EPeriodSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitEPERIODUNITTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//EPeriodSegment:
		//	value=INT unit=EPERIODUNIT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT unit=EPERIODUNIT
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//unit=EPERIODUNIT
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//EPERIODUNIT
		public RuleCall getUnitEPERIODUNITTerminalRuleCall_1_0() { return cUnitEPERIODUNITTerminalRuleCall_1_0; }
	}
	public class ETagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ETag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cOperAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperEOperAssociationParserRuleCall_1_0 = (RuleCall)cOperAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ETag:
		//	key=ID oper=EOperAssociation value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID oper=EOperAssociation value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//oper=EOperAssociation
		public Assignment getOperAssignment_1() { return cOperAssignment_1; }
		
		//EOperAssociation
		public RuleCall getOperEOperAssociationParserRuleCall_1_0() { return cOperEOperAssociationParserRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class EOperAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EOperAssociation");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeEqualsSignKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeEqualsSignTildeKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeExclamationMarkEqualsSignKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeTildeKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		
		//EOperAssociation:
		//	type=('=' | '=~' | '!=' | '~');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('=' | '=~' | '!=' | '~')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('=' | '=~' | '!=' | '~')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'='
		public Keyword getTypeEqualsSignKeyword_0_0() { return cTypeEqualsSignKeyword_0_0; }
		
		//'=~'
		public Keyword getTypeEqualsSignTildeKeyword_0_1() { return cTypeEqualsSignTildeKeyword_0_1; }
		
		//'!='
		public Keyword getTypeExclamationMarkEqualsSignKeyword_0_2() { return cTypeExclamationMarkEqualsSignKeyword_0_2; }
		
		//'~'
		public Keyword getTypeTildeKeyword_0_3() { return cTypeTildeKeyword_0_3; }
	}
	public class EMetricTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EMetricType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeESLURMEXPORTERTerminalRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeEPBSEXPORTERTerminalRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeENODEEXPORTERTerminalRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		
		//EMetricType:
		//	type=(ESLURMEXPORTER | EPBSEXPORTER | ENODEEXPORTER);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(ESLURMEXPORTER | EPBSEXPORTER | ENODEEXPORTER)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(ESLURMEXPORTER | EPBSEXPORTER | ENODEEXPORTER)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//ESLURMEXPORTER
		public RuleCall getTypeESLURMEXPORTERTerminalRuleCall_0_0() { return cTypeESLURMEXPORTERTerminalRuleCall_0_0; }
		
		//EPBSEXPORTER
		public RuleCall getTypeEPBSEXPORTERTerminalRuleCall_0_1() { return cTypeEPBSEXPORTERTerminalRuleCall_0_1; }
		
		//ENODEEXPORTER
		public RuleCall getTypeENODEEXPORTERTerminalRuleCall_0_2() { return cTypeENODEEXPORTERTerminalRuleCall_0_2; }
	}
	public class ENUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ENUMBER");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ENUMBER:
		//	value=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0() { return cValueNUMBERParserRuleCall_0; }
	}
	public class EBinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EBinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEArithmeticOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEComparisonOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEBinaryLogicOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EBinaryOperator:
		//	EArithmeticOperator | EComparisonOperator | EBinaryLogicOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EArithmeticOperator | EComparisonOperator | EBinaryLogicOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EArithmeticOperator
		public RuleCall getEArithmeticOperatorParserRuleCall_0() { return cEArithmeticOperatorParserRuleCall_0; }
		
		//EComparisonOperator
		public RuleCall getEComparisonOperatorParserRuleCall_1() { return cEComparisonOperatorParserRuleCall_1; }
		
		//EBinaryLogicOperator
		public RuleCall getEBinaryLogicOperatorParserRuleCall_2() { return cEBinaryLogicOperatorParserRuleCall_2; }
	}
	public class EArithmeticOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EArithmeticOperator");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypePlusSignKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeHyphenMinusKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeAsteriskKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeSolidusKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypePercentSignKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeCircumflexAccentKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		
		//EArithmeticOperator:
		//	type=('+' | '-' | '*' | '/' | '%' | '^');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('+' | '-' | '*' | '/' | '%' | '^')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('+' | '-' | '*' | '/' | '%' | '^')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'+'
		public Keyword getTypePlusSignKeyword_0_0() { return cTypePlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getTypeHyphenMinusKeyword_0_1() { return cTypeHyphenMinusKeyword_0_1; }
		
		//'*'
		public Keyword getTypeAsteriskKeyword_0_2() { return cTypeAsteriskKeyword_0_2; }
		
		//'/'
		public Keyword getTypeSolidusKeyword_0_3() { return cTypeSolidusKeyword_0_3; }
		
		//'%'
		public Keyword getTypePercentSignKeyword_0_4() { return cTypePercentSignKeyword_0_4; }
		
		//'^'
		public Keyword getTypeCircumflexAccentKeyword_0_5() { return cTypeCircumflexAccentKeyword_0_5; }
	}
	public class EComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EComparisonOperator");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeLessThanSignKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeGreaterThanSignKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeLessThanSignEqualsSignKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeGreaterThanSignEqualsSignKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeEqualsSignEqualsSignKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		
		//EComparisonOperator:
		//	type=('<' | '>' | '<=' | '>=' | '==');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('<' | '>' | '<=' | '>=' | '==')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('<' | '>' | '<=' | '>=' | '==')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'<'
		public Keyword getTypeLessThanSignKeyword_0_0() { return cTypeLessThanSignKeyword_0_0; }
		
		//'>'
		public Keyword getTypeGreaterThanSignKeyword_0_1() { return cTypeGreaterThanSignKeyword_0_1; }
		
		//'<='
		public Keyword getTypeLessThanSignEqualsSignKeyword_0_2() { return cTypeLessThanSignEqualsSignKeyword_0_2; }
		
		//'>='
		public Keyword getTypeGreaterThanSignEqualsSignKeyword_0_3() { return cTypeGreaterThanSignEqualsSignKeyword_0_3; }
		
		//'=='
		public Keyword getTypeEqualsSignEqualsSignKeyword_0_4() { return cTypeEqualsSignEqualsSignKeyword_0_4; }
	}
	public class EBinaryLogicOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EBinaryLogicOperator");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeAndKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeOrKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeUnlessKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		
		//EBinaryLogicOperator:
		//	type=('and' | 'or' | 'unless');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('and' | 'or' | 'unless')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('and' | 'or' | 'unless')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'and'
		public Keyword getTypeAndKeyword_0_0() { return cTypeAndKeyword_0_0; }
		
		//'or'
		public Keyword getTypeOrKeyword_0_1() { return cTypeOrKeyword_0_1; }
		
		//'unless'
		public Keyword getTypeUnlessKeyword_0_2() { return cTypeUnlessKeyword_0_2; }
	}
	public class LEFT_SEPARATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.LEFT_SEPARATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LEFT_SEPARATOR:
		//	'(' | BEGIN;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' | BEGIN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
	}
	public class RIGHT_SEPARATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.RIGHT_SEPARATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RIGHT_SEPARATOR:
		//	')' | END;
		@Override public ParserRule getRule() { return rule; }
		
		//')' | END
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0() { return cRightParenthesisKeyword_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1() { return cENDTerminalRuleCall_1; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMBER ecore::EFloat:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	private final Alerting_ModelElements pAlerting_Model;
	private final EGroupsElements pEGroups;
	private final EGroupElements pEGroup;
	private final ERuleElements pERule;
	private final ELabelElements pELabel;
	private final EExpressionElements pEExpression;
	private final EBinaryStatementElements pEBinaryStatement;
	private final EStatementElements pEStatement;
	private final EVectorMatchingElements pEVectorMatching;
	private final ELabelListElements pELabelList;
	private final ESingleLabelElements pESingleLabel;
	private final EAggregationExprElements pEAggregationExpr;
	private final TerminalRule tEAGGREGATIONOPER;
	private final TerminalRule tEAGGREGATIONOPERMODIFIER;
	private final EVectorExprElements pEVectorExpr;
	private final EBinaryExprElements pEBinaryExpr;
	private final EFunctionExprElements pEFunctionExpr;
	private final TerminalRule tEFUNCTIONTYPE;
	private final EMetricExprElements pEMetricExpr;
	private final EPeriodElements pEPeriod;
	private final EPeriodSegmentElements pEPeriodSegment;
	private final TerminalRule tEPERIODUNIT;
	private final ETagElements pETag;
	private final EOperAssociationElements pEOperAssociation;
	private final EMetricTypeElements pEMetricType;
	private final TerminalRule tENODEEXPORTER;
	private final TerminalRule tESLURMEXPORTER;
	private final TerminalRule tEPBSEXPORTER;
	private final TerminalRule tEVECTORMATCHINGTYPE;
	private final ENUMBERElements pENUMBER;
	private final EBinaryOperatorElements pEBinaryOperator;
	private final EArithmeticOperatorElements pEArithmeticOperator;
	private final EComparisonOperatorElements pEComparisonOperator;
	private final EBinaryLogicOperatorElements pEBinaryLogicOperator;
	private final LEFT_SEPARATORElements pLEFT_SEPARATOR;
	private final RIGHT_SEPARATORElements pRIGHT_SEPARATOR;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlertingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAlerting_Model = new Alerting_ModelElements();
		this.pEGroups = new EGroupsElements();
		this.pEGroup = new EGroupElements();
		this.pERule = new ERuleElements();
		this.pELabel = new ELabelElements();
		this.pEExpression = new EExpressionElements();
		this.pEBinaryStatement = new EBinaryStatementElements();
		this.pEStatement = new EStatementElements();
		this.pEVectorMatching = new EVectorMatchingElements();
		this.pELabelList = new ELabelListElements();
		this.pESingleLabel = new ESingleLabelElements();
		this.pEAggregationExpr = new EAggregationExprElements();
		this.tEAGGREGATIONOPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EAGGREGATIONOPER");
		this.tEAGGREGATIONOPERMODIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EAGGREGATIONOPERMODIFIER");
		this.pEVectorExpr = new EVectorExprElements();
		this.pEBinaryExpr = new EBinaryExprElements();
		this.pEFunctionExpr = new EFunctionExprElements();
		this.tEFUNCTIONTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EFUNCTIONTYPE");
		this.pEMetricExpr = new EMetricExprElements();
		this.pEPeriod = new EPeriodElements();
		this.pEPeriodSegment = new EPeriodSegmentElements();
		this.tEPERIODUNIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EPERIODUNIT");
		this.pETag = new ETagElements();
		this.pEOperAssociation = new EOperAssociationElements();
		this.pEMetricType = new EMetricTypeElements();
		this.tENODEEXPORTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ENODEEXPORTER");
		this.tESLURMEXPORTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.ESLURMEXPORTER");
		this.tEPBSEXPORTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EPBSEXPORTER");
		this.tEVECTORMATCHINGTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.EVECTORMATCHINGTYPE");
		this.pENUMBER = new ENUMBERElements();
		this.pEBinaryOperator = new EBinaryOperatorElements();
		this.pEArithmeticOperator = new EArithmeticOperatorElements();
		this.pEComparisonOperator = new EComparisonOperatorElements();
		this.pEBinaryLogicOperator = new EBinaryLogicOperatorElements();
		this.pLEFT_SEPARATOR = new LEFT_SEPARATORElements();
		this.pRIGHT_SEPARATOR = new RIGHT_SEPARATORElements();
		this.pNUMBER = new NUMBERElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.END");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.Alerting.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sodalite.dsl.Alerting".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Alerting_Model:
	//	groups+=EGroups*;
	public Alerting_ModelElements getAlerting_ModelAccess() {
		return pAlerting_Model;
	}
	
	public ParserRule getAlerting_ModelRule() {
		return getAlerting_ModelAccess().getRule();
	}
	
	//EGroups:
	//	groups+=EGroup;
	public EGroupsElements getEGroupsAccess() {
		return pEGroups;
	}
	
	public ParserRule getEGroupsRule() {
		return getEGroupsAccess().getRule();
	}
	
	//EGroup:
	//	'group:' name=ID
	//	BEGIN
	//	rules+=ERule*
	//	END;
	public EGroupElements getEGroupAccess() {
		return pEGroup;
	}
	
	public ParserRule getEGroupRule() {
		return getEGroupAccess().getRule();
	}
	
	//ERule:
	//	'alert:' alert=ID
	//	BEGIN
	//	'expr:' expr=EExpression ('for:' duration=STRING)? ('labels:'
	//	BEGIN
	//	labels+=ELabel*
	//	END)? ('annotations:'
	//	BEGIN
	//	annotations+=ELabel*
	//	END)?
	//	END;
	public ERuleElements getERuleAccess() {
		return pERule;
	}
	
	public ParserRule getERuleRule() {
		return getERuleAccess().getRule();
	}
	
	//ELabel:
	//	key=ID ":" value=STRING;
	public ELabelElements getELabelAccess() {
		return pELabel;
	}
	
	public ParserRule getELabelRule() {
		return getELabelAccess().getRule();
	}
	
	//EExpression:
	//	expr=EBinaryStatement;
	public EExpressionElements getEExpressionAccess() {
		return pEExpression;
	}
	
	public ParserRule getEExpressionRule() {
		return getEExpressionAccess().getRule();
	}
	
	//EBinaryStatement:
	//	lexpr=EStatement oper=EComparisonOperator rexpr=ENUMBER;
	public EBinaryStatementElements getEBinaryStatementAccess() {
		return pEBinaryStatement;
	}
	
	public ParserRule getEBinaryStatementRule() {
		return getEBinaryStatementAccess().getRule();
	}
	
	//EStatement:
	//	=> EVectorMatching | EVectorExpr;
	public EStatementElements getEStatementAccess() {
		return pEStatement;
	}
	
	public ParserRule getEStatementRule() {
		return getEStatementAccess().getRule();
	}
	
	//EVectorMatching:
	//	'(' lexpr=EVectorExpr oper=EBinaryOperator type=EVECTORMATCHINGTYPE '(' labels=ELabelList ')' rexpr=EVectorExpr ')';
	public EVectorMatchingElements getEVectorMatchingAccess() {
		return pEVectorMatching;
	}
	
	public ParserRule getEVectorMatchingRule() {
		return getEVectorMatchingAccess().getRule();
	}
	
	//ELabelList:
	//	{ELabelList} list+=ESingleLabel? (',' list+=ESingleLabel)*;
	public ELabelListElements getELabelListAccess() {
		return pELabelList;
	}
	
	public ParserRule getELabelListRule() {
		return getELabelListAccess().getRule();
	}
	
	//ESingleLabel:
	//	label=ID;
	public ESingleLabelElements getESingleLabelAccess() {
		return pESingleLabel;
	}
	
	public ParserRule getESingleLabelRule() {
		return getESingleLabelAccess().getRule();
	}
	
	//EAggregationExpr:
	//	oper=EAGGREGATIONOPER (modifier=EAGGREGATIONOPERMODIFIER '(' labels=ELabelList ')')? '(' expr=EVectorExpr ')';
	public EAggregationExprElements getEAggregationExprAccess() {
		return pEAggregationExpr;
	}
	
	public ParserRule getEAggregationExprRule() {
		return getEAggregationExprAccess().getRule();
	}
	
	//terminal EAGGREGATIONOPER:
	//	'sum' | 'min' | 'max' | 'avg' | 'avg_over_time' | 'group' | 'stddev' | 'stdvar' |
	//	'count' | 'count_values' | 'bottomk' | 'topk' | 'quantile';
	public TerminalRule getEAGGREGATIONOPERRule() {
		return tEAGGREGATIONOPER;
	}
	
	//terminal EAGGREGATIONOPERMODIFIER:
	//	'without' | 'by';
	public TerminalRule getEAGGREGATIONOPERMODIFIERRule() {
		return tEAGGREGATIONOPERMODIFIER;
	}
	
	//EVectorExpr:
	//	EBinaryExpr | EFunctionExpr | EAggregationExpr | EMetricExpr | ENUMBER;
	public EVectorExprElements getEVectorExprAccess() {
		return pEVectorExpr;
	}
	
	public ParserRule getEVectorExprRule() {
		return getEVectorExprAccess().getRule();
	}
	
	//EBinaryExpr:
	//	'(' lexpr=EVectorExpr oper=EBinaryOperator rexpr=EVectorExpr ')';
	public EBinaryExprElements getEBinaryExprAccess() {
		return pEBinaryExpr;
	}
	
	public ParserRule getEBinaryExprRule() {
		return getEBinaryExprAccess().getRule();
	}
	
	//EFunctionExpr:
	//	function=EFUNCTIONTYPE '(' expr=EVectorExpr? ')';
	public EFunctionExprElements getEFunctionExprAccess() {
		return pEFunctionExpr;
	}
	
	public ParserRule getEFunctionExprRule() {
		return getEFunctionExprAccess().getRule();
	}
	
	//terminal EFUNCTIONTYPE:
	//	'abs' | 'absent' | 'absent_over_time' | 'avg_over_time' | 'ceil' | 'changes' | 'clamp' | 'clamp_max' | 'clamp_min' |
	//	'count_over_time' | 'day_of_month' | 'day_of_week' | 'days_in_month' | 'delta' | 'deriv' | 'exp' | 'floor' |
	//	'histogram_quantile' | 'holt_winters' | 'hour' | 'idelta' | 'increase' | 'irate' | 'label_join' | 'label_replace' |
	//	'last_over_time' | 'ln' | 'log2' | 'log10' | 'max_over_time' | 'minute' | 'min_over_time' | 'month' | 'predict_linear'
	//	| 'present_over_time' | 'quantile_over_time' | 'rate' | 'resets' | 'round' | 'scalar' | 'sgn' | 'sort' | 'sort_desc' |
	//	'sqrt' | 'stdvar_over_time' | 'stddev_over_time' | 'sum_over_time' | 'time' | 'timestamp' | 'vector' | 'year';
	public TerminalRule getEFUNCTIONTYPERule() {
		return tEFUNCTIONTYPE;
	}
	
	//EMetricExpr:
	//	type=EMetricType '{' tags+=ETag? (',' tags+=ETag)* '}' ('[' period=EPeriod ']')?;
	public EMetricExprElements getEMetricExprAccess() {
		return pEMetricExpr;
	}
	
	public ParserRule getEMetricExprRule() {
		return getEMetricExprAccess().getRule();
	}
	
	//EPeriod:
	//	segments+=EPeriodSegment segments+=EPeriodSegment*;
	public EPeriodElements getEPeriodAccess() {
		return pEPeriod;
	}
	
	public ParserRule getEPeriodRule() {
		return getEPeriodAccess().getRule();
	}
	
	//EPeriodSegment:
	//	value=INT unit=EPERIODUNIT;
	public EPeriodSegmentElements getEPeriodSegmentAccess() {
		return pEPeriodSegment;
	}
	
	public ParserRule getEPeriodSegmentRule() {
		return getEPeriodSegmentAccess().getRule();
	}
	
	//terminal EPERIODUNIT:
	//	'ms' | 's' | 'm' | 'h' | 'd' | 'w' | 'y';
	public TerminalRule getEPERIODUNITRule() {
		return tEPERIODUNIT;
	}
	
	//ETag:
	//	key=ID oper=EOperAssociation value=STRING;
	public ETagElements getETagAccess() {
		return pETag;
	}
	
	public ParserRule getETagRule() {
		return getETagAccess().getRule();
	}
	
	//EOperAssociation:
	//	type=('=' | '=~' | '!=' | '~');
	public EOperAssociationElements getEOperAssociationAccess() {
		return pEOperAssociation;
	}
	
	public ParserRule getEOperAssociationRule() {
		return getEOperAssociationAccess().getRule();
	}
	
	//EMetricType:
	//	type=(ESLURMEXPORTER | EPBSEXPORTER | ENODEEXPORTER);
	public EMetricTypeElements getEMetricTypeAccess() {
		return pEMetricType;
	}
	
	public ParserRule getEMetricTypeRule() {
		return getEMetricTypeAccess().getRule();
	}
	
	//terminal ENODEEXPORTER:
	//	'node_arp_entries' | 'node_boot_time_seconds' | 'node_context_switches_total' |
	//	'node_cooling_device_cur_state' | 'node_cpu_guest_seconds_total' | 'node_cpu_seconds_total' |
	//	'node_disk_io_now' | 'node_disk_io_time_seconds_total' | 'node_disk_io_time_weighted_seconds_total' |
	//	'node_disk_read_bytes_total' | 'node_disk_read_time_seconds_total' | 'node_disk_reads_completed_total' |
	//	'node_disk_reads_merged_total' | 'node_disk_write_time_seconds_total' | 'node_disk_writes_completed_total' |
	//	'node_disk_writes_merged_total' | 'node_disk_written_bytes_total' | 'node_entropy_available_bits' |
	//	'node_entropy_pool_size_bits' | 'node_exporter_build_info' | 'node_filefd_allocated' |
	//	'node_filefd_maximum' | 'node_filesystem_avail_bytes' | 'node_filesystem_device_error' |
	//	'node_filesystem_files' | 'node_filesystem_files_free' | 'node_filesystem_free_bytes' |
	//	'node_filesystem_readonly' | 'node_filesystem_size_bytes' | 'node_forks_total' |
	//	'node_intr_total' | 'node_load1' | 'node_load15' | 'node_load5' |
	//	'node_memory_Active_anon_bytes' | 'node_memory_Active_bytes' | 'node_memory_Active_file_bytes' |
	//	'node_memory_AnonHugePages_bytes' | 'node_memory_AnonPages_bytes' | 'node_memory_Bounce_bytes' |
	//	'node_memory_Buffers_bytes' | 'node_memory_Cached_bytes' | 'node_memory_CmaFree_bytes' |
	//	'node_memory_CmaTotal_bytes' | 'node_memory_CommitLimit_bytes' | 'node_memory_Committed_AS_bytes' |
	//	'node_memory_DirectMap1G_bytes' | 'node_memory_DirectMap2M_bytes' | 'node_memory_DirectMap4k_bytes' |
	//	'node_memory_Dirty_bytes' | 'node_memory_HardwareCorrupted_bytes' | 'node_memory_HugePages_Free' |
	//	'node_memory_HugePages_Rsvd' | 'node_memory_HugePages_Surp' | 'node_memory_HugePages_Total' |
	//	'node_memory_Hugepagesize_bytes' | 'node_memory_Inactive_anon_bytes' | 'node_memory_Inactive_bytes' |
	//	'node_memory_Inactive_file_bytes' | 'node_memory_KernelStack_bytes' | 'node_memory_Mapped_bytes' |
	//	'node_memory_MemAvailable_bytes' | 'node_memory_MemFree_bytes' | 'node_memory_MemTotal_bytes' |
	//	'node_memory_Mlocked_bytes' | 'node_memory_NFS_Unstable_bytes' | 'node_memory_PageTables_bytes' |
	//	'node_memory_SReclaimable_bytes' | 'node_memory_SUnreclaim_bytes' | 'node_memory_ShmemHugePages_bytes' |
	//	'node_memory_ShmemPmdMapped_bytes' | 'node_memory_Shmem_bytes' | 'node_memory_Slab_bytes' |
	//	'node_memory_SwapCached_bytes' | 'node_memory_SwapFree_bytes' | 'node_memory_SwapTotal_bytes' |
	//	'node_memory_Unevictable_bytes' | 'node_memory_VmallocChunk_bytes' | 'node_memory_VmallocTotal_bytes' |
	//	'node_memory_VmallocUsed_bytes' | 'node_memory_WritebackTmp_bytes' | 'node_memory_Writeback_bytes' |
	//	'node_netstat_Icmp6_InErrors' | 'node_netstat_Icmp6_InMsgs' | 'node_netstat_Icmp6_OutMsgs' |
	//	'node_netstat_Icmp_InErrors' | 'node_netstat_Icmp_InMsgs' | 'node_netstat_Icmp_OutMsgs' |
	//	'node_netstat_Ip6_InOctets' | 'node_netstat_Ip6_OutOctets' | 'node_netstat_IpExt_InOctets' |
	//	'node_netstat_IpExt_OutOctets' | 'node_netstat_Ip_Forwarding' | 'node_netstat_TcpExt_ListenDrops' |
	//	'node_netstat_TcpExt_ListenOverflows' | 'node_netstat_TcpExt_SyncookiesFailed' | 'node_netstat_TcpExt_SyncookiesRecv'
	//	|
	//	'node_netstat_TcpExt_SyncookiesSent' | 'node_netstat_TcpExt_TCPSynRetrans' | 'node_netstat_Tcp_ActiveOpens' |
	//	'node_netstat_Tcp_CurrEstab' | 'node_netstat_Tcp_InErrs' | 'node_netstat_Tcp_InSegs' |
	//	'node_netstat_Tcp_OutRsts' | 'node_netstat_Tcp_OutSegs' | 'node_netstat_Tcp_PassiveOpens' |
	//	'node_netstat_Tcp_RetransSegs' | 'node_netstat_Udp6_InDatagrams' | 'node_netstat_Udp6_InErrors' |
	//	'node_netstat_Udp6_NoPorts' | 'node_netstat_Udp6_OutDatagrams' | 'node_netstat_Udp6_RcvbufErrors' |
	//	'node_netstat_Udp6_SndbufErrors' | 'node_netstat_UdpLite6_InErrors' | 'node_netstat_UdpLite_InErrors' |
	//	'node_netstat_Udp_InDatagrams' | 'node_netstat_Udp_InErrors' | 'node_netstat_Udp_NoPorts' |
	//	'node_netstat_Udp_OutDatagrams' | 'node_netstat_Udp_RcvbufErrors' | 'node_netstat_Udp_SndbufErrors' |
	//	'node_network_address_assign_type' | 'node_network_carrier_changes_total' |
	//	'node_network_carrier_down_changes_total' | 'node_network_carrier_up_changes_total' |
	//	'node_network_device_id' | 'node_network_dormant' | 'node_network_flags' |
	//	'node_network_iface_id' | 'node_network_iface_link' | 'node_network_iface_link_mode' |
	//	'node_network_info' | 'node_network_mtu_bytes' | 'node_network_name_assign_type' |
	//	'node_network_net_dev_group' | 'node_network_protocol_type' | 'node_network_receive_bytes_total' |
	//	'node_network_receive_compressed_total' | 'node_network_receive_drop_total' |
	//	'node_network_receive_errs_total' | 'node_network_receive_fifo_total' |
	//	'node_network_receive_frame_total' | 'node_network_receive_multicast_total' |
	//	'node_network_receive_packets_total' | 'node_network_speed_bytes' | 'node_network_transmit_bytes_total' |
	//	'node_network_transmit_carrier_total' | 'node_network_transmit_colls_total' |
	//	'node_network_transmit_compressed_total' | 'node_network_transmit_drop_total' |
	//	'node_network_transmit_errs_total' | 'node_network_transmit_fifo_total' |
	//	'node_network_transmit_packets_total' | 'node_network_transmit_queue_length' |
	//	'node_network_up' | 'node_nf_conntrack_entries' | 'node_nf_conntrack_entries_limit' |
	//	'node_procs_blocked' | 'node_procs_running' | 'node_schedstat_running_seconds_total' |
	//	'node_schedstat_timeslices_total' | 'node_schedstat_waiting_seconds_total' |
	//	'node_scrape_collector_duration_seconds' | 'node_scrape_collector_success' |
	//	'node_sockstat_FRAG6_inuse' | 'node_sockstat_FRAG6_memory' | 'node_sockstat_FRAG_inuse' |
	//	'node_sockstat_FRAG_memory' | 'node_sockstat_RAW6_inuse' | 'node_sockstat_RAW_inuse' |
	//	'node_sockstat_TCP6_inuse' | 'node_sockstat_TCP_alloc' | 'node_sockstat_TCP_inuse' |
	//	'node_sockstat_TCP_mem' | 'node_sockstat_TCP_mem_bytes' | 'node_sockstat_TCP_orphan' |
	//	'node_sockstat_TCP_tw' | 'node_sockstat_UDP6_inuse' | 'node_sockstat_UDPLITE6_inuse' |
	//	'node_sockstat_UDPLITE_inuse' | 'node_sockstat_UDP_inuse' | 'node_sockstat_UDP_mem' |
	//	'node_sockstat_UDP_mem_bytes' | 'node_sockstat_sockets_used' | 'node_softnet_dropped_total' |
	//	'node_softnet_processed_total' | 'node_softnet_times_squeezed_total' | 'node_textfile_scrape_error' |
	//	'node_time_seconds' | 'node_timex_estimated_error_seconds' | 'node_timex_frequency_adjustment_ratio' |
	//	'node_timex_loop_time_constant' | 'node_timex_maxerror_seconds' | 'node_timex_offset_seconds' |
	//	'node_timex_pps_calibration_total' | 'node_timex_pps_error_total' | 'node_timex_pps_frequency_hertz' |
	//	'node_timex_pps_jitter_seconds' | 'node_timex_pps_jitter_total' | 'node_timex_pps_shift_seconds' |
	//	'node_timex_pps_stability_exceeded_total' | 'node_timex_pps_stability_hertz' | 'node_timex_status' |
	//	'node_timex_sync_status' | 'node_timex_tai_offset_seconds' | 'node_timex_tick_seconds' |
	//	'node_udp_queues' | 'node_uname_info' | 'node_vmstat_oom_kill' | 'node_vmstat_pgfault' |
	//	'node_vmstat_pgmajfault' | 'node_vmstat_pgpgin' | 'node_vmstat_pgpgout' |
	//	'node_vmstat_pswpin' | 'node_vmstat_pswpout';
	public TerminalRule getENODEEXPORTERRule() {
		return tENODEEXPORTER;
	}
	
	//terminal ESLURMEXPORTER:
	//	'slurm_job_state' | 'slurm_job_walltime_used' | 'slurm_job_cpu_n' | 'slurm_job_memory_virtual_max' |
	//	'slurm_job_memory_physical_max' | 'slurm_job_queued' | 'slurm_job_exit_code' |
	//	'slurm_job_exit_signal' | 'slurm_partition_availability' | 'slurm_partition_cores_idle' |
	//	'slurm_partition_cores_allocated' | 'slurm_partition_cores_total';
	public TerminalRule getESLURMEXPORTERRule() {
		return tESLURMEXPORTER;
	}
	
	//terminal EPBSEXPORTER:
	//	'pbs_job_state' | 'pbs_job_priority' | 'pbs_job_walltime_used' | 'pbs_job_walltime_max' |
	//	'pbs_job_walltime_remaining' | 'pbs_job_cpu_time' | 'pbs_job_cpu_n' |
	//	'pbs_job_mem_virtual' | 'pbs_job_mem_physical' | 'pbs_job_time_queued' |
	//	'pbs_job_exit_status' | 'pbs_queue_enabled' | 'pbs_queue_started' |
	//	'pbs_queue_jobs_total' | 'pbs_queue_jobs_max' | 'pbs_queue_jobs_queued' |
	//	'pbs_queue_jobs_running' | 'pbs_queue_jobs_held' | 'pbs_queue_jobs_waiting' |
	//	'pbs_queue_jobs_transit' | 'pbs_queue_jobs_exiting' | 'pbs_queue_jobs_complete';
	public TerminalRule getEPBSEXPORTERRule() {
		return tEPBSEXPORTER;
	}
	
	//terminal EVECTORMATCHINGTYPE:
	//	'on' | 'ignoring';
	public TerminalRule getEVECTORMATCHINGTYPERule() {
		return tEVECTORMATCHINGTYPE;
	}
	
	//ENUMBER:
	//	value=NUMBER;
	public ENUMBERElements getENUMBERAccess() {
		return pENUMBER;
	}
	
	public ParserRule getENUMBERRule() {
		return getENUMBERAccess().getRule();
	}
	
	//EBinaryOperator:
	//	EArithmeticOperator | EComparisonOperator | EBinaryLogicOperator;
	public EBinaryOperatorElements getEBinaryOperatorAccess() {
		return pEBinaryOperator;
	}
	
	public ParserRule getEBinaryOperatorRule() {
		return getEBinaryOperatorAccess().getRule();
	}
	
	//EArithmeticOperator:
	//	type=('+' | '-' | '*' | '/' | '%' | '^');
	public EArithmeticOperatorElements getEArithmeticOperatorAccess() {
		return pEArithmeticOperator;
	}
	
	public ParserRule getEArithmeticOperatorRule() {
		return getEArithmeticOperatorAccess().getRule();
	}
	
	//EComparisonOperator:
	//	type=('<' | '>' | '<=' | '>=' | '==');
	public EComparisonOperatorElements getEComparisonOperatorAccess() {
		return pEComparisonOperator;
	}
	
	public ParserRule getEComparisonOperatorRule() {
		return getEComparisonOperatorAccess().getRule();
	}
	
	//EBinaryLogicOperator:
	//	type=('and' | 'or' | 'unless');
	public EBinaryLogicOperatorElements getEBinaryLogicOperatorAccess() {
		return pEBinaryLogicOperator;
	}
	
	public ParserRule getEBinaryLogicOperatorRule() {
		return getEBinaryLogicOperatorAccess().getRule();
	}
	
	//LEFT_SEPARATOR:
	//	'(' | BEGIN;
	public LEFT_SEPARATORElements getLEFT_SEPARATORAccess() {
		return pLEFT_SEPARATOR;
	}
	
	public ParserRule getLEFT_SEPARATORRule() {
		return getLEFT_SEPARATORAccess().getRule();
	}
	
	//RIGHT_SEPARATOR:
	//	')' | END;
	public RIGHT_SEPARATORElements getRIGHT_SEPARATORAccess() {
		return pRIGHT_SEPARATOR;
	}
	
	public ParserRule getRIGHT_SEPARATORRule() {
		return getRIGHT_SEPARATORAccess().getRule();
	}
	
	//NUMBER ecore::EFloat:
	//	'-'? INT ('.' INT)?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
