/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.alerting.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.sodalite.dsl.alerting.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.sodalite.dsl.alerting.AlertingPackage
 * @generated
 */
public class AlertingSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlertingPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlertingSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AlertingPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AlertingPackage.ALERTING_MODEL:
      {
        Alerting_Model alerting_Model = (Alerting_Model)theEObject;
        T result = caseAlerting_Model(alerting_Model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EGROUPS:
      {
        EGroups eGroups = (EGroups)theEObject;
        T result = caseEGroups(eGroups);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EGROUP:
      {
        EGroup eGroup = (EGroup)theEObject;
        T result = caseEGroup(eGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ERULE:
      {
        ERule eRule = (ERule)theEObject;
        T result = caseERule(eRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ELABEL:
      {
        ELabel eLabel = (ELabel)theEObject;
        T result = caseELabel(eLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EEXPRESSION:
      {
        EExpression eExpression = (EExpression)theEObject;
        T result = caseEExpression(eExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EBINARY_STATEMENT:
      {
        EBinaryStatement eBinaryStatement = (EBinaryStatement)theEObject;
        T result = caseEBinaryStatement(eBinaryStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ESTATEMENT:
      {
        EStatement eStatement = (EStatement)theEObject;
        T result = caseEStatement(eStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EVECTOR_MATCHING:
      {
        EVectorMatching eVectorMatching = (EVectorMatching)theEObject;
        T result = caseEVectorMatching(eVectorMatching);
        if (result == null) result = caseEStatement(eVectorMatching);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ELABEL_LIST:
      {
        ELabelList eLabelList = (ELabelList)theEObject;
        T result = caseELabelList(eLabelList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ESINGLE_LABEL:
      {
        ESingleLabel eSingleLabel = (ESingleLabel)theEObject;
        T result = caseESingleLabel(eSingleLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EAGGREGATION_EXPR:
      {
        EAggregationExpr eAggregationExpr = (EAggregationExpr)theEObject;
        T result = caseEAggregationExpr(eAggregationExpr);
        if (result == null) result = caseEVectorExpr(eAggregationExpr);
        if (result == null) result = caseEStatement(eAggregationExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EVECTOR_EXPR:
      {
        EVectorExpr eVectorExpr = (EVectorExpr)theEObject;
        T result = caseEVectorExpr(eVectorExpr);
        if (result == null) result = caseEStatement(eVectorExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EBINARY_EXPR:
      {
        EBinaryExpr eBinaryExpr = (EBinaryExpr)theEObject;
        T result = caseEBinaryExpr(eBinaryExpr);
        if (result == null) result = caseEVectorExpr(eBinaryExpr);
        if (result == null) result = caseEStatement(eBinaryExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EFUNCTION_EXPR:
      {
        EFunctionExpr eFunctionExpr = (EFunctionExpr)theEObject;
        T result = caseEFunctionExpr(eFunctionExpr);
        if (result == null) result = caseEVectorExpr(eFunctionExpr);
        if (result == null) result = caseEStatement(eFunctionExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EMETRIC_EXPR:
      {
        EMetricExpr eMetricExpr = (EMetricExpr)theEObject;
        T result = caseEMetricExpr(eMetricExpr);
        if (result == null) result = caseEVectorExpr(eMetricExpr);
        if (result == null) result = caseEStatement(eMetricExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EPERIOD:
      {
        EPeriod ePeriod = (EPeriod)theEObject;
        T result = caseEPeriod(ePeriod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EPERIOD_SEGMENT:
      {
        EPeriodSegment ePeriodSegment = (EPeriodSegment)theEObject;
        T result = caseEPeriodSegment(ePeriodSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ETAG:
      {
        ETag eTag = (ETag)theEObject;
        T result = caseETag(eTag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EOPER_ASSOCIATION:
      {
        EOperAssociation eOperAssociation = (EOperAssociation)theEObject;
        T result = caseEOperAssociation(eOperAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EMETRIC_TYPE:
      {
        EMetricType eMetricType = (EMetricType)theEObject;
        T result = caseEMetricType(eMetricType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ENUMBER:
      {
        ENUMBER enumber = (ENUMBER)theEObject;
        T result = caseENUMBER(enumber);
        if (result == null) result = caseEVectorExpr(enumber);
        if (result == null) result = caseEStatement(enumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EBINARY_OPERATOR:
      {
        EBinaryOperator eBinaryOperator = (EBinaryOperator)theEObject;
        T result = caseEBinaryOperator(eBinaryOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EARITHMETIC_OPERATOR:
      {
        EArithmeticOperator eArithmeticOperator = (EArithmeticOperator)theEObject;
        T result = caseEArithmeticOperator(eArithmeticOperator);
        if (result == null) result = caseEBinaryOperator(eArithmeticOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.ECOMPARISON_OPERATOR:
      {
        EComparisonOperator eComparisonOperator = (EComparisonOperator)theEObject;
        T result = caseEComparisonOperator(eComparisonOperator);
        if (result == null) result = caseEBinaryOperator(eComparisonOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlertingPackage.EBINARY_LOGIC_OPERATOR:
      {
        EBinaryLogicOperator eBinaryLogicOperator = (EBinaryLogicOperator)theEObject;
        T result = caseEBinaryLogicOperator(eBinaryLogicOperator);
        if (result == null) result = caseEBinaryOperator(eBinaryLogicOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alerting Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alerting Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlerting_Model(Alerting_Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EGroups</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EGroups</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEGroups(EGroups object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EGroup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EGroup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEGroup(EGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERule(ERule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELabel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELabel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELabel(ELabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEExpression(EExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBinary Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBinary Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBinaryStatement(EBinaryStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EStatement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EStatement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEStatement(EStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVector Matching</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVector Matching</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVectorMatching(EVectorMatching object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELabel List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELabel List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELabelList(ELabelList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ESingle Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ESingle Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseESingleLabel(ESingleLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EAggregation Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EAggregation Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEAggregationExpr(EAggregationExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVector Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVector Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVectorExpr(EVectorExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBinary Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBinary Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBinaryExpr(EBinaryExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EFunction Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EFunction Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEFunctionExpr(EFunctionExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EMetric Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EMetric Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEMetricExpr(EMetricExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPeriod</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPeriod</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPeriod(EPeriod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPeriod Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPeriod Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPeriodSegment(EPeriodSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETag(ETag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EOper Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EOper Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEOperAssociation(EOperAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EMetric Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EMetric Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEMetricType(EMetricType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENUMBER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENUMBER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENUMBER(ENUMBER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBinary Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBinary Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBinaryOperator(EBinaryOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EArithmetic Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EArithmetic Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEArithmeticOperator(EArithmeticOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EComparison Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EComparison Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEComparisonOperator(EComparisonOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBinary Logic Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBinary Logic Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBinaryLogicOperator(EBinaryLogicOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AlertingSwitch
