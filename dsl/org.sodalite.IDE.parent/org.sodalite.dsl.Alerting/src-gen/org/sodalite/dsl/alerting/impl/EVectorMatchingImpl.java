/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.alerting.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.dsl.alerting.AlertingPackage;
import org.sodalite.dsl.alerting.EBinaryOperator;
import org.sodalite.dsl.alerting.ELabelList;
import org.sodalite.dsl.alerting.EVectorExpr;
import org.sodalite.dsl.alerting.EVectorMatching;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EVector Matching</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EVectorMatchingImpl#getLexpr <em>Lexpr</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EVectorMatchingImpl#getOper <em>Oper</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EVectorMatchingImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EVectorMatchingImpl#getLabels <em>Labels</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EVectorMatchingImpl#getRexpr <em>Rexpr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EVectorMatchingImpl extends EStatementImpl implements EVectorMatching
{
  /**
   * The cached value of the '{@link #getLexpr() <em>Lexpr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLexpr()
   * @generated
   * @ordered
   */
  protected EVectorExpr lexpr;

  /**
   * The cached value of the '{@link #getOper() <em>Oper</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOper()
   * @generated
   * @ordered
   */
  protected EBinaryOperator oper;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLabels() <em>Labels</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabels()
   * @generated
   * @ordered
   */
  protected ELabelList labels;

  /**
   * The cached value of the '{@link #getRexpr() <em>Rexpr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRexpr()
   * @generated
   * @ordered
   */
  protected EVectorExpr rexpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EVectorMatchingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlertingPackage.Literals.EVECTOR_MATCHING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EVectorExpr getLexpr()
  {
    return lexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLexpr(EVectorExpr newLexpr, NotificationChain msgs)
  {
    EVectorExpr oldLexpr = lexpr;
    lexpr = newLexpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__LEXPR, oldLexpr, newLexpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLexpr(EVectorExpr newLexpr)
  {
    if (newLexpr != lexpr)
    {
      NotificationChain msgs = null;
      if (lexpr != null)
        msgs = ((InternalEObject)lexpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__LEXPR, null, msgs);
      if (newLexpr != null)
        msgs = ((InternalEObject)newLexpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__LEXPR, null, msgs);
      msgs = basicSetLexpr(newLexpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__LEXPR, newLexpr, newLexpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBinaryOperator getOper()
  {
    return oper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOper(EBinaryOperator newOper, NotificationChain msgs)
  {
    EBinaryOperator oldOper = oper;
    oper = newOper;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__OPER, oldOper, newOper);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOper(EBinaryOperator newOper)
  {
    if (newOper != oper)
    {
      NotificationChain msgs = null;
      if (oper != null)
        msgs = ((InternalEObject)oper).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__OPER, null, msgs);
      if (newOper != null)
        msgs = ((InternalEObject)newOper).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__OPER, null, msgs);
      msgs = basicSetOper(newOper, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__OPER, newOper, newOper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ELabelList getLabels()
  {
    return labels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabels(ELabelList newLabels, NotificationChain msgs)
  {
    ELabelList oldLabels = labels;
    labels = newLabels;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__LABELS, oldLabels, newLabels);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabels(ELabelList newLabels)
  {
    if (newLabels != labels)
    {
      NotificationChain msgs = null;
      if (labels != null)
        msgs = ((InternalEObject)labels).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__LABELS, null, msgs);
      if (newLabels != null)
        msgs = ((InternalEObject)newLabels).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__LABELS, null, msgs);
      msgs = basicSetLabels(newLabels, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__LABELS, newLabels, newLabels));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EVectorExpr getRexpr()
  {
    return rexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRexpr(EVectorExpr newRexpr, NotificationChain msgs)
  {
    EVectorExpr oldRexpr = rexpr;
    rexpr = newRexpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__REXPR, oldRexpr, newRexpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRexpr(EVectorExpr newRexpr)
  {
    if (newRexpr != rexpr)
    {
      NotificationChain msgs = null;
      if (rexpr != null)
        msgs = ((InternalEObject)rexpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__REXPR, null, msgs);
      if (newRexpr != null)
        msgs = ((InternalEObject)newRexpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EVECTOR_MATCHING__REXPR, null, msgs);
      msgs = basicSetRexpr(newRexpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EVECTOR_MATCHING__REXPR, newRexpr, newRexpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlertingPackage.EVECTOR_MATCHING__LEXPR:
        return basicSetLexpr(null, msgs);
      case AlertingPackage.EVECTOR_MATCHING__OPER:
        return basicSetOper(null, msgs);
      case AlertingPackage.EVECTOR_MATCHING__LABELS:
        return basicSetLabels(null, msgs);
      case AlertingPackage.EVECTOR_MATCHING__REXPR:
        return basicSetRexpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlertingPackage.EVECTOR_MATCHING__LEXPR:
        return getLexpr();
      case AlertingPackage.EVECTOR_MATCHING__OPER:
        return getOper();
      case AlertingPackage.EVECTOR_MATCHING__TYPE:
        return getType();
      case AlertingPackage.EVECTOR_MATCHING__LABELS:
        return getLabels();
      case AlertingPackage.EVECTOR_MATCHING__REXPR:
        return getRexpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlertingPackage.EVECTOR_MATCHING__LEXPR:
        setLexpr((EVectorExpr)newValue);
        return;
      case AlertingPackage.EVECTOR_MATCHING__OPER:
        setOper((EBinaryOperator)newValue);
        return;
      case AlertingPackage.EVECTOR_MATCHING__TYPE:
        setType((String)newValue);
        return;
      case AlertingPackage.EVECTOR_MATCHING__LABELS:
        setLabels((ELabelList)newValue);
        return;
      case AlertingPackage.EVECTOR_MATCHING__REXPR:
        setRexpr((EVectorExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlertingPackage.EVECTOR_MATCHING__LEXPR:
        setLexpr((EVectorExpr)null);
        return;
      case AlertingPackage.EVECTOR_MATCHING__OPER:
        setOper((EBinaryOperator)null);
        return;
      case AlertingPackage.EVECTOR_MATCHING__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case AlertingPackage.EVECTOR_MATCHING__LABELS:
        setLabels((ELabelList)null);
        return;
      case AlertingPackage.EVECTOR_MATCHING__REXPR:
        setRexpr((EVectorExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlertingPackage.EVECTOR_MATCHING__LEXPR:
        return lexpr != null;
      case AlertingPackage.EVECTOR_MATCHING__OPER:
        return oper != null;
      case AlertingPackage.EVECTOR_MATCHING__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case AlertingPackage.EVECTOR_MATCHING__LABELS:
        return labels != null;
      case AlertingPackage.EVECTOR_MATCHING__REXPR:
        return rexpr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //EVectorMatchingImpl
