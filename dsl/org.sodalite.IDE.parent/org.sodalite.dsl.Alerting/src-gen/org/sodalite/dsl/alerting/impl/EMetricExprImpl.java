/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.alerting.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.sodalite.dsl.alerting.AlertingPackage;
import org.sodalite.dsl.alerting.EMetricExpr;
import org.sodalite.dsl.alerting.EMetricType;
import org.sodalite.dsl.alerting.EPeriod;
import org.sodalite.dsl.alerting.ETag;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EMetric Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EMetricExprImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EMetricExprImpl#getTags <em>Tags</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EMetricExprImpl#getPeriod <em>Period</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EMetricExprImpl extends EVectorExprImpl implements EMetricExpr
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected EMetricType type;

  /**
   * The cached value of the '{@link #getTags() <em>Tags</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTags()
   * @generated
   * @ordered
   */
  protected EList<ETag> tags;

  /**
   * The cached value of the '{@link #getPeriod() <em>Period</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPeriod()
   * @generated
   * @ordered
   */
  protected EPeriod period;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EMetricExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlertingPackage.Literals.EMETRIC_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EMetricType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(EMetricType newType, NotificationChain msgs)
  {
    EMetricType oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EMETRIC_EXPR__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(EMetricType newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EMETRIC_EXPR__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EMETRIC_EXPR__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EMETRIC_EXPR__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ETag> getTags()
  {
    if (tags == null)
    {
      tags = new EObjectContainmentEList<ETag>(ETag.class, this, AlertingPackage.EMETRIC_EXPR__TAGS);
    }
    return tags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EPeriod getPeriod()
  {
    return period;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPeriod(EPeriod newPeriod, NotificationChain msgs)
  {
    EPeriod oldPeriod = period;
    period = newPeriod;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EMETRIC_EXPR__PERIOD, oldPeriod, newPeriod);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPeriod(EPeriod newPeriod)
  {
    if (newPeriod != period)
    {
      NotificationChain msgs = null;
      if (period != null)
        msgs = ((InternalEObject)period).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EMETRIC_EXPR__PERIOD, null, msgs);
      if (newPeriod != null)
        msgs = ((InternalEObject)newPeriod).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EMETRIC_EXPR__PERIOD, null, msgs);
      msgs = basicSetPeriod(newPeriod, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EMETRIC_EXPR__PERIOD, newPeriod, newPeriod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlertingPackage.EMETRIC_EXPR__TYPE:
        return basicSetType(null, msgs);
      case AlertingPackage.EMETRIC_EXPR__TAGS:
        return ((InternalEList<?>)getTags()).basicRemove(otherEnd, msgs);
      case AlertingPackage.EMETRIC_EXPR__PERIOD:
        return basicSetPeriod(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlertingPackage.EMETRIC_EXPR__TYPE:
        return getType();
      case AlertingPackage.EMETRIC_EXPR__TAGS:
        return getTags();
      case AlertingPackage.EMETRIC_EXPR__PERIOD:
        return getPeriod();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlertingPackage.EMETRIC_EXPR__TYPE:
        setType((EMetricType)newValue);
        return;
      case AlertingPackage.EMETRIC_EXPR__TAGS:
        getTags().clear();
        getTags().addAll((Collection<? extends ETag>)newValue);
        return;
      case AlertingPackage.EMETRIC_EXPR__PERIOD:
        setPeriod((EPeriod)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlertingPackage.EMETRIC_EXPR__TYPE:
        setType((EMetricType)null);
        return;
      case AlertingPackage.EMETRIC_EXPR__TAGS:
        getTags().clear();
        return;
      case AlertingPackage.EMETRIC_EXPR__PERIOD:
        setPeriod((EPeriod)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlertingPackage.EMETRIC_EXPR__TYPE:
        return type != null;
      case AlertingPackage.EMETRIC_EXPR__TAGS:
        return tags != null && !tags.isEmpty();
      case AlertingPackage.EMETRIC_EXPR__PERIOD:
        return period != null;
    }
    return super.eIsSet(featureID);
  }

} //EMetricExprImpl
