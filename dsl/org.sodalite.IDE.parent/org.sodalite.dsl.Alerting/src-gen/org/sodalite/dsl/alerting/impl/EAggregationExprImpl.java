/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.alerting.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.dsl.alerting.AlertingPackage;
import org.sodalite.dsl.alerting.EAggregationExpr;
import org.sodalite.dsl.alerting.ELabelList;
import org.sodalite.dsl.alerting.EVectorExpr;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EAggregation Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EAggregationExprImpl#getOper <em>Oper</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EAggregationExprImpl#getModifier <em>Modifier</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EAggregationExprImpl#getLabels <em>Labels</em>}</li>
 *   <li>{@link org.sodalite.dsl.alerting.impl.EAggregationExprImpl#getExpr <em>Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EAggregationExprImpl extends EVectorExprImpl implements EAggregationExpr
{
  /**
   * The default value of the '{@link #getOper() <em>Oper</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOper()
   * @generated
   * @ordered
   */
  protected static final String OPER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOper() <em>Oper</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOper()
   * @generated
   * @ordered
   */
  protected String oper = OPER_EDEFAULT;

  /**
   * The default value of the '{@link #getModifier() <em>Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifier()
   * @generated
   * @ordered
   */
  protected static final String MODIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getModifier() <em>Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifier()
   * @generated
   * @ordered
   */
  protected String modifier = MODIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getLabels() <em>Labels</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabels()
   * @generated
   * @ordered
   */
  protected ELabelList labels;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected EVectorExpr expr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EAggregationExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlertingPackage.Literals.EAGGREGATION_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOper()
  {
    return oper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOper(String newOper)
  {
    String oldOper = oper;
    oper = newOper;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EAGGREGATION_EXPR__OPER, oldOper, oper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getModifier()
  {
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModifier(String newModifier)
  {
    String oldModifier = modifier;
    modifier = newModifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EAGGREGATION_EXPR__MODIFIER, oldModifier, modifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ELabelList getLabels()
  {
    return labels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabels(ELabelList newLabels, NotificationChain msgs)
  {
    ELabelList oldLabels = labels;
    labels = newLabels;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EAGGREGATION_EXPR__LABELS, oldLabels, newLabels);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabels(ELabelList newLabels)
  {
    if (newLabels != labels)
    {
      NotificationChain msgs = null;
      if (labels != null)
        msgs = ((InternalEObject)labels).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EAGGREGATION_EXPR__LABELS, null, msgs);
      if (newLabels != null)
        msgs = ((InternalEObject)newLabels).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EAGGREGATION_EXPR__LABELS, null, msgs);
      msgs = basicSetLabels(newLabels, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EAGGREGATION_EXPR__LABELS, newLabels, newLabels));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EVectorExpr getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(EVectorExpr newExpr, NotificationChain msgs)
  {
    EVectorExpr oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlertingPackage.EAGGREGATION_EXPR__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(EVectorExpr newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EAGGREGATION_EXPR__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlertingPackage.EAGGREGATION_EXPR__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlertingPackage.EAGGREGATION_EXPR__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlertingPackage.EAGGREGATION_EXPR__LABELS:
        return basicSetLabels(null, msgs);
      case AlertingPackage.EAGGREGATION_EXPR__EXPR:
        return basicSetExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlertingPackage.EAGGREGATION_EXPR__OPER:
        return getOper();
      case AlertingPackage.EAGGREGATION_EXPR__MODIFIER:
        return getModifier();
      case AlertingPackage.EAGGREGATION_EXPR__LABELS:
        return getLabels();
      case AlertingPackage.EAGGREGATION_EXPR__EXPR:
        return getExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlertingPackage.EAGGREGATION_EXPR__OPER:
        setOper((String)newValue);
        return;
      case AlertingPackage.EAGGREGATION_EXPR__MODIFIER:
        setModifier((String)newValue);
        return;
      case AlertingPackage.EAGGREGATION_EXPR__LABELS:
        setLabels((ELabelList)newValue);
        return;
      case AlertingPackage.EAGGREGATION_EXPR__EXPR:
        setExpr((EVectorExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlertingPackage.EAGGREGATION_EXPR__OPER:
        setOper(OPER_EDEFAULT);
        return;
      case AlertingPackage.EAGGREGATION_EXPR__MODIFIER:
        setModifier(MODIFIER_EDEFAULT);
        return;
      case AlertingPackage.EAGGREGATION_EXPR__LABELS:
        setLabels((ELabelList)null);
        return;
      case AlertingPackage.EAGGREGATION_EXPR__EXPR:
        setExpr((EVectorExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlertingPackage.EAGGREGATION_EXPR__OPER:
        return OPER_EDEFAULT == null ? oper != null : !OPER_EDEFAULT.equals(oper);
      case AlertingPackage.EAGGREGATION_EXPR__MODIFIER:
        return MODIFIER_EDEFAULT == null ? modifier != null : !MODIFIER_EDEFAULT.equals(modifier);
      case AlertingPackage.EAGGREGATION_EXPR__LABELS:
        return labels != null;
      case AlertingPackage.EAGGREGATION_EXPR__EXPR:
        return expr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (oper: ");
    result.append(oper);
    result.append(", modifier: ");
    result.append(modifier);
    result.append(')');
    return result.toString();
  }

} //EAggregationExprImpl
