/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.alerting.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.sodalite.dsl.alerting.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.sodalite.dsl.alerting.AlertingPackage
 * @generated
 */
public class AlertingAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlertingPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlertingAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AlertingPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AlertingSwitch<Adapter> modelSwitch =
    new AlertingSwitch<Adapter>()
    {
      @Override
      public Adapter caseAlerting_Model(Alerting_Model object)
      {
        return createAlerting_ModelAdapter();
      }
      @Override
      public Adapter caseEGroups(EGroups object)
      {
        return createEGroupsAdapter();
      }
      @Override
      public Adapter caseEGroup(EGroup object)
      {
        return createEGroupAdapter();
      }
      @Override
      public Adapter caseERule(ERule object)
      {
        return createERuleAdapter();
      }
      @Override
      public Adapter caseELabel(ELabel object)
      {
        return createELabelAdapter();
      }
      @Override
      public Adapter caseEExpression(EExpression object)
      {
        return createEExpressionAdapter();
      }
      @Override
      public Adapter caseEBinaryStatement(EBinaryStatement object)
      {
        return createEBinaryStatementAdapter();
      }
      @Override
      public Adapter caseEStatement(EStatement object)
      {
        return createEStatementAdapter();
      }
      @Override
      public Adapter caseEVectorMatching(EVectorMatching object)
      {
        return createEVectorMatchingAdapter();
      }
      @Override
      public Adapter caseELabelList(ELabelList object)
      {
        return createELabelListAdapter();
      }
      @Override
      public Adapter caseESingleLabel(ESingleLabel object)
      {
        return createESingleLabelAdapter();
      }
      @Override
      public Adapter caseEAggregationExpr(EAggregationExpr object)
      {
        return createEAggregationExprAdapter();
      }
      @Override
      public Adapter caseEVectorExpr(EVectorExpr object)
      {
        return createEVectorExprAdapter();
      }
      @Override
      public Adapter caseEBinaryExpr(EBinaryExpr object)
      {
        return createEBinaryExprAdapter();
      }
      @Override
      public Adapter caseEFunctionExpr(EFunctionExpr object)
      {
        return createEFunctionExprAdapter();
      }
      @Override
      public Adapter caseEMetricExpr(EMetricExpr object)
      {
        return createEMetricExprAdapter();
      }
      @Override
      public Adapter caseEPeriod(EPeriod object)
      {
        return createEPeriodAdapter();
      }
      @Override
      public Adapter caseEPeriodSegment(EPeriodSegment object)
      {
        return createEPeriodSegmentAdapter();
      }
      @Override
      public Adapter caseETag(ETag object)
      {
        return createETagAdapter();
      }
      @Override
      public Adapter caseEOperAssociation(EOperAssociation object)
      {
        return createEOperAssociationAdapter();
      }
      @Override
      public Adapter caseEMetricType(EMetricType object)
      {
        return createEMetricTypeAdapter();
      }
      @Override
      public Adapter caseENUMBER(ENUMBER object)
      {
        return createENUMBERAdapter();
      }
      @Override
      public Adapter caseEBinaryOperator(EBinaryOperator object)
      {
        return createEBinaryOperatorAdapter();
      }
      @Override
      public Adapter caseEArithmeticOperator(EArithmeticOperator object)
      {
        return createEArithmeticOperatorAdapter();
      }
      @Override
      public Adapter caseEComparisonOperator(EComparisonOperator object)
      {
        return createEComparisonOperatorAdapter();
      }
      @Override
      public Adapter caseEBinaryLogicOperator(EBinaryLogicOperator object)
      {
        return createEBinaryLogicOperatorAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.Alerting_Model <em>Alerting Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.Alerting_Model
   * @generated
   */
  public Adapter createAlerting_ModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EGroups <em>EGroups</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EGroups
   * @generated
   */
  public Adapter createEGroupsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EGroup <em>EGroup</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EGroup
   * @generated
   */
  public Adapter createEGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.ERule <em>ERule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.ERule
   * @generated
   */
  public Adapter createERuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.ELabel <em>ELabel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.ELabel
   * @generated
   */
  public Adapter createELabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EExpression <em>EExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EExpression
   * @generated
   */
  public Adapter createEExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EBinaryStatement <em>EBinary Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EBinaryStatement
   * @generated
   */
  public Adapter createEBinaryStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EStatement <em>EStatement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EStatement
   * @generated
   */
  public Adapter createEStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EVectorMatching <em>EVector Matching</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EVectorMatching
   * @generated
   */
  public Adapter createEVectorMatchingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.ELabelList <em>ELabel List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.ELabelList
   * @generated
   */
  public Adapter createELabelListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.ESingleLabel <em>ESingle Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.ESingleLabel
   * @generated
   */
  public Adapter createESingleLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EAggregationExpr <em>EAggregation Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EAggregationExpr
   * @generated
   */
  public Adapter createEAggregationExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EVectorExpr <em>EVector Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EVectorExpr
   * @generated
   */
  public Adapter createEVectorExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EBinaryExpr <em>EBinary Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EBinaryExpr
   * @generated
   */
  public Adapter createEBinaryExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EFunctionExpr <em>EFunction Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EFunctionExpr
   * @generated
   */
  public Adapter createEFunctionExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EMetricExpr <em>EMetric Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EMetricExpr
   * @generated
   */
  public Adapter createEMetricExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EPeriod <em>EPeriod</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EPeriod
   * @generated
   */
  public Adapter createEPeriodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EPeriodSegment <em>EPeriod Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EPeriodSegment
   * @generated
   */
  public Adapter createEPeriodSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.ETag <em>ETag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.ETag
   * @generated
   */
  public Adapter createETagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EOperAssociation <em>EOper Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EOperAssociation
   * @generated
   */
  public Adapter createEOperAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EMetricType <em>EMetric Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EMetricType
   * @generated
   */
  public Adapter createEMetricTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.ENUMBER <em>ENUMBER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.ENUMBER
   * @generated
   */
  public Adapter createENUMBERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EBinaryOperator <em>EBinary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EBinaryOperator
   * @generated
   */
  public Adapter createEBinaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EArithmeticOperator <em>EArithmetic Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EArithmeticOperator
   * @generated
   */
  public Adapter createEArithmeticOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EComparisonOperator <em>EComparison Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EComparisonOperator
   * @generated
   */
  public Adapter createEComparisonOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.alerting.EBinaryLogicOperator <em>EBinary Logic Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.alerting.EBinaryLogicOperator
   * @generated
   */
  public Adapter createEBinaryLogicOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AlertingAdapterFactory
