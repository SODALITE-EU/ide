/*
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.sodalite.dsl.ide.contentassist.antlr.internal.InternalAlertingParser;
import org.sodalite.dsl.services.AlertingGrammarAccess;

public class AlertingParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AlertingGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AlertingGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStatementAccess().getAlternatives(), "rule__EStatement__Alternatives");
			builder.put(grammarAccess.getEVectorExprAccess().getAlternatives(), "rule__EVectorExpr__Alternatives");
			builder.put(grammarAccess.getEOperAssociationAccess().getTypeAlternatives_0(), "rule__EOperAssociation__TypeAlternatives_0");
			builder.put(grammarAccess.getEMetricTypeAccess().getTypeAlternatives_0(), "rule__EMetricType__TypeAlternatives_0");
			builder.put(grammarAccess.getEBinaryOperatorAccess().getAlternatives(), "rule__EBinaryOperator__Alternatives");
			builder.put(grammarAccess.getEArithmeticOperatorAccess().getTypeAlternatives_0(), "rule__EArithmeticOperator__TypeAlternatives_0");
			builder.put(grammarAccess.getEComparisonOperatorAccess().getTypeAlternatives_0(), "rule__EComparisonOperator__TypeAlternatives_0");
			builder.put(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAlternatives_0(), "rule__EBinaryLogicOperator__TypeAlternatives_0");
			builder.put(grammarAccess.getLEFT_SEPARATORAccess().getAlternatives(), "rule__LEFT_SEPARATOR__Alternatives");
			builder.put(grammarAccess.getRIGHT_SEPARATORAccess().getAlternatives(), "rule__RIGHT_SEPARATOR__Alternatives");
			builder.put(grammarAccess.getEGroupAccess().getGroup(), "rule__EGroup__Group__0");
			builder.put(grammarAccess.getERuleAccess().getGroup(), "rule__ERule__Group__0");
			builder.put(grammarAccess.getERuleAccess().getGroup_5(), "rule__ERule__Group_5__0");
			builder.put(grammarAccess.getERuleAccess().getGroup_6(), "rule__ERule__Group_6__0");
			builder.put(grammarAccess.getERuleAccess().getGroup_7(), "rule__ERule__Group_7__0");
			builder.put(grammarAccess.getELabelAccess().getGroup(), "rule__ELabel__Group__0");
			builder.put(grammarAccess.getEBinaryStatementAccess().getGroup(), "rule__EBinaryStatement__Group__0");
			builder.put(grammarAccess.getEVectorMatchingAccess().getGroup(), "rule__EVectorMatching__Group__0");
			builder.put(grammarAccess.getELabelListAccess().getGroup(), "rule__ELabelList__Group__0");
			builder.put(grammarAccess.getELabelListAccess().getGroup_2(), "rule__ELabelList__Group_2__0");
			builder.put(grammarAccess.getEAggregationExprAccess().getGroup(), "rule__EAggregationExpr__Group__0");
			builder.put(grammarAccess.getEAggregationExprAccess().getGroup_1(), "rule__EAggregationExpr__Group_1__0");
			builder.put(grammarAccess.getEBinaryExprAccess().getGroup(), "rule__EBinaryExpr__Group__0");
			builder.put(grammarAccess.getEFunctionExprAccess().getGroup(), "rule__EFunctionExpr__Group__0");
			builder.put(grammarAccess.getEMetricExprAccess().getGroup(), "rule__EMetricExpr__Group__0");
			builder.put(grammarAccess.getEMetricExprAccess().getGroup_3(), "rule__EMetricExpr__Group_3__0");
			builder.put(grammarAccess.getEMetricExprAccess().getGroup_5(), "rule__EMetricExpr__Group_5__0");
			builder.put(grammarAccess.getEPeriodAccess().getGroup(), "rule__EPeriod__Group__0");
			builder.put(grammarAccess.getEPeriodSegmentAccess().getGroup(), "rule__EPeriodSegment__Group__0");
			builder.put(grammarAccess.getETagAccess().getGroup(), "rule__ETag__Group__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup(), "rule__NUMBER__Group__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup_2(), "rule__NUMBER__Group_2__0");
			builder.put(grammarAccess.getAlerting_ModelAccess().getGroupsAssignment(), "rule__Alerting_Model__GroupsAssignment");
			builder.put(grammarAccess.getEGroupsAccess().getGroupsAssignment(), "rule__EGroups__GroupsAssignment");
			builder.put(grammarAccess.getEGroupAccess().getNameAssignment_1(), "rule__EGroup__NameAssignment_1");
			builder.put(grammarAccess.getEGroupAccess().getRulesAssignment_3(), "rule__EGroup__RulesAssignment_3");
			builder.put(grammarAccess.getERuleAccess().getAlertAssignment_1(), "rule__ERule__AlertAssignment_1");
			builder.put(grammarAccess.getERuleAccess().getExprAssignment_4(), "rule__ERule__ExprAssignment_4");
			builder.put(grammarAccess.getERuleAccess().getDurationAssignment_5_1(), "rule__ERule__DurationAssignment_5_1");
			builder.put(grammarAccess.getERuleAccess().getLabelsAssignment_6_2(), "rule__ERule__LabelsAssignment_6_2");
			builder.put(grammarAccess.getERuleAccess().getAnnotationsAssignment_7_2(), "rule__ERule__AnnotationsAssignment_7_2");
			builder.put(grammarAccess.getELabelAccess().getKeyAssignment_0(), "rule__ELabel__KeyAssignment_0");
			builder.put(grammarAccess.getELabelAccess().getValueAssignment_2(), "rule__ELabel__ValueAssignment_2");
			builder.put(grammarAccess.getEExpressionAccess().getExprAssignment(), "rule__EExpression__ExprAssignment");
			builder.put(grammarAccess.getEBinaryStatementAccess().getLexprAssignment_0(), "rule__EBinaryStatement__LexprAssignment_0");
			builder.put(grammarAccess.getEBinaryStatementAccess().getOperAssignment_1(), "rule__EBinaryStatement__OperAssignment_1");
			builder.put(grammarAccess.getEBinaryStatementAccess().getRexprAssignment_2(), "rule__EBinaryStatement__RexprAssignment_2");
			builder.put(grammarAccess.getEVectorMatchingAccess().getLexprAssignment_1(), "rule__EVectorMatching__LexprAssignment_1");
			builder.put(grammarAccess.getEVectorMatchingAccess().getOperAssignment_2(), "rule__EVectorMatching__OperAssignment_2");
			builder.put(grammarAccess.getEVectorMatchingAccess().getTypeAssignment_3(), "rule__EVectorMatching__TypeAssignment_3");
			builder.put(grammarAccess.getEVectorMatchingAccess().getLabelsAssignment_5(), "rule__EVectorMatching__LabelsAssignment_5");
			builder.put(grammarAccess.getEVectorMatchingAccess().getRexprAssignment_7(), "rule__EVectorMatching__RexprAssignment_7");
			builder.put(grammarAccess.getELabelListAccess().getListAssignment_1(), "rule__ELabelList__ListAssignment_1");
			builder.put(grammarAccess.getELabelListAccess().getListAssignment_2_1(), "rule__ELabelList__ListAssignment_2_1");
			builder.put(grammarAccess.getESingleLabelAccess().getLabelAssignment(), "rule__ESingleLabel__LabelAssignment");
			builder.put(grammarAccess.getEAggregationExprAccess().getOperAssignment_0(), "rule__EAggregationExpr__OperAssignment_0");
			builder.put(grammarAccess.getEAggregationExprAccess().getModifierAssignment_1_0(), "rule__EAggregationExpr__ModifierAssignment_1_0");
			builder.put(grammarAccess.getEAggregationExprAccess().getLabelsAssignment_1_2(), "rule__EAggregationExpr__LabelsAssignment_1_2");
			builder.put(grammarAccess.getEAggregationExprAccess().getExprAssignment_3(), "rule__EAggregationExpr__ExprAssignment_3");
			builder.put(grammarAccess.getEBinaryExprAccess().getLexprAssignment_1(), "rule__EBinaryExpr__LexprAssignment_1");
			builder.put(grammarAccess.getEBinaryExprAccess().getOperAssignment_2(), "rule__EBinaryExpr__OperAssignment_2");
			builder.put(grammarAccess.getEBinaryExprAccess().getRexprAssignment_3(), "rule__EBinaryExpr__RexprAssignment_3");
			builder.put(grammarAccess.getEFunctionExprAccess().getFunctionAssignment_0(), "rule__EFunctionExpr__FunctionAssignment_0");
			builder.put(grammarAccess.getEFunctionExprAccess().getExprAssignment_2(), "rule__EFunctionExpr__ExprAssignment_2");
			builder.put(grammarAccess.getEMetricExprAccess().getTypeAssignment_0(), "rule__EMetricExpr__TypeAssignment_0");
			builder.put(grammarAccess.getEMetricExprAccess().getTagsAssignment_2(), "rule__EMetricExpr__TagsAssignment_2");
			builder.put(grammarAccess.getEMetricExprAccess().getTagsAssignment_3_1(), "rule__EMetricExpr__TagsAssignment_3_1");
			builder.put(grammarAccess.getEMetricExprAccess().getPeriodAssignment_5_1(), "rule__EMetricExpr__PeriodAssignment_5_1");
			builder.put(grammarAccess.getEPeriodAccess().getSegmentsAssignment_0(), "rule__EPeriod__SegmentsAssignment_0");
			builder.put(grammarAccess.getEPeriodAccess().getSegmentsAssignment_1(), "rule__EPeriod__SegmentsAssignment_1");
			builder.put(grammarAccess.getEPeriodSegmentAccess().getValueAssignment_0(), "rule__EPeriodSegment__ValueAssignment_0");
			builder.put(grammarAccess.getEPeriodSegmentAccess().getUnitAssignment_1(), "rule__EPeriodSegment__UnitAssignment_1");
			builder.put(grammarAccess.getETagAccess().getKeyAssignment_0(), "rule__ETag__KeyAssignment_0");
			builder.put(grammarAccess.getETagAccess().getOperAssignment_1(), "rule__ETag__OperAssignment_1");
			builder.put(grammarAccess.getETagAccess().getValueAssignment_2(), "rule__ETag__ValueAssignment_2");
			builder.put(grammarAccess.getEOperAssociationAccess().getTypeAssignment(), "rule__EOperAssociation__TypeAssignment");
			builder.put(grammarAccess.getEMetricTypeAccess().getTypeAssignment(), "rule__EMetricType__TypeAssignment");
			builder.put(grammarAccess.getENUMBERAccess().getValueAssignment(), "rule__ENUMBER__ValueAssignment");
			builder.put(grammarAccess.getEArithmeticOperatorAccess().getTypeAssignment(), "rule__EArithmeticOperator__TypeAssignment");
			builder.put(grammarAccess.getEComparisonOperatorAccess().getTypeAssignment(), "rule__EComparisonOperator__TypeAssignment");
			builder.put(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAssignment(), "rule__EBinaryLogicOperator__TypeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AlertingGrammarAccess grammarAccess;

	@Override
	protected InternalAlertingParser createParser() {
		InternalAlertingParser result = new InternalAlertingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new AlertingTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AlertingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AlertingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
