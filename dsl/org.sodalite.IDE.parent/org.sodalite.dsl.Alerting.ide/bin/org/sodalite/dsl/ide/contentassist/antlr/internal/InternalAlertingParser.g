/*
 * generated by Xtext 2.25.0
 */
parser grammar InternalAlertingParser;

options {
	tokenVocab=InternalAlertingLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.sodalite.dsl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.sodalite.dsl.services.AlertingGrammarAccess;

}
@members {
	private AlertingGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("PercentSign", "'\%'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Tilde", "'~'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("EqualsSignTilde", "'=~'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("For", "'for:'");
		tokenNameToValue.put("Expr", "'expr:'");
		tokenNameToValue.put("Alert", "'alert:'");
		tokenNameToValue.put("Group", "'group:'");
		tokenNameToValue.put("Unless", "'unless'");
		tokenNameToValue.put("Labels", "'labels:'");
		tokenNameToValue.put("Annotations", "'annotations:'");
	}

	public void setGrammarAccess(AlertingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleAlerting_Model
entryRuleAlerting_Model
:
{ before(grammarAccess.getAlerting_ModelRule()); }
	 ruleAlerting_Model
{ after(grammarAccess.getAlerting_ModelRule()); } 
	 EOF 
;

// Rule Alerting_Model
ruleAlerting_Model 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlerting_ModelAccess().getGroupsAssignment()); }
		(rule__Alerting_Model__GroupsAssignment)*
		{ after(grammarAccess.getAlerting_ModelAccess().getGroupsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEGroups
entryRuleEGroups
:
{ before(grammarAccess.getEGroupsRule()); }
	 ruleEGroups
{ after(grammarAccess.getEGroupsRule()); } 
	 EOF 
;

// Rule EGroups
ruleEGroups 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEGroupsAccess().getGroupsAssignment()); }
		(rule__EGroups__GroupsAssignment)
		{ after(grammarAccess.getEGroupsAccess().getGroupsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEGroup
entryRuleEGroup
:
{ before(grammarAccess.getEGroupRule()); }
	 ruleEGroup
{ after(grammarAccess.getEGroupRule()); } 
	 EOF 
;

// Rule EGroup
ruleEGroup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEGroupAccess().getGroup()); }
		(rule__EGroup__Group__0)
		{ after(grammarAccess.getEGroupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleERule
entryRuleERule
:
{ before(grammarAccess.getERuleRule()); }
	 ruleERule
{ after(grammarAccess.getERuleRule()); } 
	 EOF 
;

// Rule ERule
ruleERule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getERuleAccess().getGroup()); }
		(rule__ERule__Group__0)
		{ after(grammarAccess.getERuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleELabel
entryRuleELabel
:
{ before(grammarAccess.getELabelRule()); }
	 ruleELabel
{ after(grammarAccess.getELabelRule()); } 
	 EOF 
;

// Rule ELabel
ruleELabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getELabelAccess().getGroup()); }
		(rule__ELabel__Group__0)
		{ after(grammarAccess.getELabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEExpression
entryRuleEExpression
:
{ before(grammarAccess.getEExpressionRule()); }
	 ruleEExpression
{ after(grammarAccess.getEExpressionRule()); } 
	 EOF 
;

// Rule EExpression
ruleEExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEExpressionAccess().getExprAssignment()); }
		(rule__EExpression__ExprAssignment)
		{ after(grammarAccess.getEExpressionAccess().getExprAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBinaryStatement
entryRuleEBinaryStatement
:
{ before(grammarAccess.getEBinaryStatementRule()); }
	 ruleEBinaryStatement
{ after(grammarAccess.getEBinaryStatementRule()); } 
	 EOF 
;

// Rule EBinaryStatement
ruleEBinaryStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBinaryStatementAccess().getGroup()); }
		(rule__EBinaryStatement__Group__0)
		{ after(grammarAccess.getEBinaryStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEStatement
entryRuleEStatement
:
{ before(grammarAccess.getEStatementRule()); }
	 ruleEStatement
{ after(grammarAccess.getEStatementRule()); } 
	 EOF 
;

// Rule EStatement
ruleEStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStatementAccess().getAlternatives()); }
		(rule__EStatement__Alternatives)
		{ after(grammarAccess.getEStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEVectorMatching
entryRuleEVectorMatching
:
{ before(grammarAccess.getEVectorMatchingRule()); }
	 ruleEVectorMatching
{ after(grammarAccess.getEVectorMatchingRule()); } 
	 EOF 
;

// Rule EVectorMatching
ruleEVectorMatching 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEVectorMatchingAccess().getGroup()); }
		(rule__EVectorMatching__Group__0)
		{ after(grammarAccess.getEVectorMatchingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleELabelList
entryRuleELabelList
:
{ before(grammarAccess.getELabelListRule()); }
	 ruleELabelList
{ after(grammarAccess.getELabelListRule()); } 
	 EOF 
;

// Rule ELabelList
ruleELabelList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getELabelListAccess().getGroup()); }
		(rule__ELabelList__Group__0)
		{ after(grammarAccess.getELabelListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleESingleLabel
entryRuleESingleLabel
:
{ before(grammarAccess.getESingleLabelRule()); }
	 ruleESingleLabel
{ after(grammarAccess.getESingleLabelRule()); } 
	 EOF 
;

// Rule ESingleLabel
ruleESingleLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getESingleLabelAccess().getLabelAssignment()); }
		(rule__ESingleLabel__LabelAssignment)
		{ after(grammarAccess.getESingleLabelAccess().getLabelAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEAggregationExpr
entryRuleEAggregationExpr
:
{ before(grammarAccess.getEAggregationExprRule()); }
	 ruleEAggregationExpr
{ after(grammarAccess.getEAggregationExprRule()); } 
	 EOF 
;

// Rule EAggregationExpr
ruleEAggregationExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEAggregationExprAccess().getGroup()); }
		(rule__EAggregationExpr__Group__0)
		{ after(grammarAccess.getEAggregationExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEVectorExpr
entryRuleEVectorExpr
:
{ before(grammarAccess.getEVectorExprRule()); }
	 ruleEVectorExpr
{ after(grammarAccess.getEVectorExprRule()); } 
	 EOF 
;

// Rule EVectorExpr
ruleEVectorExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEVectorExprAccess().getAlternatives()); }
		(rule__EVectorExpr__Alternatives)
		{ after(grammarAccess.getEVectorExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBinaryExpr
entryRuleEBinaryExpr
:
{ before(grammarAccess.getEBinaryExprRule()); }
	 ruleEBinaryExpr
{ after(grammarAccess.getEBinaryExprRule()); } 
	 EOF 
;

// Rule EBinaryExpr
ruleEBinaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBinaryExprAccess().getGroup()); }
		(rule__EBinaryExpr__Group__0)
		{ after(grammarAccess.getEBinaryExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFunctionExpr
entryRuleEFunctionExpr
:
{ before(grammarAccess.getEFunctionExprRule()); }
	 ruleEFunctionExpr
{ after(grammarAccess.getEFunctionExprRule()); } 
	 EOF 
;

// Rule EFunctionExpr
ruleEFunctionExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFunctionExprAccess().getGroup()); }
		(rule__EFunctionExpr__Group__0)
		{ after(grammarAccess.getEFunctionExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEMetricExpr
entryRuleEMetricExpr
:
{ before(grammarAccess.getEMetricExprRule()); }
	 ruleEMetricExpr
{ after(grammarAccess.getEMetricExprRule()); } 
	 EOF 
;

// Rule EMetricExpr
ruleEMetricExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEMetricExprAccess().getGroup()); }
		(rule__EMetricExpr__Group__0)
		{ after(grammarAccess.getEMetricExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEPeriod
entryRuleEPeriod
:
{ before(grammarAccess.getEPeriodRule()); }
	 ruleEPeriod
{ after(grammarAccess.getEPeriodRule()); } 
	 EOF 
;

// Rule EPeriod
ruleEPeriod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEPeriodAccess().getGroup()); }
		(rule__EPeriod__Group__0)
		{ after(grammarAccess.getEPeriodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEPeriodSegment
entryRuleEPeriodSegment
:
{ before(grammarAccess.getEPeriodSegmentRule()); }
	 ruleEPeriodSegment
{ after(grammarAccess.getEPeriodSegmentRule()); } 
	 EOF 
;

// Rule EPeriodSegment
ruleEPeriodSegment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEPeriodSegmentAccess().getGroup()); }
		(rule__EPeriodSegment__Group__0)
		{ after(grammarAccess.getEPeriodSegmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleETag
entryRuleETag
:
{ before(grammarAccess.getETagRule()); }
	 ruleETag
{ after(grammarAccess.getETagRule()); } 
	 EOF 
;

// Rule ETag
ruleETag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getETagAccess().getGroup()); }
		(rule__ETag__Group__0)
		{ after(grammarAccess.getETagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEOperAssociation
entryRuleEOperAssociation
:
{ before(grammarAccess.getEOperAssociationRule()); }
	 ruleEOperAssociation
{ after(grammarAccess.getEOperAssociationRule()); } 
	 EOF 
;

// Rule EOperAssociation
ruleEOperAssociation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEOperAssociationAccess().getTypeAssignment()); }
		(rule__EOperAssociation__TypeAssignment)
		{ after(grammarAccess.getEOperAssociationAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEMetricType
entryRuleEMetricType
:
{ before(grammarAccess.getEMetricTypeRule()); }
	 ruleEMetricType
{ after(grammarAccess.getEMetricTypeRule()); } 
	 EOF 
;

// Rule EMetricType
ruleEMetricType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEMetricTypeAccess().getTypeAssignment()); }
		(rule__EMetricType__TypeAssignment)
		{ after(grammarAccess.getEMetricTypeAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleENUMBER
entryRuleENUMBER
:
{ before(grammarAccess.getENUMBERRule()); }
	 ruleENUMBER
{ after(grammarAccess.getENUMBERRule()); } 
	 EOF 
;

// Rule ENUMBER
ruleENUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getENUMBERAccess().getValueAssignment()); }
		(rule__ENUMBER__ValueAssignment)
		{ after(grammarAccess.getENUMBERAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBinaryOperator
entryRuleEBinaryOperator
:
{ before(grammarAccess.getEBinaryOperatorRule()); }
	 ruleEBinaryOperator
{ after(grammarAccess.getEBinaryOperatorRule()); } 
	 EOF 
;

// Rule EBinaryOperator
ruleEBinaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBinaryOperatorAccess().getAlternatives()); }
		(rule__EBinaryOperator__Alternatives)
		{ after(grammarAccess.getEBinaryOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEArithmeticOperator
entryRuleEArithmeticOperator
:
{ before(grammarAccess.getEArithmeticOperatorRule()); }
	 ruleEArithmeticOperator
{ after(grammarAccess.getEArithmeticOperatorRule()); } 
	 EOF 
;

// Rule EArithmeticOperator
ruleEArithmeticOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypeAssignment()); }
		(rule__EArithmeticOperator__TypeAssignment)
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEComparisonOperator
entryRuleEComparisonOperator
:
{ before(grammarAccess.getEComparisonOperatorRule()); }
	 ruleEComparisonOperator
{ after(grammarAccess.getEComparisonOperatorRule()); } 
	 EOF 
;

// Rule EComparisonOperator
ruleEComparisonOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeAssignment()); }
		(rule__EComparisonOperator__TypeAssignment)
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBinaryLogicOperator
entryRuleEBinaryLogicOperator
:
{ before(grammarAccess.getEBinaryLogicOperatorRule()); }
	 ruleEBinaryLogicOperator
{ after(grammarAccess.getEBinaryLogicOperatorRule()); } 
	 EOF 
;

// Rule EBinaryLogicOperator
ruleEBinaryLogicOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAssignment()); }
		(rule__EBinaryLogicOperator__TypeAssignment)
		{ after(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERAccess().getGroup()); }
		(rule__NUMBER__Group__0)
		{ after(grammarAccess.getNUMBERAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStatementAccess().getEVectorMatchingParserRuleCall_0()); }
		(ruleEVectorMatching)
		{ after(grammarAccess.getEStatementAccess().getEVectorMatchingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStatementAccess().getEVectorExprParserRuleCall_1()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEStatementAccess().getEVectorExprParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVectorExprAccess().getEBinaryExprParserRuleCall_0()); }
		ruleEBinaryExpr
		{ after(grammarAccess.getEVectorExprAccess().getEBinaryExprParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEVectorExprAccess().getEFunctionExprParserRuleCall_1()); }
		ruleEFunctionExpr
		{ after(grammarAccess.getEVectorExprAccess().getEFunctionExprParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEVectorExprAccess().getEAggregationExprParserRuleCall_2()); }
		ruleEAggregationExpr
		{ after(grammarAccess.getEVectorExprAccess().getEAggregationExprParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getEVectorExprAccess().getEMetricExprParserRuleCall_3()); }
		ruleEMetricExpr
		{ after(grammarAccess.getEVectorExprAccess().getEMetricExprParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getEVectorExprAccess().getENUMBERParserRuleCall_4()); }
		ruleENUMBER
		{ after(grammarAccess.getEVectorExprAccess().getENUMBERParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EOperAssociation__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEOperAssociationAccess().getTypeEqualsSignKeyword_0_0()); }
		EqualsSign
		{ after(grammarAccess.getEOperAssociationAccess().getTypeEqualsSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEOperAssociationAccess().getTypeEqualsSignTildeKeyword_0_1()); }
		EqualsSignTilde
		{ after(grammarAccess.getEOperAssociationAccess().getTypeEqualsSignTildeKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEOperAssociationAccess().getTypeExclamationMarkEqualsSignKeyword_0_2()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getEOperAssociationAccess().getTypeExclamationMarkEqualsSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEOperAssociationAccess().getTypeTildeKeyword_0_3()); }
		Tilde
		{ after(grammarAccess.getEOperAssociationAccess().getTypeTildeKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricType__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEMetricTypeAccess().getTypeESLURMEXPORTERTerminalRuleCall_0_0()); }
		RULE_ESLURMEXPORTER
		{ after(grammarAccess.getEMetricTypeAccess().getTypeESLURMEXPORTERTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEMetricTypeAccess().getTypeEPBSEXPORTERTerminalRuleCall_0_1()); }
		RULE_EPBSEXPORTER
		{ after(grammarAccess.getEMetricTypeAccess().getTypeEPBSEXPORTERTerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEMetricTypeAccess().getTypeENODEEXPORTERTerminalRuleCall_0_2()); }
		RULE_ENODEEXPORTER
		{ after(grammarAccess.getEMetricTypeAccess().getTypeENODEEXPORTERTerminalRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryOperatorAccess().getEArithmeticOperatorParserRuleCall_0()); }
		ruleEArithmeticOperator
		{ after(grammarAccess.getEBinaryOperatorAccess().getEArithmeticOperatorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBinaryOperatorAccess().getEComparisonOperatorParserRuleCall_1()); }
		ruleEComparisonOperator
		{ after(grammarAccess.getEBinaryOperatorAccess().getEComparisonOperatorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEBinaryOperatorAccess().getEBinaryLogicOperatorParserRuleCall_2()); }
		ruleEBinaryLogicOperator
		{ after(grammarAccess.getEBinaryOperatorAccess().getEBinaryLogicOperatorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EArithmeticOperator__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypePlusSignKeyword_0_0()); }
		PlusSign
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypePlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypeHyphenMinusKeyword_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypeHyphenMinusKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypeAsteriskKeyword_0_2()); }
		Asterisk
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypeAsteriskKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypeSolidusKeyword_0_3()); }
		Solidus
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypeSolidusKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypePercentSignKeyword_0_4()); }
		PercentSign
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypePercentSignKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypeCircumflexAccentKeyword_0_5()); }
		CircumflexAccent
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypeCircumflexAccentKeyword_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EComparisonOperator__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeLessThanSignKeyword_0_0()); }
		LessThanSign
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeLessThanSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeGreaterThanSignKeyword_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeGreaterThanSignKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeLessThanSignEqualsSignKeyword_0_2()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeLessThanSignEqualsSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeGreaterThanSignEqualsSignKeyword_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeGreaterThanSignEqualsSignKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeEqualsSignEqualsSignKeyword_0_4()); }
		EqualsSignEqualsSign
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeEqualsSignEqualsSignKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryLogicOperator__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAndKeyword_0_0()); }
		And
		{ after(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAndKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBinaryLogicOperatorAccess().getTypeOrKeyword_0_1()); }
		Or
		{ after(grammarAccess.getEBinaryLogicOperatorAccess().getTypeOrKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEBinaryLogicOperatorAccess().getTypeUnlessKeyword_0_2()); }
		Unless
		{ after(grammarAccess.getEBinaryLogicOperatorAccess().getTypeUnlessKeyword_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EGroup__Group__0__Impl
	rule__EGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEGroupAccess().getGroupKeyword_0()); }
	Group
	{ after(grammarAccess.getEGroupAccess().getGroupKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EGroup__Group__1__Impl
	rule__EGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEGroupAccess().getNameAssignment_1()); }
	(rule__EGroup__NameAssignment_1)
	{ after(grammarAccess.getEGroupAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EGroup__Group__2__Impl
	rule__EGroup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEGroupAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getEGroupAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EGroup__Group__3__Impl
	rule__EGroup__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEGroupAccess().getRulesAssignment_3()); }
	(rule__EGroup__RulesAssignment_3)*
	{ after(grammarAccess.getEGroupAccess().getRulesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EGroup__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEGroupAccess().getENDTerminalRuleCall_4()); }
	RULE_END
	{ after(grammarAccess.getEGroupAccess().getENDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ERule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__0__Impl
	rule__ERule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getAlertKeyword_0()); }
	Alert
	{ after(grammarAccess.getERuleAccess().getAlertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__1__Impl
	rule__ERule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getAlertAssignment_1()); }
	(rule__ERule__AlertAssignment_1)
	{ after(grammarAccess.getERuleAccess().getAlertAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__2__Impl
	rule__ERule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getERuleAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__3__Impl
	rule__ERule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getExprKeyword_3()); }
	Expr
	{ after(grammarAccess.getERuleAccess().getExprKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__4__Impl
	rule__ERule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getExprAssignment_4()); }
	(rule__ERule__ExprAssignment_4)
	{ after(grammarAccess.getERuleAccess().getExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__5__Impl
	rule__ERule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getGroup_5()); }
	(rule__ERule__Group_5__0)?
	{ after(grammarAccess.getERuleAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__6__Impl
	rule__ERule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getGroup_6()); }
	(rule__ERule__Group_6__0)?
	{ after(grammarAccess.getERuleAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__7__Impl
	rule__ERule__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getGroup_7()); }
	(rule__ERule__Group_7__0)?
	{ after(grammarAccess.getERuleAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getENDTerminalRuleCall_8()); }
	RULE_END
	{ after(grammarAccess.getERuleAccess().getENDTerminalRuleCall_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ERule__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_5__0__Impl
	rule__ERule__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getForKeyword_5_0()); }
	For
	{ after(grammarAccess.getERuleAccess().getForKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getDurationAssignment_5_1()); }
	(rule__ERule__DurationAssignment_5_1)
	{ after(grammarAccess.getERuleAccess().getDurationAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ERule__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_6__0__Impl
	rule__ERule__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getLabelsKeyword_6_0()); }
	Labels
	{ after(grammarAccess.getERuleAccess().getLabelsKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_6__1__Impl
	rule__ERule__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getBEGINTerminalRuleCall_6_1()); }
	RULE_BEGIN
	{ after(grammarAccess.getERuleAccess().getBEGINTerminalRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_6__2__Impl
	rule__ERule__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getLabelsAssignment_6_2()); }
	(rule__ERule__LabelsAssignment_6_2)*
	{ after(grammarAccess.getERuleAccess().getLabelsAssignment_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getENDTerminalRuleCall_6_3()); }
	RULE_END
	{ after(grammarAccess.getERuleAccess().getENDTerminalRuleCall_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ERule__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_7__0__Impl
	rule__ERule__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getAnnotationsKeyword_7_0()); }
	Annotations
	{ after(grammarAccess.getERuleAccess().getAnnotationsKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_7__1__Impl
	rule__ERule__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getBEGINTerminalRuleCall_7_1()); }
	RULE_BEGIN
	{ after(grammarAccess.getERuleAccess().getBEGINTerminalRuleCall_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_7__2__Impl
	rule__ERule__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getAnnotationsAssignment_7_2()); }
	(rule__ERule__AnnotationsAssignment_7_2)*
	{ after(grammarAccess.getERuleAccess().getAnnotationsAssignment_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ERule__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getERuleAccess().getENDTerminalRuleCall_7_3()); }
	RULE_END
	{ after(grammarAccess.getERuleAccess().getENDTerminalRuleCall_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ELabel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabel__Group__0__Impl
	rule__ELabel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelAccess().getKeyAssignment_0()); }
	(rule__ELabel__KeyAssignment_0)
	{ after(grammarAccess.getELabelAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabel__Group__1__Impl
	rule__ELabel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getELabelAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelAccess().getValueAssignment_2()); }
	(rule__ELabel__ValueAssignment_2)
	{ after(grammarAccess.getELabelAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EBinaryStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryStatement__Group__0__Impl
	rule__EBinaryStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryStatementAccess().getLexprAssignment_0()); }
	(rule__EBinaryStatement__LexprAssignment_0)
	{ after(grammarAccess.getEBinaryStatementAccess().getLexprAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryStatement__Group__1__Impl
	rule__EBinaryStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryStatementAccess().getOperAssignment_1()); }
	(rule__EBinaryStatement__OperAssignment_1)
	{ after(grammarAccess.getEBinaryStatementAccess().getOperAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryStatementAccess().getRexprAssignment_2()); }
	(rule__EBinaryStatement__RexprAssignment_2)
	{ after(grammarAccess.getEBinaryStatementAccess().getRexprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EVectorMatching__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__0__Impl
	rule__EVectorMatching__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getEVectorMatchingAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__1__Impl
	rule__EVectorMatching__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getLexprAssignment_1()); }
	(rule__EVectorMatching__LexprAssignment_1)
	{ after(grammarAccess.getEVectorMatchingAccess().getLexprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__2__Impl
	rule__EVectorMatching__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getOperAssignment_2()); }
	(rule__EVectorMatching__OperAssignment_2)
	{ after(grammarAccess.getEVectorMatchingAccess().getOperAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__3__Impl
	rule__EVectorMatching__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getTypeAssignment_3()); }
	(rule__EVectorMatching__TypeAssignment_3)
	{ after(grammarAccess.getEVectorMatchingAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__4__Impl
	rule__EVectorMatching__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getLeftParenthesisKeyword_4()); }
	LeftParenthesis
	{ after(grammarAccess.getEVectorMatchingAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__5__Impl
	rule__EVectorMatching__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getLabelsAssignment_5()); }
	(rule__EVectorMatching__LabelsAssignment_5)
	{ after(grammarAccess.getEVectorMatchingAccess().getLabelsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__6__Impl
	rule__EVectorMatching__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getRightParenthesisKeyword_6()); }
	RightParenthesis
	{ after(grammarAccess.getEVectorMatchingAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__7__Impl
	rule__EVectorMatching__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getRexprAssignment_7()); }
	(rule__EVectorMatching__RexprAssignment_7)
	{ after(grammarAccess.getEVectorMatchingAccess().getRexprAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EVectorMatching__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEVectorMatchingAccess().getRightParenthesisKeyword_8()); }
	RightParenthesis
	{ after(grammarAccess.getEVectorMatchingAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ELabelList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabelList__Group__0__Impl
	rule__ELabelList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelListAccess().getELabelListAction_0()); }
	()
	{ after(grammarAccess.getELabelListAccess().getELabelListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabelList__Group__1__Impl
	rule__ELabelList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelListAccess().getListAssignment_1()); }
	(rule__ELabelList__ListAssignment_1)?
	{ after(grammarAccess.getELabelListAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabelList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelListAccess().getGroup_2()); }
	(rule__ELabelList__Group_2__0)*
	{ after(grammarAccess.getELabelListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ELabelList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabelList__Group_2__0__Impl
	rule__ELabelList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelListAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getELabelListAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ELabelList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getELabelListAccess().getListAssignment_2_1()); }
	(rule__ELabelList__ListAssignment_2_1)
	{ after(grammarAccess.getELabelListAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EAggregationExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group__0__Impl
	rule__EAggregationExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getOperAssignment_0()); }
	(rule__EAggregationExpr__OperAssignment_0)
	{ after(grammarAccess.getEAggregationExprAccess().getOperAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group__1__Impl
	rule__EAggregationExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getGroup_1()); }
	(rule__EAggregationExpr__Group_1__0)?
	{ after(grammarAccess.getEAggregationExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group__2__Impl
	rule__EAggregationExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getEAggregationExprAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group__3__Impl
	rule__EAggregationExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getExprAssignment_3()); }
	(rule__EAggregationExpr__ExprAssignment_3)
	{ after(grammarAccess.getEAggregationExprAccess().getExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getEAggregationExprAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EAggregationExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group_1__0__Impl
	rule__EAggregationExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getModifierAssignment_1_0()); }
	(rule__EAggregationExpr__ModifierAssignment_1_0)
	{ after(grammarAccess.getEAggregationExprAccess().getModifierAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group_1__1__Impl
	rule__EAggregationExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getLeftParenthesisKeyword_1_1()); }
	LeftParenthesis
	{ after(grammarAccess.getEAggregationExprAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group_1__2__Impl
	rule__EAggregationExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getLabelsAssignment_1_2()); }
	(rule__EAggregationExpr__LabelsAssignment_1_2)
	{ after(grammarAccess.getEAggregationExprAccess().getLabelsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAggregationExpr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAggregationExprAccess().getRightParenthesisKeyword_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getEAggregationExprAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EBinaryExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryExpr__Group__0__Impl
	rule__EBinaryExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryExprAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getEBinaryExprAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryExpr__Group__1__Impl
	rule__EBinaryExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryExprAccess().getLexprAssignment_1()); }
	(rule__EBinaryExpr__LexprAssignment_1)
	{ after(grammarAccess.getEBinaryExprAccess().getLexprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryExpr__Group__2__Impl
	rule__EBinaryExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryExprAccess().getOperAssignment_2()); }
	(rule__EBinaryExpr__OperAssignment_2)
	{ after(grammarAccess.getEBinaryExprAccess().getOperAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryExpr__Group__3__Impl
	rule__EBinaryExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryExprAccess().getRexprAssignment_3()); }
	(rule__EBinaryExpr__RexprAssignment_3)
	{ after(grammarAccess.getEBinaryExprAccess().getRexprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EBinaryExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEBinaryExprAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getEBinaryExprAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFunctionExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFunctionExpr__Group__0__Impl
	rule__EFunctionExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFunctionExprAccess().getFunctionAssignment_0()); }
	(rule__EFunctionExpr__FunctionAssignment_0)
	{ after(grammarAccess.getEFunctionExprAccess().getFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFunctionExpr__Group__1__Impl
	rule__EFunctionExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFunctionExprAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getEFunctionExprAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFunctionExpr__Group__2__Impl
	rule__EFunctionExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFunctionExprAccess().getExprAssignment_2()); }
	(rule__EFunctionExpr__ExprAssignment_2)?
	{ after(grammarAccess.getEFunctionExprAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFunctionExpr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFunctionExprAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getEFunctionExprAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EMetricExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group__0__Impl
	rule__EMetricExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getTypeAssignment_0()); }
	(rule__EMetricExpr__TypeAssignment_0)
	{ after(grammarAccess.getEMetricExprAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group__1__Impl
	rule__EMetricExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getEMetricExprAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group__2__Impl
	rule__EMetricExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getTagsAssignment_2()); }
	(rule__EMetricExpr__TagsAssignment_2)?
	{ after(grammarAccess.getEMetricExprAccess().getTagsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group__3__Impl
	rule__EMetricExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getGroup_3()); }
	(rule__EMetricExpr__Group_3__0)*
	{ after(grammarAccess.getEMetricExprAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group__4__Impl
	rule__EMetricExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getRightCurlyBracketKeyword_4()); }
	RightCurlyBracket
	{ after(grammarAccess.getEMetricExprAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getGroup_5()); }
	(rule__EMetricExpr__Group_5__0)?
	{ after(grammarAccess.getEMetricExprAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EMetricExpr__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group_3__0__Impl
	rule__EMetricExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getEMetricExprAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getTagsAssignment_3_1()); }
	(rule__EMetricExpr__TagsAssignment_3_1)
	{ after(grammarAccess.getEMetricExprAccess().getTagsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EMetricExpr__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group_5__0__Impl
	rule__EMetricExpr__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getLeftSquareBracketKeyword_5_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getEMetricExprAccess().getLeftSquareBracketKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group_5__1__Impl
	rule__EMetricExpr__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getPeriodAssignment_5_1()); }
	(rule__EMetricExpr__PeriodAssignment_5_1)
	{ after(grammarAccess.getEMetricExprAccess().getPeriodAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EMetricExpr__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEMetricExprAccess().getRightSquareBracketKeyword_5_2()); }
	RightSquareBracket
	{ after(grammarAccess.getEMetricExprAccess().getRightSquareBracketKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EPeriod__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EPeriod__Group__0__Impl
	rule__EPeriod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriod__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEPeriodAccess().getSegmentsAssignment_0()); }
	(rule__EPeriod__SegmentsAssignment_0)
	{ after(grammarAccess.getEPeriodAccess().getSegmentsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriod__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EPeriod__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriod__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEPeriodAccess().getSegmentsAssignment_1()); }
	(rule__EPeriod__SegmentsAssignment_1)*
	{ after(grammarAccess.getEPeriodAccess().getSegmentsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EPeriodSegment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EPeriodSegment__Group__0__Impl
	rule__EPeriodSegment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriodSegment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEPeriodSegmentAccess().getValueAssignment_0()); }
	(rule__EPeriodSegment__ValueAssignment_0)
	{ after(grammarAccess.getEPeriodSegmentAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriodSegment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EPeriodSegment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriodSegment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEPeriodSegmentAccess().getUnitAssignment_1()); }
	(rule__EPeriodSegment__UnitAssignment_1)
	{ after(grammarAccess.getEPeriodSegmentAccess().getUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ETag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ETag__Group__0__Impl
	rule__ETag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getETagAccess().getKeyAssignment_0()); }
	(rule__ETag__KeyAssignment_0)
	{ after(grammarAccess.getETagAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ETag__Group__1__Impl
	rule__ETag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getETagAccess().getOperAssignment_1()); }
	(rule__ETag__OperAssignment_1)
	{ after(grammarAccess.getETagAccess().getOperAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ETag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getETagAccess().getValueAssignment_2()); }
	(rule__ETag__ValueAssignment_2)
	{ after(grammarAccess.getETagAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__0__Impl
	rule__NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0()); }
	(HyphenMinus)?
	{ after(grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__1__Impl
	rule__NUMBER__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getGroup_2()); }
	(rule__NUMBER__Group_2__0)?
	{ after(grammarAccess.getNUMBERAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group_2__0__Impl
	rule__NUMBER__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getFullStopKeyword_2_0()); }
	FullStop
	{ after(grammarAccess.getNUMBERAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Alerting_Model__GroupsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlerting_ModelAccess().getGroupsEGroupsParserRuleCall_0()); }
		ruleEGroups
		{ after(grammarAccess.getAlerting_ModelAccess().getGroupsEGroupsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroups__GroupsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEGroupsAccess().getGroupsEGroupParserRuleCall_0()); }
		ruleEGroup
		{ after(grammarAccess.getEGroupsAccess().getGroupsEGroupParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEGroupAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEGroupAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EGroup__RulesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEGroupAccess().getRulesERuleParserRuleCall_3_0()); }
		ruleERule
		{ after(grammarAccess.getEGroupAccess().getRulesERuleParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__AlertAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getERuleAccess().getAlertIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getERuleAccess().getAlertIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__ExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getERuleAccess().getExprEExpressionParserRuleCall_4_0()); }
		ruleEExpression
		{ after(grammarAccess.getERuleAccess().getExprEExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__DurationAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getERuleAccess().getDurationSTRINGTerminalRuleCall_5_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getERuleAccess().getDurationSTRINGTerminalRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__LabelsAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getERuleAccess().getLabelsELabelParserRuleCall_6_2_0()); }
		ruleELabel
		{ after(grammarAccess.getERuleAccess().getLabelsELabelParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ERule__AnnotationsAssignment_7_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getERuleAccess().getAnnotationsELabelParserRuleCall_7_2_0()); }
		ruleELabel
		{ after(grammarAccess.getERuleAccess().getAnnotationsELabelParserRuleCall_7_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getELabelAccess().getKeyIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getELabelAccess().getKeyIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabel__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getELabelAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getELabelAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EExpression__ExprAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEExpressionAccess().getExprEBinaryStatementParserRuleCall_0()); }
		ruleEBinaryStatement
		{ after(grammarAccess.getEExpressionAccess().getExprEBinaryStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__LexprAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryStatementAccess().getLexprEStatementParserRuleCall_0_0()); }
		ruleEStatement
		{ after(grammarAccess.getEBinaryStatementAccess().getLexprEStatementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__OperAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryStatementAccess().getOperEComparisonOperatorParserRuleCall_1_0()); }
		ruleEComparisonOperator
		{ after(grammarAccess.getEBinaryStatementAccess().getOperEComparisonOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryStatement__RexprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryStatementAccess().getRexprENUMBERParserRuleCall_2_0()); }
		ruleENUMBER
		{ after(grammarAccess.getEBinaryStatementAccess().getRexprENUMBERParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__LexprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVectorMatchingAccess().getLexprEVectorExprParserRuleCall_1_0()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEVectorMatchingAccess().getLexprEVectorExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__OperAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVectorMatchingAccess().getOperEBinaryOperatorParserRuleCall_2_0()); }
		ruleEBinaryOperator
		{ after(grammarAccess.getEVectorMatchingAccess().getOperEBinaryOperatorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVectorMatchingAccess().getTypeEVECTORMATCHINGTYPETerminalRuleCall_3_0()); }
		RULE_EVECTORMATCHINGTYPE
		{ after(grammarAccess.getEVectorMatchingAccess().getTypeEVECTORMATCHINGTYPETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__LabelsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVectorMatchingAccess().getLabelsELabelListParserRuleCall_5_0()); }
		ruleELabelList
		{ after(grammarAccess.getEVectorMatchingAccess().getLabelsELabelListParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVectorMatching__RexprAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVectorMatchingAccess().getRexprEVectorExprParserRuleCall_7_0()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEVectorMatchingAccess().getRexprEVectorExprParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getELabelListAccess().getListESingleLabelParserRuleCall_1_0()); }
		ruleESingleLabel
		{ after(grammarAccess.getELabelListAccess().getListESingleLabelParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ELabelList__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getELabelListAccess().getListESingleLabelParserRuleCall_2_1_0()); }
		ruleESingleLabel
		{ after(grammarAccess.getELabelListAccess().getListESingleLabelParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ESingleLabel__LabelAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getESingleLabelAccess().getLabelIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getESingleLabelAccess().getLabelIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__OperAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEAggregationExprAccess().getOperEAGGREGATIONOPERTerminalRuleCall_0_0()); }
		RULE_EAGGREGATIONOPER
		{ after(grammarAccess.getEAggregationExprAccess().getOperEAGGREGATIONOPERTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__ModifierAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEAggregationExprAccess().getModifierEAGGREGATIONOPERMODIFIERTerminalRuleCall_1_0_0()); }
		RULE_EAGGREGATIONOPERMODIFIER
		{ after(grammarAccess.getEAggregationExprAccess().getModifierEAGGREGATIONOPERMODIFIERTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__LabelsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEAggregationExprAccess().getLabelsELabelListParserRuleCall_1_2_0()); }
		ruleELabelList
		{ after(grammarAccess.getEAggregationExprAccess().getLabelsELabelListParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAggregationExpr__ExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEAggregationExprAccess().getExprEVectorExprParserRuleCall_3_0()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEAggregationExprAccess().getExprEVectorExprParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__LexprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryExprAccess().getLexprEVectorExprParserRuleCall_1_0()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEBinaryExprAccess().getLexprEVectorExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__OperAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryExprAccess().getOperEBinaryOperatorParserRuleCall_2_0()); }
		ruleEBinaryOperator
		{ after(grammarAccess.getEBinaryExprAccess().getOperEBinaryOperatorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryExpr__RexprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryExprAccess().getRexprEVectorExprParserRuleCall_3_0()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEBinaryExprAccess().getRexprEVectorExprParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__FunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEFunctionExprAccess().getFunctionEFUNCTIONTYPETerminalRuleCall_0_0()); }
		RULE_EFUNCTIONTYPE
		{ after(grammarAccess.getEFunctionExprAccess().getFunctionEFUNCTIONTYPETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFunctionExpr__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEFunctionExprAccess().getExprEVectorExprParserRuleCall_2_0()); }
		ruleEVectorExpr
		{ after(grammarAccess.getEFunctionExprAccess().getExprEVectorExprParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEMetricExprAccess().getTypeEMetricTypeParserRuleCall_0_0()); }
		ruleEMetricType
		{ after(grammarAccess.getEMetricExprAccess().getTypeEMetricTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__TagsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEMetricExprAccess().getTagsETagParserRuleCall_2_0()); }
		ruleETag
		{ after(grammarAccess.getEMetricExprAccess().getTagsETagParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__TagsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEMetricExprAccess().getTagsETagParserRuleCall_3_1_0()); }
		ruleETag
		{ after(grammarAccess.getEMetricExprAccess().getTagsETagParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricExpr__PeriodAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEMetricExprAccess().getPeriodEPeriodParserRuleCall_5_1_0()); }
		ruleEPeriod
		{ after(grammarAccess.getEMetricExprAccess().getPeriodEPeriodParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriod__SegmentsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEPeriodAccess().getSegmentsEPeriodSegmentParserRuleCall_0_0()); }
		ruleEPeriodSegment
		{ after(grammarAccess.getEPeriodAccess().getSegmentsEPeriodSegmentParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriod__SegmentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEPeriodAccess().getSegmentsEPeriodSegmentParserRuleCall_1_0()); }
		ruleEPeriodSegment
		{ after(grammarAccess.getEPeriodAccess().getSegmentsEPeriodSegmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriodSegment__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEPeriodSegmentAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getEPeriodSegmentAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPeriodSegment__UnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEPeriodSegmentAccess().getUnitEPERIODUNITTerminalRuleCall_1_0()); }
		RULE_EPERIODUNIT
		{ after(grammarAccess.getEPeriodSegmentAccess().getUnitEPERIODUNITTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getETagAccess().getKeyIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getETagAccess().getKeyIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__OperAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getETagAccess().getOperEOperAssociationParserRuleCall_1_0()); }
		ruleEOperAssociation
		{ after(grammarAccess.getETagAccess().getOperEOperAssociationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETag__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getETagAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getETagAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EOperAssociation__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEOperAssociationAccess().getTypeAlternatives_0()); }
		(rule__EOperAssociation__TypeAlternatives_0)
		{ after(grammarAccess.getEOperAssociationAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EMetricType__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEMetricTypeAccess().getTypeAlternatives_0()); }
		(rule__EMetricType__TypeAlternatives_0)
		{ after(grammarAccess.getEMetricTypeAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ENUMBER__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getENUMBERAccess().getValueNUMBERParserRuleCall_0()); }
		ruleNUMBER
		{ after(grammarAccess.getENUMBERAccess().getValueNUMBERParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EArithmeticOperator__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEArithmeticOperatorAccess().getTypeAlternatives_0()); }
		(rule__EArithmeticOperator__TypeAlternatives_0)
		{ after(grammarAccess.getEArithmeticOperatorAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EComparisonOperator__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEComparisonOperatorAccess().getTypeAlternatives_0()); }
		(rule__EComparisonOperator__TypeAlternatives_0)
		{ after(grammarAccess.getEComparisonOperatorAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBinaryLogicOperator__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAlternatives_0()); }
		(rule__EBinaryLogicOperator__TypeAlternatives_0)
		{ after(grammarAccess.getEBinaryLogicOperatorAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
