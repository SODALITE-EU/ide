/*
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.formatting2

import com.google.inject.Inject
import org.sodalite.dsl.aADM.AADM_Model
import org.sodalite.dsl.aADM.ENodeTemplates
import org.sodalite.dsl.services.AADMGrammarAccess
import org.sodalite.dsl.aADM.ENodeTemplate

import static org.sodalite.dsl.aADM.AADMPackage.Literals.*
import static org.sodalite.dsl.rM.RMPackage.Literals.*
import org.sodalite.dsl.aADM.ENodeTemplateBody
import org.sodalite.dsl.rM.EPropertyAssignment
import org.sodalite.dsl.aADM.EAttributeAssignment
import org.sodalite.dsl.aADM.ERequirementAssignments
import org.sodalite.dsl.aADM.ERequirementAssignment
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.sodalite.dsl.rM.EPropertyAssignments
import org.sodalite.dsl.aADM.EAttributeAssignments
import org.sodalite.dsl.rM.EPREFIX_TYPE
import org.sodalite.dsl.rM.EMAP
import org.sodalite.dsl.rM.EPREFIX_ID
import org.sodalite.dsl.rM.EInputs
import org.sodalite.dsl.rM.EOutputs
import org.sodalite.dsl.rM.EParameterDefinition
import org.sodalite.dsl.rM.EParameterDefinitionBody
import org.sodalite.dsl.aADM.ECapabilityAssignment
import org.sodalite.dsl.aADM.ECapabilityAssignments
import org.sodalite.dsl.aADM.EPolicies
import org.sodalite.dsl.aADM.EPolicyDefinition
import org.sodalite.dsl.aADM.EPolicyDefinitionBody
import org.sodalite.dsl.aADM.ETriggerDefinitions
import org.sodalite.dsl.rM.ETriggerDefinition
import org.sodalite.dsl.rM.ETriggerDefinitionBody
import org.sodalite.dsl.rM.EActivityDefinitions
import org.sodalite.dsl.rM.ECallOperationActivityDefinition
import org.sodalite.dsl.rM.ECallOperationActivityDefinitionBody
import org.sodalite.dsl.rM.ETimeInterval
import org.sodalite.dsl.rM.EEvenFilter
import org.sodalite.dsl.rM.EExtendedTriggerCondition
import org.sodalite.dsl.rM.EConditionClauseDefinitionAND
import org.sodalite.dsl.rM.EConditionClauseDefinitionOR
import org.sodalite.dsl.rM.EConditionClauseDefinitionNOT
import org.sodalite.dsl.rM.EConditionClauseDefinitionAssert
import org.sodalite.dsl.rM.EAssertionDefinition
import org.sodalite.dsl.rM.EMapEntry

class AADMFormatter extends RMFormatter {

	@Inject extension AADMGrammarAccess

	def dispatch void format(AADM_Model aADM_Model, extension IFormattableDocument document) {
		aADM_Model.prepend[setNewLines(0, 0, 0); noSpace]
		aADM_Model.regionFor.keyword("inputs:").append[newLine]
		aADM_Model.inputs.surround[indent].format
		aADM_Model.regionFor.keyword("node_templates:").append[newLine]
		aADM_Model.nodeTemplates.surround[indent].format
		aADM_Model.regionFor.keyword("policies:").append[newLine]
		aADM_Model.policies.surround[indent].format
		aADM_Model.regionFor.keyword("outputs:").append[newLine]
		aADM_Model.outputs.surround[indent].format.append[newLine]
		aADM_Model.append[newLine]
	}
	
	def dispatch void format(EOutputs outputs, extension IFormattableDocument document) {
		for (eInput : outputs.parameters) {
			eInput.format
		}
	}

	def dispatch void format(ENodeTemplates eNodeTemplates, extension IFormattableDocument document) {
		for (eNodeTemplate : eNodeTemplates.nodeTemplates) {
			eNodeTemplate.format
		}
	}

	// TODO: implement for ENodeTemplate, ENodeTemplateBody, ERequirementAssignments, ECapabilityAssignments, ECapabilityAssignment, EAttributeAssigments, EAttributeAssignment, EPropertyAssigments, EPropertyAssignment
	def dispatch void format(ENodeTemplate eNodeTemplate, extension IFormattableDocument document) {
		eNodeTemplate.regionFor.feature(ENODE_TEMPLATE__NAME).append[noSpace]
		eNodeTemplate.regionFor.keyword(":").append[newLine]
		eNodeTemplate.node.surround[indent].format
	}

	def dispatch void format(ENodeTemplateBody eNodeTemplateBody, extension IFormattableDocument document) {
		eNodeTemplateBody.regionFor.keyword("type:").append[oneSpace]
		eNodeTemplateBody.type.format.append[newLine]

		eNodeTemplateBody.regionFor.keyword("description:").append[oneSpace]
		eNodeTemplateBody.regionFor.feature(ENODE_TEMPLATE_BODY__DESCRIPTION).append[newLine]

		eNodeTemplateBody.regionFor.keyword("optimization:").append[oneSpace]
		eNodeTemplateBody.regionFor.feature(ENODE_TEMPLATE_BODY__OPTIMIZATION).append[newLine]

		eNodeTemplateBody.regionFor.keyword("properties:").append[newLine]
		eNodeTemplateBody.properties.surround[indent].format

		eNodeTemplateBody.regionFor.keyword("attributes:").append[newLine]
		eNodeTemplateBody.attributes.surround[indent].format

		eNodeTemplateBody.regionFor.keyword("requirements:").append[newLine]
		eNodeTemplateBody.requirements.surround[indent].format
		
		eNodeTemplateBody.regionFor.keyword("capabilities:").append[newLine]
		eNodeTemplateBody.capabilities.surround[indent].format
	}

	def dispatch void format(EPropertyAssignments ePropertyAssigments, extension IFormattableDocument document) {
		for (property : ePropertyAssigments.properties) {
			if (!document.request.textRegionAccess.toString.contains("node_templates")){ //For local changes caused by quick fixes
				if (property.eContainer.eContainer instanceof ENodeTemplateBody){
					property.surround[indent].surround[indent]
				}else if (property.eContainer.eContainer instanceof ECapabilityAssignment){
					property.surround[indent].surround[indent].surround[indent]
				}
			}
			property.format.append[newLine]
		}
	}

	def dispatch void format(EPropertyAssignment ePropertyAssigment, extension IFormattableDocument document) {
		if (!(ePropertyAssigment.value instanceof EMAP)){
			ePropertyAssigment.regionFor.feature(EPROPERTY_ASSIGNMENT__NAME).append[noSpace]
			ePropertyAssigment.regionFor.keyword(":").append[oneSpace]
			ePropertyAssigment.value.format.append[newLine]
		}else{
			ePropertyAssigment.regionFor.feature(EPROPERTY_ASSIGNMENT__NAME).append[noSpace]
			ePropertyAssigment.regionFor.keyword(":").append[newLine]
			val eMap = ePropertyAssigment.value as EMAP
			for (nestedProperty: eMap.map){
				nestedProperty.surround[indent].format
			}
		}
	}
	
	def dispatch void format(EMapEntry eMapEntry, extension IFormattableDocument document) {
		if (!(eMapEntry.value instanceof EMAP)){
			eMapEntry.regionFor.feature(EMAP_ENTRY__KEY).append[noSpace]
			eMapEntry.regionFor.keyword(":").append[oneSpace]
			eMapEntry.value.format.append[newLine]
		}else{
			eMapEntry.regionFor.feature(EMAP_ENTRY__KEY).append[noSpace]
			eMapEntry.regionFor.keyword(":").append[newLine]
			val eMap = eMapEntry.value as EMAP
			for (nestedProperty: eMap.map){
				nestedProperty.surround[indent].format
			}
		}
	}

	def dispatch void format(EAttributeAssignments eAttributeAssigments, extension IFormattableDocument document) {
		for (attribute : eAttributeAssigments.attributes) {
			if (!document.request.textRegionAccess.toString.contains("node_templates")){ //For local changes caused by quick fixes
				attribute.surround[indent].surround[indent]
			}
			attribute.format.append[newLine]
		}
	}

	def dispatch void format(EAttributeAssignment eAttributeAssigment, extension IFormattableDocument document) {
		eAttributeAssigment.regionFor.feature(EATTRIBUTE_ASSIGNMENT__NAME).append[noSpace]
		eAttributeAssigment.regionFor.keyword(":").append[oneSpace]
		eAttributeAssigment.value.format.append[newLine]
	}

	def dispatch void format(ERequirementAssignments eRequirementAssigments, extension IFormattableDocument document) {
		for (req : eRequirementAssigments.requirements) {
			if (!document.request.textRegionAccess.toString.contains("node_templates")){ //For local changes caused by quick fixes
				req.surround[indent].surround[indent]
			}
			req.format.append[newLine]
		}
	}
	
	def dispatch void format(ERequirementAssignment req, extension IFormattableDocument document) {
		req.regionFor.feature(EREQUIREMENT_ASSIGNMENT__NAME).append[noSpace]
		req.regionFor.keyword(":").append[newLine]
		req.regionFor.keyword("node:").surround[indent]
		req.node.format
	}

	def dispatch void format(ECapabilityAssignment cap, extension IFormattableDocument document) {
		cap.regionFor.feature(ECAPABILITY_ASSIGNMENT__NAME).append[noSpace]
		cap.regionFor.keyword(":").append[newLine]
		cap.regionFor.keyword("properties:").append[newLine]
		cap.properties.surround[indent].format
	}
	
	def dispatch void format(ECapabilityAssignments eECapabilityAssignments, extension IFormattableDocument document) {
		for (cap : eECapabilityAssignments.capabilities) {
			if (!document.request.textRegionAccess.toString.contains("node_templates")){ //For local changes caused by quick fixes
				cap.surround[indent].surround[indent]
			}
			cap.format.append[newLine]
		}
	}
	
	def dispatch void format(EPolicies policies, extension IFormattableDocument document) {
		for (policy : policies.policies) {
			policy.format
		}
	}
	
	def dispatch void format(EPolicyDefinition policy, extension IFormattableDocument document) {
		policy.regionFor.feature(EPOLICY_DEFINITION__NAME).append[noSpace]
		policy.regionFor.keyword(":").append[newLine]
		policy.policy.surround[indent].format
	}

	def dispatch void format(EPolicyDefinitionBody policy, extension IFormattableDocument document) {
		policy.regionFor.keyword("type:").append[oneSpace]
		policy.type.format.append[newLine]

		policy.regionFor.keyword("description:").append[oneSpace]
		policy.regionFor.feature(EPOLICY_DEFINITION_BODY__DESCRIPTION).append[newLine]

		policy.regionFor.keyword("properties:").append[newLine]
		policy.properties.surround[indent].format

		policy.regionFor.keyword("targets:").append[oneSpace]
		policy.regionFor.keyword("[").append[noSpace]
		policy.regionFor.keyword("]").append[newLine]

		policy.regionFor.keyword("triggers:").append[newLine]
		policy.triggers.surround[indent].format
	}
	
	def dispatch void format(ETriggerDefinitions triggers, extension IFormattableDocument document) {
		for (trigger : triggers.triggers) {
			trigger.format
		}
	}
	
	def dispatch void format(ETimeInterval ti, extension IFormattableDocument document) {
		ti.regionFor.keyword("start_time:").append[oneSpace]
		ti.regionFor.feature(ETIME_INTERVAL__START_TIME).append[newLine]
		
		ti.regionFor.keyword("end_time:").append[oneSpace]
		ti.regionFor.feature(ETIME_INTERVAL__END_TIME).append[newLine]
	}

	def dispatch void format(EAssertionDefinition assertion, extension IFormattableDocument document) {
		assertion.regionFor.feature(EASSERTION_DEFINITION__ATTRIBUTE_NAME).append[noSpace]
		assertion.regionFor.keyword(":").append[oneSpace]
		assertion.regionFor.keyword("[").append[noSpace]
		assertion.regionFor.keyword("]").append[newLine]
	}	

}
