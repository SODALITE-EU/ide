/*
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.formatting2

import com.google.inject.Inject
import org.sodalite.dsl.aADM.AADM_Model
import org.sodalite.dsl.aADM.ENodeTemplates
import org.sodalite.dsl.services.AADMGrammarAccess
import org.sodalite.dsl.aADM.ENodeTemplate

import static org.sodalite.dsl.aADM.AADMPackage.Literals.*
import static org.sodalite.dsl.rM.RMPackage.Literals.*
import org.sodalite.dsl.aADM.ENodeTemplateBody
import org.sodalite.dsl.rM.EPropertyAssignment
import org.sodalite.dsl.aADM.EAttributeAssignment
import org.sodalite.dsl.aADM.ERequirementAssignments
import org.sodalite.dsl.aADM.ERequirementAssignment
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.sodalite.dsl.rM.EPropertyAssignments
import org.sodalite.dsl.aADM.EAttributeAssignments
import org.sodalite.dsl.rM.EPREFIX_TYPE
import org.sodalite.dsl.rM.EMAP
import org.sodalite.dsl.rM.EPREFIX_ID
import org.sodalite.dsl.rM.EInputs
import org.sodalite.dsl.rM.EParameterDefinition
import org.sodalite.dsl.rM.EParameterDefinitionBody

class AADMFormatter extends RMFormatter {

	@Inject extension AADMGrammarAccess

	def dispatch void format(AADM_Model aADM_Model, extension IFormattableDocument document) {
		aADM_Model.prepend[setNewLines(0, 0, 0); noSpace]
		aADM_Model.regionFor.keyword("node_templates:").append[newLine]
		aADM_Model.inputs.format
		aADM_Model.nodeTemplates.format
	}
	
	def dispatch void format(EInputs eInputs, extension IFormattableDocument document) {
		for (eInput : eInputs.inputs) {
			eInput.format
		}
	}
	
	def dispatch void format(EParameterDefinition eParameter, extension IFormattableDocument document) {
		eParameter.surround[indent]
		eParameter.regionFor.feature(EPARAMETER_DEFINITION__NAME).append[noSpace]
		eParameter.regionFor.keyword(":").append[newLine]
		eParameter.parameter.surround[indent].format
	}
	
	def dispatch void format(EParameterDefinitionBody eParameterBody, extension IFormattableDocument document) {
		eParameterBody.regionFor.keyword("type:").append[oneSpace]
		eParameterBody.type.format.append[newLine]

		eParameterBody.regionFor.keyword("value:").append[oneSpace]
		eParameterBody.value.format.append[newLine]

		eParameterBody.regionFor.keyword("default:").append[oneSpace]
		eParameterBody.^default.format.append[newLine]
	}

	def dispatch void format(ENodeTemplates eNodeTemplates, extension IFormattableDocument document) {
		for (eNodeTemplate : eNodeTemplates.nodeTemplates) {
			eNodeTemplate.format
		}
	}
	

	// TODO: implement for ENodeTemplate, ENodeTemplateBody, ERequirementAssignments, ECapabilityAssignments, ECapabilityAssignment, EAttributeAssigments, EAttributeAssignment, EPropertyAssigments, EPropertyAssignment
	def dispatch void format(ENodeTemplate eNodeTemplate, extension IFormattableDocument document) {
		eNodeTemplate.surround[indent]
		eNodeTemplate.regionFor.feature(ENODE_TEMPLATE__NAME).append[noSpace]
		eNodeTemplate.regionFor.keyword(":").append[newLine]
		eNodeTemplate.node.surround[indent].format
	}

	def dispatch void format(ENodeTemplateBody eNodeTemplateBody, extension IFormattableDocument document) {
		eNodeTemplateBody.regionFor.keyword("type:").append[oneSpace]
		eNodeTemplateBody.type.format.append[newLine]

		eNodeTemplateBody.regionFor.keyword("description:").append[oneSpace]
		eNodeTemplateBody.regionFor.feature(ENODE_TEMPLATE_BODY__DESCRIPTION).append[newLine]

		eNodeTemplateBody.regionFor.keyword("optimization:").append[oneSpace]
		eNodeTemplateBody.regionFor.feature(ENODE_TEMPLATE_BODY__OPTIMIZATION).append[newLine]

		eNodeTemplateBody.regionFor.keyword("properties:").append[newLine]
		eNodeTemplateBody.properties.surround[indent].format

		eNodeTemplateBody.regionFor.keyword("attributes:").append[newLine]
		eNodeTemplateBody.atributes.surround[indent].format

		eNodeTemplateBody.regionFor.keyword("requirements:").append[newLine]
		eNodeTemplateBody.requirements.surround[indent].format
	}

	def dispatch void format(EPropertyAssignments ePropertyAssigments, extension IFormattableDocument document) {
		for (property : ePropertyAssigments.properties) {
			if (!document.request.textRegionAccess.toString.contains("node_templates")){ //For local changes caused by quick fixes
				property.surround[indent].surround[indent]
			}
			property.format.append[newLine]
		}
	}

	def dispatch void format(EPropertyAssignment ePropertyAssigment, extension IFormattableDocument document) {
		if (!(ePropertyAssigment.value instanceof EMAP)){
			ePropertyAssigment.regionFor.feature(EPROPERTY_ASSIGNMENT__NAME).append[noSpace]
			ePropertyAssigment.regionFor.keyword(":").append[oneSpace]
			ePropertyAssigment.value.format.append[newLine]
		}
	}

	def dispatch void format(EAttributeAssignments eAttributeAssigments, extension IFormattableDocument document) {
		for (attribute : eAttributeAssigments.attributes) {
			attribute.format.append[newLine]
		}
	}

	def dispatch void format(EAttributeAssignment eAttributeAssigment, extension IFormattableDocument document) {
		eAttributeAssigment.regionFor.feature(EATTRIBUTE_ASSIGNMENT__NAME).append[noSpace]
		eAttributeAssigment.regionFor.keyword(":").append[oneSpace]
		eAttributeAssigment.value.format.append[newLine]
	}

	def dispatch void format(ERequirementAssignments eRequirementAssigments, extension IFormattableDocument document) {
		for (req : eRequirementAssigments.requirements) {
			if (!document.request.textRegionAccess.toString.contains("node_templates")){ //For local changes caused by quick fixes
				req.surround[indent].surround[indent]
			}
			req.format.append[newLine]
		}
	}

	def dispatch void format(ERequirementAssignment req, extension IFormattableDocument document) {
		req.regionFor.feature(EREQUIREMENT_ASSIGNMENT__NAME).append[noSpace]
		req.regionFor.keyword(":").append[newLine]
		req.regionFor.keyword("node:").surround[indent]
		req.node.format
	}

	def dispatch void format(EPREFIX_ID prefix, extension IFormattableDocument document) {
		prefix.regionFor.feature(EPREFIX_ID__MODULE).append[noSpace]
		prefix.regionFor.keyword("/").append[noSpace]
	}
}
