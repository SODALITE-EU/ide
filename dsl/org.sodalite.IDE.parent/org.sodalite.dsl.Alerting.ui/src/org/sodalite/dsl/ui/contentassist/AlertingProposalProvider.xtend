/*
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.ui.contentassist

import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.xtext.impl.KeywordImpl
import org.eclipse.xtext.ParserRule
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.swt.graphics.Image
import java.util.Map
import java.util.HashMap
import org.osgi.framework.Bundle
import org.eclipse.core.runtime.FileLocator
import org.eclipse.jface.resource.ImageDescriptor
import java.net.URL
import org.eclipse.core.runtime.Platform
import org.eclipse.core.runtime.Path
import org.eclipse.xtext.Assignment
import java.util.Set
import org.sodalite.dsl.alerting.EMetricExpr

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
class AlertingProposalProvider extends AbstractAlertingProposalProvider {
	override void completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {
		val Image image = getImage(getImagePath(keyword))
		val ICompletionProposal proposal = createCompletionProposal(keyword.getValue(),
			getKeywordDisplayString(keyword), image, contentAssistContext);
		proposal.additionalProposalInfo = getAdditionalProposalInfo(keyword)
		
		getPriorityHelper().adjustKeywordPriority(proposal, contentAssistContext.getPrefix());
		acceptor.accept(proposal);
	}
		
	def String getImagePath(Keyword keyword) {
		if (isMetricKeyword(keyword))
			return "icons/metrics.png"
		else if (isAggregationOperKeyword(keyword))
			return "icons/aggregation.png"
		else if (isFunctionKeyword(keyword))
			return "icons/function.png"
		else if (isVectorMatchingKeyword(keyword))
			return "icons/vector.png"
		else if (isArithmeticKeyword(keyword))
			return "icons/arithmetic.png"
		else if (isComparisonKeyword(keyword))
			return "icons/comparison.png"
		else if (isLogicKeyword(keyword))
			return "icons/logic.png"
		else
			return null;
	}
	
	val logics = #{'not', 'and', 'or', 'unless'}
	def isLogicKeyword(Keyword keyword) {
		return logics.contains(keyword.value)
	}
	
	val comparisons = #{'<', '>', '<=', '>=', '=='}
	def isComparisonKeyword(Keyword keyword) {
		return comparisons.contains(keyword.value)
	}
	
	val arithmetics = #{'+', '-', '*', '/', '%', '^'}
	def isArithmeticKeyword(Keyword keyword) {
		return arithmetics.contains(keyword.value)
	}
	
	val vectorMatchings = #{'on', 'ignoring'}
	def isVectorMatchingKeyword(Keyword keyword) {
		return vectorMatchings.contains(keyword.value)
	}
	
	val functions = #{'increase', 'rate', 'vector'}
	def isFunctionKeyword(Keyword keyword) {
		return functions.contains(keyword.value)
	}
	
	val aggregationOpers = #{'sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile'}
	def isAggregationOperKeyword(Keyword keyword) {
		return aggregationOpers.contains(keyword.value)
	}
		
	def isMetricKeyword(Keyword keyword) {
		return (keyword.value.startsWith("slurm") || keyword.value.startsWith("pbs") || keyword.value.startsWith("node"))
	}
	
	var Map <String, Image> images = new HashMap<String, Image>();
	def getImage(String path){
		if (path === null)
			return null
		if (!images.containsKey(path)){
			val Bundle bundle = Platform.getBundle("org.sodalite.dsl.Alerting.ui");
			val URL fullPathString = FileLocator.find(bundle, new Path(path), null)
			val ImageDescriptor imageDesc = ImageDescriptor.createFromURL(fullPathString)
			val Image image = imageDesc.createImage()
			if (image !== null)
				images.put(path, image)
		}
		return images.get(path)
	}
	
	def String getAdditionalProposalInfo(Keyword keyword) {
		if (keyword instanceof KeywordImpl) {
			val keywordImpl = keyword as KeywordImpl
			val rule = findParserRule (keywordImpl)
			
			print ("rulename: " + rule.name + "\n")
			print ("keyword: " + keyword.value + "\n\n")

			if (rule.name == "EGroup" && keyword.value == "group:")
				return "The name of a group of monitoring alert rules that are evaluated together.\nMust be unique within a file"
			else if (rule.name == "ERule" && keyword.value == "alert:")
				return "The name of the alert rule."
			else if (rule.name == "ERule" && keyword.value == "expr:")
				return "The PromQL expression to evaluate.\nIn every evaluation cycle this expression is evaluated at the current time,\n and all resultant time series become on pending/firing alerts."
			else if (rule.name == "ERule" && keyword.value == "for:")
				return "Alerts are considered for firing once the expression condition holds for given duration.\n Alerts which have not yet fired before given duration are considered pending."
			else if (rule.name == "ERule" && keyword.value == "labels:")
				return "Labels to add or overwrite for each alert."
			else if (rule.name == "ERule" && keyword.value == "annotations:")
				return "Annotations to add to each alert."
				
			else
				return ""
		}
	}
	
	def String getAdditionalProposalInfo(String keyword) {
		//SLURM Exporter
		if (keyword == "slurm_job_state")
			return "slurm_job_state{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_walltime_used")
			return "slurm_job_walltime_used{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_cpu_n")
			return "slurm_job_cpu_n{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_memory_virtual_max")
			return "slurm_job_memory_virtual_max{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_memory_physical_max")
			return "slurm_job_memory_physical_max{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_queued")
			return "slurm_job_queued{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_exit_code")
			return "slurm_job_exit_code{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_job_exit_signal")
			return "slurm_job_exit_signal{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_partition}"
		else if (keyword == "slurm_partition_availability")
			return "slurm_partition_availability{monitoring_id, deployment_label, hpc, partition}"
		else if (keyword == "slurm_partition_cores_idle")
			return "slurm_partition_cores_idle{monitoring_id, deployment_label, hpc, partition}"
		else if (keyword == "slurm_partition_cores_allocated")
			return "slurm_partition_cores_allocated{monitoring_id, deployment_label, hpc, partition}"
		else if (keyword == "slurm_partition_cores_total")
			return "slurm_partition_cores_total{monitoring_id, deployment_label, hpc, partition}"
		
		//PBS Exporter
		else if (keyword == "pbs_job_state")
			return "pbs_job_state{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_priority")
			return "pbs_job_priority{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_walltime_used")
			return "pbs_job_walltime_used{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_walltime_max")
			return "pbs_job_walltime_max{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_walltime_remaining")
			return "pbs_job_walltime_remaining{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_cpu_time")
			return "pbs_job_cpu_time{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_cpu_n")
			return "pbs_job_cpu_n{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_mem_virtual")
			return "pbs_job_mem_virtual{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_mem_physical")
			return "pbs_job_mem_physical{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_time_queued")
			return "pbs_job_time_queued{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_job_exit_status")
			return "pbs_job_exit_status{monitoring_id, deployment_label, hpc, job_id, job_name, job_user, job_queue}"
		else if (keyword == "pbs_queue_enabled")
			return "pbs_queue_enabled{monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_started")
			return "pbs_queue_started{monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_total")
			return "pbs_queue_jobs_total {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_max")
			return "pbs_queue_jobs_max {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_queued")
			return "pbs_queue_jobs_queued {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_running")
			return "pbs_queue_jobs_running {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_held")
			return "pbs_queue_jobs_held {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_waiting")
			return "pbs_queue_jobs_waiting {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_transit")
			return "pbs_queue_jobs_transit {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_exiting")
			return "pbs_queue_jobs_exiting {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
		else if (keyword == "pbs_queue_jobs_complete")
			return "pbs_queue_jobs_complete {monitoring_id, deployment_label, hpc, queue_name, queue_type}"
						
			//Node Exporter
			else if (keyword == "node_arp_entries")
				return "node_arp_entries{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_boot_time_seconds")
				return "node_boot_time_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_context_switches_total")
				return "node_context_switches_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_cooling_device_cur_state")
				return "node_cooling_device_cur_state{deployment_label,instance_name,monitoring_id,name,type}"
			else if (keyword == "node_cpu_guest_seconds_total")
				return "node_cpu_guest_seconds_total{cpu,deployment_label,instance_name,mode,monitoring_id}"
			else if (keyword == "node_cpu_seconds_total")
				return "node_cpu_seconds_total{cpu,deployment_label,instance_name,mode,monitoring_id}"
			else if (keyword == "node_disk_io_now")
				return "node_disk_io_now{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_io_time_seconds_total")
				return "node_disk_io_time_seconds_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_io_time_weighted_seconds_total")
				return "node_disk_io_time_weighted_seconds_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_read_bytes_total")
				return "node_disk_read_bytes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_read_time_seconds_total")
				return "node_disk_read_time_seconds_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_reads_completed_total")
				return "node_disk_reads_completed_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_reads_merged_total")
				return "node_disk_reads_merged_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_write_time_seconds_total")
				return "node_disk_write_time_seconds_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_writes_completed_total")
				return "node_disk_writes_completed_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_writes_merged_total")
				return "node_disk_writes_merged_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_disk_written_bytes_total")
				return "node_disk_written_bytes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_entropy_available_bits")
				return "node_entropy_available_bits{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_entropy_pool_size_bits")
				return "node_entropy_pool_size_bits{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_exporter_build_info")
				return "node_exporter_build_info{branch,goversion,revision,version}"
			else if (keyword == "node_filefd_allocated")
				return "node_filefd_allocated{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_filefd_maximum")
				return "node_filefd_maximum{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_filesystem_avail_bytes")
				return "node_filesystem_avail_bytes{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_filesystem_device_error")
				return "node_filesystem_device_error{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_filesystem_files")
				return "node_filesystem_files{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_filesystem_files_free")
				return "node_filesystem_files_free{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_filesystem_free_bytes")
				return "node_filesystem_free_bytes{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_filesystem_readonly")
				return "node_filesystem_readonly{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_filesystem_size_bytes")
				return "node_filesystem_size_bytes{device,fstype,deployment_label,instance_name,monitoring_id,mountpoint}"
			else if (keyword == "node_forks_total")
				return "node_forks_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_intr_total")
				return "node_intr_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_load1")
				return "node_load1{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_load15")
				return "node_load15{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_load5")
				return "node_load5{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Active_anon_bytes")
				return "node_memory_Active_anon_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Active_bytes")
				return "node_memory_Active_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Active_file_bytes")
				return "node_memory_Active_file_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_AnonHugePages_bytes")
				return "node_memory_AnonHugePages_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_AnonPages_bytes")
				return "node_memory_AnonPages_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Bounce_bytes")
				return "node_memory_Bounce_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Buffers_bytes")
				return "node_memory_Buffers_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Cached_bytes")
				return "node_memory_Cached_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_CmaFree_bytes")
				return "node_memory_CmaFree_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_CmaTotal_bytes")
				return "node_memory_CmaTotal_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_CommitLimit_bytes")
				return "node_memory_CommitLimit_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Committed_AS_bytes")
				return "node_memory_Committed_AS_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_DirectMap1G_bytes")
				return "node_memory_DirectMap1G_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_DirectMap2M_bytes")
				return "node_memory_DirectMap2M_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_DirectMap4k_bytes")
				return "node_memory_DirectMap4k_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Dirty_bytes")
				return "node_memory_Dirty_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_HardwareCorrupted_bytes")
				return "node_memory_HardwareCorrupted_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_HugePages_Free")
				return "node_memory_HugePages_Free{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_HugePages_Rsvd")
				return "node_memory_HugePages_Rsvd{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_HugePages_Surp")
				return "node_memory_HugePages_Surp{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_HugePages_Total")
				return "node_memory_HugePages_Total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Hugepagesize_bytes")
				return "node_memory_Hugepagesize_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Inactive_anon_bytes")
				return "node_memory_Inactive_anon_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "")
				return "node_memory_Inactive_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Inactive_bytes")
				return "node_memory_Inactive_file_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_KernelStack_bytes")
				return "node_memory_KernelStack_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Mapped_bytes")
				return "node_memory_Mapped_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_MemAvailable_bytes")
				return "node_memory_MemAvailable_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_MemFree_bytes")
				return "node_memory_MemFree_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_MemTotal_bytes")
				return "node_memory_MemTotal_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Mlocked_bytes")
				return "node_memory_Mlocked_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_NFS_Unstable_bytes")
				return "node_memory_NFS_Unstable_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_PageTables_bytes")
				return "node_memory_PageTables_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_SReclaimable_bytes")
				return "node_memory_SReclaimable_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_SUnreclaim_bytes")
				return "node_memory_SUnreclaim_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_ShmemHugePages_bytes")
				return "node_memory_ShmemHugePages_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_ShmemPmdMapped_bytes")
				return "node_memory_ShmemPmdMapped_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Shmem_bytes")
				return "node_memory_Shmem_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Slab_bytes")
				return "node_memory_Slab_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_SwapCached_bytes")
				return "node_memory_SwapCached_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_SwapFree_bytes")
				return "node_memory_SwapFree_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_SwapTotal_bytes")
				return "node_memory_SwapTotal_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Unevictable_bytes")
				return "node_memory_Unevictable_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_VmallocChunk_bytes")
				return "node_memory_VmallocChunk_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_VmallocTotal_bytes")
				return "node_memory_VmallocTotal_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_VmallocUsed_bytes")
				return "node_memory_VmallocUsed_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_WritebackTmp_bytes")
				return "node_memory_WritebackTmp_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_memory_Writeback_bytes")
				return "node_memory_Writeback_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Icmp6_InErrors")
				return "node_netstat_Icmp6_InErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Icmp6_InMsgs")
				return "node_netstat_Icmp6_InMsgs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Icmp6_OutMsgs")
				return "node_netstat_Icmp6_OutMsgs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Icmp_InErrors")
				return "node_netstat_Icmp_InErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Icmp_InMsgs")
				return "node_netstat_Icmp_InMsgs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Icmp_OutMsgs")
				return "node_netstat_Icmp_OutMsgs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Ip6_InOctets")
				return "node_netstat_Ip6_InOctets{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Ip6_OutOctets")
				return "node_netstat_Ip6_OutOctets{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_IpExt_InOctets")
				return "node_netstat_IpExt_InOctets{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_IpExt_OutOctets")
				return "node_netstat_IpExt_OutOctets{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Ip_Forwarding")
				return "node_netstat_Ip_Forwarding{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_TcpExt_ListenDrops")
				return "node_netstat_TcpExt_ListenDrops{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_TcpExt_ListenOverflows")
				return "node_netstat_TcpExt_ListenOverflows{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_TcpExt_SyncookiesFailed")
				return "node_netstat_TcpExt_SyncookiesFailed{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_TcpExt_SyncookiesRecv")
				return "node_netstat_TcpExt_SyncookiesRecv{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_TcpExt_SyncookiesSent")
				return "node_netstat_TcpExt_SyncookiesSent{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_TcpExt_TCPSynRetrans")
				return "node_netstat_TcpExt_TCPSynRetrans{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_ActiveOpens")
				return "node_netstat_Tcp_ActiveOpens{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_CurrEstab")
				return "node_netstat_Tcp_CurrEstab{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_InErrs")
				return "node_netstat_Tcp_InErrs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_InSegs")
				return "node_netstat_Tcp_InSegs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_OutRsts")
				return "node_netstat_Tcp_OutRsts{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_OutSegs")
				return "node_netstat_Tcp_OutSegs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_PassiveOpens")
				return "node_netstat_Tcp_PassiveOpens{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Tcp_RetransSegs")
				return "node_netstat_Tcp_RetransSegs{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp6_InDatagrams")
				return "node_netstat_Udp6_InDatagrams{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp6_InErrors")
				return "node_netstat_Udp6_InErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp6_NoPorts")
				return "node_netstat_Udp6_NoPorts{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp6_OutDatagrams")
				return "node_netstat_Udp6_OutDatagrams{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp6_RcvbufErrors")
				return "node_netstat_Udp6_RcvbufErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp6_SndbufErrors")
				return "node_netstat_Udp6_SndbufErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_UdpLite6_InErrors")
				return "node_netstat_UdpLite6_InErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_UdpLite_InErrors")
				return "node_netstat_UdpLite_InErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp_InDatagrams")
				return "node_netstat_Udp_InDatagrams{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp_InErrors")
				return "node_netstat_Udp_InErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp_NoPorts")
				return "node_netstat_Udp_NoPorts{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp_OutDatagrams")
				return "node_netstat_Udp_OutDatagrams{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp_RcvbufErrors")
				return "node_netstat_Udp_RcvbufErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_netstat_Udp_SndbufErrors")
				return "node_netstat_Udp_SndbufErrors{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_address_assign_type")
				return "node_network_address_assign_type{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_carrier_changes_total")
				return "node_network_carrier_changes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_carrier_down_changes_total")
				return "node_network_carrier_down_changes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_carrier_up_changes_total")
				return "node_network_carrier_up_changes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_device_id")
				return "node_network_device_id{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_dormant")
				return "node_network_dormant{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_flags")
				return "node_network_flags{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_iface_id")
				return "node_network_iface_id{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_iface_link")
				return "node_network_iface_link{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_iface_link_mode")
				return "node_network_iface_link_mode{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_info")
				return "node_network_info{address,broadcast,device,duplex,deployment_label,ifalias,instance_name,monitoring_id,operstate}"
			else if (keyword == "node_network_mtu_bytes")
				return "node_network_mtu_bytes{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_name_assign_type")
				return "node_network_name_assign_type{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_net_dev_group")
				return "node_network_net_dev_group{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_protocol_type")
				return "node_network_protocol_type{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_bytes_total")
				return "node_network_receive_bytes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_compressed_total")
				return "node_network_receive_compressed_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_drop_total")
				return "node_network_receive_drop_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_errs_total")
				return "node_network_receive_errs_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_fifo_total")
				return "node_network_receive_fifo_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_frame_total")
				return "node_network_receive_frame_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_multicast_total")
				return "node_network_receive_multicast_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_receive_packets_total")
				return "node_network_receive_packets_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_speed_bytes")
				return "node_network_speed_bytes{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_bytes_total")
				return "node_network_transmit_bytes_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_carrier_total")
				return "node_network_transmit_carrier_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_colls_total")
				return "node_network_transmit_colls_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_compressed_total")
				return "node_network_transmit_compressed_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_drop_total")
				return "node_network_transmit_drop_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_errs_total")
				return "node_network_transmit_errs_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_fifo_total")
				return "node_network_transmit_fifo_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_packets_total")
				return "node_network_transmit_packets_total{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_transmit_queue_length")
				return "node_network_transmit_queue_length{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_network_up")
				return "node_network_up{device,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_nf_conntrack_entries")
				return "node_nf_conntrack_entries{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_nf_conntrack_entries_limit")
				return "node_nf_conntrack_entries_limit{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_procs_blocked")
				return "node_procs_blocked{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_procs_running")
				return "node_procs_running{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_schedstat_running_seconds_total")
				return "node_schedstat_running_seconds_total{cpu,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_schedstat_timeslices_total")
				return "node_schedstat_timeslices_total{cpu,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_schedstat_waiting_seconds_total")
				return "node_schedstat_waiting_seconds_total{cpu,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_scrape_collector_duration_seconds")
				return "node_scrape_collector_duration_seconds{collector,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_scrape_collector_success")
				return "node_scrape_collector_success{collector,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_FRAG6_inuse")
				return "node_sockstat_FRAG6_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_FRAG6_memory")
				return "node_sockstat_FRAG6_memory{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_FRAG_inuse")
				return "node_sockstat_FRAG_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_FRAG_memory")
				return "node_sockstat_FRAG_memory{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_RAW6_inuse")
				return "node_sockstat_RAW6_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_RAW_inuse")
				return "node_sockstat_RAW_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP6_inuse")
				return "node_sockstat_TCP6_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP_alloc")
				return "node_sockstat_TCP_alloc{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP_inuse")
				return "node_sockstat_TCP_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP_mem")
				return "node_sockstat_TCP_mem{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP_mem_bytes")
				return "node_sockstat_TCP_mem_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP_orphan")
				return "node_sockstat_TCP_orphan{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_TCP_tw")
				return "node_sockstat_TCP_tw{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_UDP6_inuse")
				return "node_sockstat_UDP6_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_UDPLITE6_inuse")
				return "node_sockstat_UDPLITE6_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_UDPLITE_inuse")
				return "node_sockstat_UDPLITE_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_UDP_inuse")
				return "node_sockstat_UDP_inuse{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_UDP_mem")
				return "node_sockstat_UDP_mem{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_UDP_mem_bytes")
				return "node_sockstat_UDP_mem_bytes{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_sockstat_sockets_used")
				return "node_sockstat_sockets_used{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_softnet_dropped_total")
				return "node_softnet_dropped_total{cpu,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_softnet_processed_total")
				return "node_softnet_processed_total{cpu,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_softnet_times_squeezed_total")
				return "node_softnet_times_squeezed_total{cpu,deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_textfile_scrape_error")
				return "node_textfile_scrape_error{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_time_seconds")
				return "node_time_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_estimated_error_seconds")
				return "node_timex_estimated_error_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_frequency_adjustment_ratio")
				return "node_timex_frequency_adjustment_ratio{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_loop_time_constant")
				return "node_timex_loop_time_constant{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_maxerror_seconds")
				return "node_timex_maxerror_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_offset_seconds")
				return "node_timex_offset_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_calibration_total")
				return "node_timex_pps_calibration_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_error_total")
				return "node_timex_pps_error_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_frequency_hertz")
				return "node_timex_pps_frequency_hertz{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_jitter_seconds")
				return "node_timex_pps_jitter_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_jitter_total")
				return "node_timex_pps_jitter_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_shift_seconds")
				return "	node_timex_pps_shift_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_stability_exceeded_total")
				return "	node_timex_pps_stability_exceeded_total{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_pps_stability_hertz")
				return "node_timex_pps_stability_hertz{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_status")
				return "node_timex_status{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_sync_status")
				return "node_timex_sync_status{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_tai_offset_seconds")
				return "node_timex_tai_offset_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_timex_tick_seconds")
				return "node_timex_tick_seconds{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_udp_queues")
				return "node_udp_queues{deployment_label,instance_name,ip,monitoring_id,queue}"
			else if (keyword == "node_uname_info")
				return "node_uname_info{domainname,machine,nodename,release,sysname,version}"
			else if (keyword == "node_vmstat_oom_kill")
				return "node_vmstat_oom_kill{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_vmstat_pgfault")
				return "node_vmstat_pgfault{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_vmstat_pgmajfault")
				return "node_vmstat_pgmajfault{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_vmstat_pgpgin")
				return "node_vmstat_pgpgin{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_vmstat_pgpgout")
				return "node_vmstat_pgpgout{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_vmstat_pswpin")
				return "node_vmstat_pswpin{deployment_label,instance_name,monitoring_id}"
			else if (keyword == "node_vmstat_pswpout")
				return "node_vmstat_pswpout{deployment_label,instance_name,monitoring_id}"
				
		else
			return ""
		
	}
	
	val slurm_exporters = #{'slurm_job_state', 'slurm_job_walltime_used', 'slurm_job_cpu_n', 'slurm_job_memory_virtual_max', 
	'slurm_job_memory_physical_max', 'slurm_job_queued', 'slurm_job_exit_code', 
	'slurm_job_exit_signal', 'slurm_partition_availability', 'slurm_partition_cores_idle', 
	'slurm_partition_cores_allocated', 'slurm_partition_cores_total' }
	
	val pbs_exporters = #{'pbs_job_state', 'pbs_job_priority', 'pbs_job_walltime_used', 'pbs_job_walltime_max', 
	'pbs_job_walltime_remaining', 'pbs_job_cpu_time', 'pbs_job_cpu_n', 
	'pbs_job_mem_virtual', 'pbs_job_mem_physical', 'pbs_job_time_queued', 
	'pbs_job_exit_status', 'pbs_queue_enabled', 'pbs_queue_started', 
	'pbs_queue_jobs_total', 'pbs_queue_jobs_max', 'pbs_queue_jobs_queued', 
	'pbs_queue_jobs_running', 'pbs_queue_jobs_held', 'pbs_queue_jobs_waiting', 
	'pbs_queue_jobs_transit', 'pbs_queue_jobs_exiting', 'pbs_queue_jobs_complete'
	}
	
	val node_exporters = #{'node_arp_entries', 'node_boot_time_seconds', 'node_context_switches_total',
	 'node_cooling_device_cur_state', 'node_cpu_guest_seconds_total', 'node_cpu_seconds_total',
	 'node_disk_io_now', 'node_disk_io_time_seconds_total', 'node_disk_io_time_weighted_seconds_total',
	 'node_disk_read_bytes_total', 'node_disk_read_time_seconds_total', 'node_disk_reads_completed_total',
	 'node_disk_reads_merged_total', 'node_disk_write_time_seconds_total', 'node_disk_writes_completed_total',
	 'node_disk_writes_merged_total', 'node_disk_written_bytes_total', 'node_entropy_available_bits',
	 'node_entropy_pool_size_bits', 'node_exporter_build_info', 'node_filefd_allocated',
	 'node_filefd_maximum', 'node_filesystem_avail_bytes', 'node_filesystem_device_error',
	 'node_filesystem_files', 'node_filesystem_files_free', 'node_filesystem_free_bytes',
	 'node_filesystem_readonly', 'node_filesystem_size_bytes', 'node_forks_total',
	 'node_intr_total', 'node_load1', 'node_load15', 'node_load5',
	 'node_memory_Active_anon_bytes', 'node_memory_Active_bytes', 'node_memory_Active_file_bytes',
	 'node_memory_AnonHugePages_bytes', 'node_memory_AnonPages_bytes', 'node_memory_Bounce_bytes',
	 'node_memory_Buffers_bytes', 'node_memory_Cached_bytes', 'node_memory_CmaFree_bytes',
	 'node_memory_CmaTotal_bytes', 'node_memory_CommitLimit_bytes', 'node_memory_Committed_AS_bytes',
	 'node_memory_DirectMap1G_bytes', 'node_memory_DirectMap2M_bytes', 'node_memory_DirectMap4k_bytes',
	 'node_memory_Dirty_bytes', 'node_memory_HardwareCorrupted_bytes', 'node_memory_HugePages_Free',
	 'node_memory_HugePages_Rsvd', 'node_memory_HugePages_Surp', 'node_memory_HugePages_Total',
	 'node_memory_Hugepagesize_bytes', 'node_memory_Inactive_anon_bytes', 'node_memory_Inactive_bytes',
	 'node_memory_Inactive_file_bytes', 'node_memory_KernelStack_bytes', 'node_memory_Mapped_bytes',
	 'node_memory_MemAvailable_bytes', 'node_memory_MemFree_bytes', 'node_memory_MemTotal_bytes',
	 'node_memory_Mlocked_bytes', 'node_memory_NFS_Unstable_bytes', 'node_memory_PageTables_bytes',
	 'node_memory_SReclaimable_bytes', 'node_memory_SUnreclaim_bytes', 'node_memory_ShmemHugePages_bytes',
	 'node_memory_ShmemPmdMapped_bytes', 'node_memory_Shmem_bytes', 'node_memory_Slab_bytes',
	 'node_memory_SwapCached_bytes', 'node_memory_SwapFree_bytes', 'node_memory_SwapTotal_bytes',
	 'node_memory_Unevictable_bytes', 'node_memory_VmallocChunk_bytes', 'node_memory_VmallocTotal_bytes',
	 'node_memory_VmallocUsed_bytes', 'node_memory_WritebackTmp_bytes', 'node_memory_Writeback_bytes',
	 'node_netstat_Icmp6_InErrors', 'node_netstat_Icmp6_InMsgs', 'node_netstat_Icmp6_OutMsgs',
	 'node_netstat_Icmp_InErrors', 'node_netstat_Icmp_InMsgs', 'node_netstat_Icmp_OutMsgs',
	 'node_netstat_Ip6_InOctets', 'node_netstat_Ip6_OutOctets', 'node_netstat_IpExt_InOctets',
	 'node_netstat_IpExt_OutOctets', 'node_netstat_Ip_Forwarding', 'node_netstat_TcpExt_ListenDrops',
	 'node_netstat_TcpExt_ListenOverflows', 'node_netstat_TcpExt_SyncookiesFailed', 'node_netstat_TcpExt_SyncookiesRecv',
	 'node_netstat_TcpExt_SyncookiesSent', 'node_netstat_TcpExt_TCPSynRetrans', 'node_netstat_Tcp_ActiveOpens',
	 'node_netstat_Tcp_CurrEstab', 'node_netstat_Tcp_InErrs', 'node_netstat_Tcp_InSegs',
	 'node_netstat_Tcp_OutRsts', 'node_netstat_Tcp_OutSegs', 'node_netstat_Tcp_PassiveOpens',
	 'node_netstat_Tcp_RetransSegs', 'node_netstat_Udp6_InDatagrams', 'node_netstat_Udp6_InErrors',
	 'node_netstat_Udp6_NoPorts', 'node_netstat_Udp6_OutDatagrams', 'node_netstat_Udp6_RcvbufErrors',
	 'node_netstat_Udp6_SndbufErrors', 'node_netstat_UdpLite6_InErrors', 'node_netstat_UdpLite_InErrors',
	 'node_netstat_Udp_InDatagrams', 'node_netstat_Udp_InErrors', 'node_netstat_Udp_NoPorts',
	 'node_netstat_Udp_OutDatagrams', 'node_netstat_Udp_RcvbufErrors', 'node_netstat_Udp_SndbufErrors',
	 'node_network_address_assign_type', 'node_network_carrier_changes_total',
	 'node_network_carrier_down_changes_total', 'node_network_carrier_up_changes_total',
	 'node_network_device_id', 'node_network_dormant', 'node_network_flags',
	 'node_network_iface_id', 'node_network_iface_link', 'node_network_iface_link_mode',
	 'node_network_info', 'node_network_mtu_bytes', 'node_network_name_assign_type',
	 'node_network_net_dev_group', 'node_network_protocol_type', 'node_network_receive_bytes_total',
	 'node_network_receive_compressed_total', 'node_network_receive_drop_total',
	 'node_network_receive_errs_total', 'node_network_receive_fifo_total',
	 'node_network_receive_frame_total', 'node_network_receive_multicast_total',
	 'node_network_receive_packets_total', 'node_network_speed_bytes', 'node_network_transmit_bytes_total',
	 'node_network_transmit_carrier_total', 'node_network_transmit_colls_total',
	 'node_network_transmit_compressed_total', 'node_network_transmit_drop_total',
	 'node_network_transmit_errs_total', 'node_network_transmit_fifo_total',
	 'node_network_transmit_packets_total', 'node_network_transmit_queue_length',
	 'node_network_up', 'node_nf_conntrack_entries', 'node_nf_conntrack_entries_limit',
	 'node_procs_blocked', 'node_procs_running', 'node_schedstat_running_seconds_total',
	 'node_schedstat_timeslices_total', 'node_schedstat_waiting_seconds_total',
	 'node_scrape_collector_duration_seconds', 'node_scrape_collector_success',
	 'node_sockstat_FRAG6_inuse', 'node_sockstat_FRAG6_memory', 'node_sockstat_FRAG_inuse',
	 'node_sockstat_FRAG_memory', 'node_sockstat_RAW6_inuse', 'node_sockstat_RAW_inuse',
	 'node_sockstat_TCP6_inuse', 'node_sockstat_TCP_alloc', 'node_sockstat_TCP_inuse',
	 'node_sockstat_TCP_mem', 'node_sockstat_TCP_mem_bytes', 'node_sockstat_TCP_orphan',
	 'node_sockstat_TCP_tw', 'node_sockstat_UDP6_inuse', 'node_sockstat_UDPLITE6_inuse',
	 'node_sockstat_UDPLITE_inuse', 'node_sockstat_UDP_inuse', 'node_sockstat_UDP_mem',
	 'node_sockstat_UDP_mem_bytes', 'node_sockstat_sockets_used', 'node_softnet_dropped_total',
	 'node_softnet_processed_total', 'node_softnet_times_squeezed_total', 'node_textfile_scrape_error',
	 'node_time_seconds', 'node_timex_estimated_error_seconds', 'node_timex_frequency_adjustment_ratio',
	 'node_timex_loop_time_constant', 'node_timex_maxerror_seconds', 'node_timex_offset_seconds',
	 'node_timex_pps_calibration_total', 'node_timex_pps_error_total', 'node_timex_pps_frequency_hertz',
	 'node_timex_pps_jitter_seconds', 'node_timex_pps_jitter_total', 'node_timex_pps_shift_seconds',
	 'node_timex_pps_stability_exceeded_total', 'node_timex_pps_stability_hertz', 'node_timex_status',
	 'node_timex_sync_status', 'node_timex_tai_offset_seconds', 'node_timex_tick_seconds',
	 'node_udp_queues', 'node_uname_info', 'node_vmstat_oom_kill', 'node_vmstat_pgfault',
	 'node_vmstat_pgmajfault', 'node_vmstat_pgpgin', 'node_vmstat_pgpgout',
	 'node_vmstat_pswpin', 'node_vmstat_pswpout'
	}
	
	override void completeEMetricExpr_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		createProposals (slurm_exporters, "icons/metrics.png", context, acceptor)
		createProposals (pbs_exporters, "icons/metrics.png", context, acceptor)
		createProposals (node_exporters, "icons/metrics.png", context, acceptor)
	}
	
	override void completeEFunctionExpr_Function(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		createProposals (functions, "icons/function.png", context, acceptor)
	}
	
	override void completeEAggregationExpr_Oper(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		createProposals (aggregationOpers, "icons/aggregation.png", context, acceptor)
	}
	
	override void completeEVectorMatching_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		createProposals (vectorMatchings, "icons/vector.png", context, acceptor)
	}
	
	val aggregationOperModifiers = #{'by', 'without'}
	override void completeEAggregationExpr_Modifier(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		createProposals (aggregationOperModifiers, "icons/aggregation.png", context, acceptor)
	}
	
	val periodUnits = #{'ms', 's', 'm', 'h', 'd', 'w', 'y'}
	override void completeEPeriodSegment_Unit(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		createProposals (periodUnits, "icons/time.png", context, acceptor)
	}
		
	protected def void createProposals (Set<String> proposals, String imagePath, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		val Image image = getImage(imagePath)
		
		for (String proposal: proposals){
			val additionalProposalInfo = getAdditionalProposalInfo(proposal)
			val proposalText = proposal
			val displayText = proposal
			createNonEditableCompletionProposal(proposalText, displayText, image, context, additionalProposalInfo, acceptor);
		}
	}
	
	def void createNonEditableCompletionProposal(String proposalText, String displayText, Image image, 
		ContentAssistContext context, String additionalProposalInfo, ICompletionProposalAcceptor acceptor) {
		var ICompletionProposal proposal = createCompletionProposal(proposalText, displayText, image, context);
		if (proposal instanceof ConfigurableCompletionProposal) {
			val ConfigurableCompletionProposal configurable = proposal as ConfigurableCompletionProposal;
			configurable.setAdditionalProposalInfo(additionalProposalInfo);
			configurable.setAutoInsertable(false);
		}
		acceptor.accept(proposal)
	}
	
	override void completeEMetricExpr_Tags(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		System.out.println("Invoking content assist for completeEMetricExpr_Tags property")
		if (model instanceof EMetricExpr){
			var metric = model as EMetricExpr
			createProposals (getMetricParameters(metric.type.type), "icons/metrics.png", context, acceptor)
		}
	}
		
	def getMetricParameters(String metric) {
		var Set<String> parameters = #{}
		//Slurm exporter
		if (metric.equals('slurm_job_state'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_walltime_used'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_cpu_n'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_memory_virtual_max'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_memory_physical_max'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_queued'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_exit_code'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_job_exit_signal'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_partition'}
		else if (metric.equals('slurm_partition_availability'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'partition'}
		else if (metric.equals('slurm_partition_cores_idle'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'partition'}
		else if (metric.equals('slurm_partition_cores_allocated'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'partition'}
		else if (metric.equals('slurm_partition_cores_total'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'partition'}
		
		//PBS exporter
		else if (metric.equals('pbs_job_state'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_priority'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_walltime_used'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_walltime_max'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_walltime_remaining'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_cpu_time'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_cpu_n'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_mem_virtual'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_mem_physical'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_time_queued'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_job_exit_status'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'job_id', 'job_name', 'job_user', 'job_queue'}
		else if (metric.equals('pbs_queue_enabled'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_started'))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_total' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_max' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_queued' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_running' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_held' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_waiting' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_transit' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_exiting' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		else if (metric.equals('pbs_queue_jobs_complete' ))
			parameters = #{'monitoring_id', 'deployment_label', 'hpc', 'queue_name', 'queue_type'}
		
		//Node exporter
		else if (metric.equals('node_arp_entries'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_boot_time_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_context_switches_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_cooling_device_cur_state'))
			parameters = #{'deployment_label','instance_name','monitoring_id','name','type'}
		else if (metric.equals('node_cpu_guest_seconds_total'))
			parameters = #{'cpu','deployment_label','instance_name','mode','monitoring_id'}
		else if (metric.equals('node_cpu_seconds_total'))
			parameters = #{'cpu','deployment_label','instance_name','mode','monitoring_id'}
		else if (metric.equals('node_disk_io_now'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_io_time_seconds_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_io_time_weighted_seconds_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_read_bytes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_read_time_seconds_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_reads_completed_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_reads_merged_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_write_time_seconds_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_writes_completed_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_writes_merged_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_disk_written_bytes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_entropy_available_bits'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_entropy_pool_size_bits'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_exporter_build_info'))
			parameters = #{'branch','goversion','revision','version'}
		else if (metric.equals('node_filefd_allocated'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_filefd_maximum'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_filesystem_avail_bytes'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_filesystem_device_error'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_filesystem_files'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_filesystem_files_free'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_filesystem_free_bytes'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_filesystem_readonly'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_filesystem_size_bytes'))
			parameters = #{'device','fstype','deployment_label','instance_name','monitoring_id','mountpoint'}
		else if (metric.equals('node_forks_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_intr_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_load1'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_load15'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_load5'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Active_anon_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Active_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Active_file_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_AnonHugePages_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_AnonPages_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Bounce_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Buffers_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Cached_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_CmaFree_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_CmaTotal_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_CommitLimit_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Committed_AS_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_DirectMap1G_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_DirectMap2M_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_DirectMap4k_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Dirty_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_HardwareCorrupted_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_HugePages_Free'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_HugePages_Rsvd'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_HugePages_Surp'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_HugePages_Total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Hugepagesize_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Inactive_anon_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Inactive_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Inactive_file_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_KernelStack_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Mapped_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_MemAvailable_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_MemFree_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_MemTotal_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Mlocked_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_NFS_Unstable_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_PageTables_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_SReclaimable_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_SUnreclaim_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_ShmemHugePages_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_ShmemPmdMapped_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Shmem_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Slab_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_SwapCached_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_SwapFree_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_SwapTotal_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Unevictable_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_VmallocChunk_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_VmallocTotal_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_VmallocUsed_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_WritebackTmp_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_memory_Writeback_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Icmp6_InErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Icmp6_InMsgs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Icmp6_OutMsgs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Icmp_InErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Icmp_InMsgs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Icmp_OutMsgs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Ip6_InOctets'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Ip6_OutOctets'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_IpExt_InOctets'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_IpExt_OutOctets'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Ip_Forwarding'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_TcpExt_ListenDrops'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_TcpExt_ListenOverflows'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_TcpExt_SyncookiesFailed'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_TcpExt_SyncookiesRecv'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_TcpExt_SyncookiesSent'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_TcpExt_TCPSynRetrans'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_ActiveOpens'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_CurrEstab'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_InErrs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_InSegs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_OutRsts'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_OutSegs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_PassiveOpens'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Tcp_RetransSegs'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp6_InDatagrams'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp6_InErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp6_NoPorts'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp6_OutDatagrams'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp6_RcvbufErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp6_SndbufErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_UdpLite6_InErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_UdpLite_InErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp_InDatagrams'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp_InErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp_NoPorts'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp_OutDatagrams'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp_RcvbufErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_netstat_Udp_SndbufErrors'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_address_assign_type'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_carrier_changes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_carrier_down_changes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_carrier_up_changes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_device_id'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		if (metric.equals('node_network_dormant'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_flags'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_iface_id'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_iface_link'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_iface_link_mode'))
			parameters = #{'device','deploelse ifent_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_info'))
			parameters = #{'address','broadcast','device','duplex','deployment_label','ifalias','instance_name','monitoring_id','operstate'}
		else if (metric.equals('node_network_mtu_bytes'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_name_assign_type'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_net_dev_group'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_protocol_type'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_bytes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_compressed_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_drop_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_errs_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_fifo_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_frame_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_multicast_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_receive_packets_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_speed_bytes'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_bytes_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_carrier_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_colls_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_compressed_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_drop_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_errs_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_fifo_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_packets_total'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_transmit_queue_length'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_network_up'))
			parameters = #{'device','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_nf_conntrack_entries'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_nf_conntrack_entries_limit'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_procs_blocked'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_procs_running'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_schedstat_running_seconds_total'))
			parameters = #{'cpu','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_schedstat_timeslices_total'))
			parameters = #{'cpu','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_schedstat_waiting_seconds_total'))
			parameters = #{'cpu','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_scrape_collector_duration_seconds'))
			parameters = #{'collector','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_scrape_collector_success'))
			parameters = #{'collector','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_FRAG6_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_FRAG6_memory'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_FRAG_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_FRAG_memory'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_RAW6_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_RAW_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP6_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP_alloc'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP_mem'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP_mem_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP_orphan'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_TCP_tw'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_UDP6_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_UDPLITE6_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_UDPLITE_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_UDP_inuse'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_UDP_mem'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_UDP_mem_bytes'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_sockstat_sockets_used'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_softnet_dropped_total'))
			parameters = #{'cpu','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_softnet_processed_total'))
			parameters = #{'cpu','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_softnet_times_squeezed_total'))
			parameters = #{'cpu','deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_textfile_scrape_error'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_time_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_estimated_error_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_frequency_adjustment_ratio'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_loop_time_constant'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_maxerror_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_offset_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_calibration_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_error_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_frequency_hertz'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_jitter_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_jitter_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_shift_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_stability_exceeded_total'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_pps_stability_hertz'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_status'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_sync_status'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_tai_offset_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_timex_tick_seconds'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_udp_queues'))
			parameters = #{'deployment_label','instance_name','ip','monitoring_id','queue'}
		else if (metric.equals('node_uname_info'))
			parameters = #{'domainname','machine','nodename','release','sysname','version'}
		else if (metric.equals('node_vmstat_oom_kill'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_vmstat_pgfault'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_vmstat_pgmajfault'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_vmstat_pgpgin'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_vmstat_pgpgout'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_vmstat_pswpin'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		else if (metric.equals('node_vmstat_pswpout'))
			parameters = #{'deployment_label','instance_name','monitoring_id'}
		
		return parameters;
	}
			
	def setAdditionalProposalInfo(ICompletionProposal proposal, String info) {
		if (proposal instanceof ConfigurableCompletionProposal) {
			val ConfigurableCompletionProposal configurable = proposal as ConfigurableCompletionProposal;
			configurable.setAdditionalProposalInfo(info);
		}
	}
	
	def static ParserRule findParserRule(EObject obj) {
		if (obj === null){
			return null;
		} else if (obj instanceof ParserRule) {
			return obj as ParserRule;
		} else {
			return findParserRule(obj.eContainer());
		}
	}
}
