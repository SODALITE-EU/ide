/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.sodalite.sdl.ansible.YAMLOutputConfigurationProvider;
import org.sodalite.sdl.ansible.ansibleDsl.EAndExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EAsynchronousSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EBase;
import org.sodalite.sdl.ansible.ansibleDsl.EBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EBlockAndRoleErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EBlockTask;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanAnsible;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EComposedValue;
import org.sodalite.sdl.ansible.ansibleDsl.EComposedValueJinja;
import org.sodalite.sdl.ansible.ansibleDsl.ECondition;
import org.sodalite.sdl.ansible.ansibleDsl.EDelegation;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionary;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryInLine;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryOfListIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPair;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPairJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EElementOfListIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EElifBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EExecution;
import org.sodalite.sdl.ansible.ansibleDsl.EExecutionExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EExternalFileInclusion;
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EForStatement;
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionCallOrVariable;
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionInput;
import org.sodalite.sdl.ansible.ansibleDsl.EHandler;
import org.sodalite.sdl.ansible.ansibleDsl.EIfBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EIfStatement;
import org.sodalite.sdl.ansible.ansibleDsl.EIndexOrLoopVariable;
import org.sodalite.sdl.ansible.ansibleDsl.EIsExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaAndString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluation;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluationWithoutBrackets;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaOrString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaStatement;
import org.sodalite.sdl.ansible.ansibleDsl.EListInLine;
import org.sodalite.sdl.ansible.ansibleDsl.EListIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EListJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EListOfConditions;
import org.sodalite.sdl.ansible.ansibleDsl.EListPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ELoop;
import org.sodalite.sdl.ansible.ansibleDsl.ELoopControl;
import org.sodalite.sdl.ansible.ansibleDsl.ELoopOverList;
import org.sodalite.sdl.ansible.ansibleDsl.EModuleCall;
import org.sodalite.sdl.ansible.ansibleDsl.EMultiLineExpression;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiable;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedTopic;
import org.sodalite.sdl.ansible.ansibleDsl.ENumber;
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EOperation;
import org.sodalite.sdl.ansible.ansibleDsl.EOrExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EParenthesisedExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EPlay;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybook;
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariable;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusion;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusions;
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueJinja;
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueWithoutString;
import org.sodalite.sdl.ansible.ansibleDsl.ESliceNotation;
import org.sodalite.sdl.ansible.ansibleDsl.ESpecialVariable;
import org.sodalite.sdl.ansible.ansibleDsl.ESquareBracketElement;
import org.sodalite.sdl.ansible.ansibleDsl.EStringPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ETailElement;
import org.sodalite.sdl.ansible.ansibleDsl.ETask;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandlerErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.ETruthExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EUntil;
import org.sodalite.sdl.ansible.ansibleDsl.EValueJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassedToJinjaExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EValueWithoutString;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.EWithLookup;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AnsibleDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<EPlaybook> _filter = Iterables.<EPlaybook>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EPlaybook.class);
    for (final EPlaybook e : _filter) {
      {
        String scriptFilePath = "";
        String[] _segments = resource.getURI().segments();
        int _size = ((List<String>)Conversions.doWrapArray(resource.getURI().segments())).size();
        int _minus = (_size - 1);
        String[] _copyOfRange = Arrays.<String>copyOfRange(_segments, 2, _minus);
        for (final String segment : _copyOfRange) {
          scriptFilePath = ((scriptFilePath + "/") + segment);
        }
        scriptFilePath = scriptFilePath.replaceAll("%20", " ");
        String scriptFileName = resource.getURI().lastSegment().toString();
        String outFileBase = scriptFileName.substring(0, scriptFileName.lastIndexOf("."));
        fsa.generateFile((((scriptFilePath + "/") + outFileBase) + ".yaml"), YAMLOutputConfigurationProvider.YAML_OUTPUT, this.compilePlays(e));
      }
    }
  }
  
  public CharSequence compilePlays(final EPlaybook playbook) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EPlay> _plays = playbook.getPlays();
      for(final EPlay play : _plays) {
        CharSequence _compilePlay = this.compilePlay(play, "  ");
        _builder.append(_compilePlay);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compilePlay(final EPlay play, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EStringPassed _name = play.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        _builder.append("- name: ");
        String _compileStringPassed = this.compileStringPassed(play.getName(), space, false);
        _builder.append(_compileStringPassed);
        _builder.newLineIfNotEmpty();
        {
          EStringPassed _hosts = play.getHosts();
          boolean _tripleNotEquals_1 = (_hosts != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("hosts: ");
            String _compileStringPassed_1 = this.compileStringPassed(play.getHosts(), space, false);
            _builder.append(_compileStringPassed_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EExternalFileInclusion _external_file_inclusion = play.getExternal_file_inclusion();
          boolean _tripleNotEquals_2 = (_external_file_inclusion != null);
          if (_tripleNotEquals_2) {
            CharSequence _compileExternalFileInclusion = this.compileExternalFileInclusion(play.getExternal_file_inclusion(), space, false);
            _builder.append(_compileExternalFileInclusion);
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        {
          EStringPassed _hosts_1 = play.getHosts();
          boolean _tripleNotEquals_3 = (_hosts_1 != null);
          if (_tripleNotEquals_3) {
            _builder.append("- hosts: ");
            String _compileStringPassed_2 = this.compileStringPassed(play.getHosts(), space, false);
            _builder.append(_compileStringPassed_2);
            _builder.newLineIfNotEmpty();
            {
              EExternalFileInclusion _external_file_inclusion_1 = play.getExternal_file_inclusion();
              boolean _tripleNotEquals_4 = (_external_file_inclusion_1 != null);
              if (_tripleNotEquals_4) {
                CharSequence _compileExternalFileInclusion_1 = this.compileExternalFileInclusion(play.getExternal_file_inclusion(), space, false);
                _builder.append(_compileExternalFileInclusion_1);
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            {
              EExternalFileInclusion _external_file_inclusion_2 = play.getExternal_file_inclusion();
              boolean _tripleNotEquals_5 = (_external_file_inclusion_2 != null);
              if (_tripleNotEquals_5) {
                CharSequence _compileExternalFileInclusion_2 = this.compileExternalFileInclusion(play.getExternal_file_inclusion(), space, true);
                _builder.append(_compileExternalFileInclusion_2);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    CharSequence _compileBaseAttributes = this.compileBaseAttributes(play, space);
    _builder.append(_compileBaseAttributes);
    _builder.newLineIfNotEmpty();
    {
      EPlayExeSettings _play_exe_settings = play.getPlay_exe_settings();
      boolean _tripleNotEquals_6 = (_play_exe_settings != null);
      if (_tripleNotEquals_6) {
        CharSequence _compilePlayExeSettings = this.compilePlayExeSettings(play.getPlay_exe_settings(), space);
        _builder.append(_compilePlayExeSettings);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPlayErrorHandling _error_handling = play.getError_handling();
      boolean _tripleNotEquals_7 = (_error_handling != null);
      if (_tripleNotEquals_7) {
        CharSequence _compilePlayErrorHandling = this.compilePlayErrorHandling(play.getError_handling(), space);
        _builder.append(_compilePlayErrorHandling);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EFactsSettings _facts_settings = play.getFacts_settings();
      boolean _tripleNotEquals_8 = (_facts_settings != null);
      if (_tripleNotEquals_8) {
        CharSequence _compileFactsSettings = this.compileFactsSettings(play.getFacts_settings(), space);
        _builder.append(_compileFactsSettings);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EListPassed _vars_files = play.getVars_files();
      boolean _tripleNotEquals_9 = (_vars_files != null);
      if (_tripleNotEquals_9) {
        _builder.append(space);
        _builder.append("vars_files: ");
        Serializable _compileListPassed = this.compileListPassed(play.getVars_files(), space);
        _builder.append(_compileListPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EListPassed _vars_prompt = play.getVars_prompt();
      boolean _tripleNotEquals_10 = (_vars_prompt != null);
      if (_tripleNotEquals_10) {
        _builder.append(space);
        _builder.append("vars_prompt: ");
        Serializable _compileListPassed_1 = this.compileListPassed(play.getVars_prompt(), space);
        _builder.append(_compileListPassed_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EBooleanPassed _force_handlers = play.getForce_handlers();
      boolean _tripleNotEquals_11 = (_force_handlers != null);
      if (_tripleNotEquals_11) {
        _builder.append(space);
        _builder.append("force_handlers: ");
        String _compileBooleanPassed = this.compileBooleanPassed(play.getForce_handlers(), space);
        _builder.append(_compileBooleanPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ERoleInclusions _roles_inclusions = play.getRoles_inclusions();
      boolean _tripleNotEquals_12 = (_roles_inclusions != null);
      if (_tripleNotEquals_12) {
        _builder.append(space);
        _builder.append("roles:");
        _builder.newLineIfNotEmpty();
        {
          EList<ERoleInclusion> _roles = play.getRoles_inclusions().getRoles();
          for(final ERoleInclusion role : _roles) {
            CharSequence _compileRoleInclusion = this.compileRoleInclusion(role, space.concat("  "));
            _builder.append(_compileRoleInclusion);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size = play.getPre_tasks_list().size();
      boolean _tripleNotEquals_13 = (_size != 0);
      if (_tripleNotEquals_13) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("pre_tasks:");
        _builder.newLineIfNotEmpty();
        {
          EList<EBlockTask> _pre_tasks_list = play.getPre_tasks_list();
          for(final EBlockTask blockTask : _pre_tasks_list) {
            _builder.newLine();
            CharSequence _compileBlockTask = this.compileBlockTask(blockTask, space.concat("  "));
            _builder.append(_compileBlockTask);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_1 = play.getTasks_list().size();
      boolean _tripleNotEquals_14 = (_size_1 != 0);
      if (_tripleNotEquals_14) {
        _builder.append(space);
        _builder.append("tasks:");
        _builder.newLineIfNotEmpty();
        {
          EList<EBlockTask> _tasks_list = play.getTasks_list();
          for(final EBlockTask blockTask_1 : _tasks_list) {
            CharSequence _compileBlockTask_1 = this.compileBlockTask(blockTask_1, space.concat("  "));
            _builder.append(_compileBlockTask_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_2 = play.getPost_tasks_list().size();
      boolean _tripleNotEquals_15 = (_size_2 != 0);
      if (_tripleNotEquals_15) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("post_tasks:");
        _builder.newLineIfNotEmpty();
        {
          EList<EBlockTask> _post_tasks_list = play.getPost_tasks_list();
          for(final EBlockTask blockTask_2 : _post_tasks_list) {
            _builder.newLine();
            CharSequence _compileBlockTask_2 = this.compileBlockTask(blockTask_2, space.concat("  "));
            _builder.append(_compileBlockTask_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_3 = play.getHandlers().size();
      boolean _tripleNotEquals_16 = (_size_3 != 0);
      if (_tripleNotEquals_16) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("handlers:");
        _builder.newLineIfNotEmpty();
        {
          EList<EHandler> _handlers = play.getHandlers();
          for(final EHandler handler : _handlers) {
            _builder.newLine();
            CharSequence _compileTaskHandler = this.compileTaskHandler(handler, space.concat("  "));
            _builder.append(_compileTaskHandler);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileExternalFileInclusion(final EExternalFileInclusion externalFileInclusion, final String space, final boolean isFirstElementOfPlay) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((externalFileInclusion != null)) {
        {
          if ((!isFirstElementOfPlay)) {
            {
              String _import_playbook = externalFileInclusion.getImport_playbook();
              boolean _tripleNotEquals = (_import_playbook != null);
              if (_tripleNotEquals) {
                _builder.append(space);
                _builder.append("import_playbook: ");
                String _import_playbook_1 = externalFileInclusion.getImport_playbook();
                _builder.append(_import_playbook_1);
                _builder.newLineIfNotEmpty();
              } else {
                String _include = externalFileInclusion.getInclude();
                boolean _tripleNotEquals_1 = (_include != null);
                if (_tripleNotEquals_1) {
                  _builder.append(space);
                  _builder.append("include: ");
                  String _include_1 = externalFileInclusion.getInclude();
                  _builder.append(_include_1);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          } else {
            if (isFirstElementOfPlay) {
              {
                String _import_playbook_2 = externalFileInclusion.getImport_playbook();
                boolean _tripleNotEquals_2 = (_import_playbook_2 != null);
                if (_tripleNotEquals_2) {
                  _builder.append("- import_playbook: ");
                  String _import_playbook_3 = externalFileInclusion.getImport_playbook();
                  _builder.append(_import_playbook_3);
                  _builder.newLineIfNotEmpty();
                } else {
                  String _include_2 = externalFileInclusion.getInclude();
                  boolean _tripleNotEquals_3 = (_include_2 != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("- include: ");
                    String _include_3 = externalFileInclusion.getInclude();
                    _builder.append(_include_3);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        {
          ECondition _when_expression = externalFileInclusion.getWhen_expression();
          boolean _tripleNotEquals_4 = (_when_expression != null);
          if (_tripleNotEquals_4) {
            _builder.append(space);
            _builder.append("when: ");
            String _compileCondition = this.compileCondition(externalFileInclusion.getWhen_expression(), space);
            _builder.append(_compileCondition);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileRoleInclusion(final ERoleInclusion roleInclusion, final String space) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compileRoleName(ERoleName, String, boolean) from the type AnsibleDslGenerator refers to the missing type ERoleName");
  }
  
  public CharSequence compileBaseAttributes(final EBase base, final String space) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compileCollectionListPassed(ECollectionListPassed, String) from the type AnsibleDslGenerator refers to the missing type ECollectionListPassed");
  }
  
  public CharSequence compilePlayExeSettings(final EPlayExeSettings playExeSettings, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EStringPassed _strategy = playExeSettings.getStrategy();
      boolean _tripleNotEquals = (_strategy != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("strategy: ");
        String _compileStringPassed = this.compileStringPassed(playExeSettings.getStrategy(), space, false);
        _builder.append(_compileStringPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EValuePassed _serial_list = playExeSettings.getSerial_list();
      boolean _tripleNotEquals_1 = (_serial_list != null);
      if (_tripleNotEquals_1) {
        _builder.append(space);
        _builder.append("serial: ");
        Object _compileValuePassed = this.compileValuePassed(playExeSettings.getSerial_list(), space, false);
        _builder.append(_compileValuePassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EStringPassed _order = playExeSettings.getOrder();
      boolean _tripleNotEquals_2 = (_order != null);
      if (_tripleNotEquals_2) {
        _builder.append(space);
        _builder.append("order: ");
        String _compileStringPassed_1 = this.compileStringPassed(playExeSettings.getOrder(), space, false);
        _builder.append(_compileStringPassed_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ENumberPassed _throttle = playExeSettings.getThrottle();
      boolean _tripleNotEquals_3 = (_throttle != null);
      if (_tripleNotEquals_3) {
        _builder.append(space);
        _builder.append("throttle: ");
        String _compileNumberPassed = this.compileNumberPassed(playExeSettings.getThrottle(), space);
        _builder.append(_compileNumberPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EBooleanPassed _run_once = playExeSettings.getRun_once();
      boolean _tripleNotEquals_4 = (_run_once != null);
      if (_tripleNotEquals_4) {
        _builder.append(space);
        _builder.append("run_once: ");
        String _compileBooleanPassed = this.compileBooleanPassed(playExeSettings.getRun_once(), space);
        _builder.append(_compileBooleanPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compilePlayErrorHandling(final EPlayErrorHandling playErrorHandling, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ENumberPassed _max_fail_percentage = playErrorHandling.getMax_fail_percentage();
      boolean _tripleNotEquals = (_max_fail_percentage != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("max_fail_percentage: ");
        String _compileNumberPassed = this.compileNumberPassed(playErrorHandling.getMax_fail_percentage(), space);
        _builder.append(_compileNumberPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EBooleanPassed _any_errors_fatal = playErrorHandling.getAny_errors_fatal();
      boolean _tripleNotEquals_1 = (_any_errors_fatal != null);
      if (_tripleNotEquals_1) {
        _builder.append(space);
        _builder.append("any_errors_fatal: ");
        String _compileBooleanPassed = this.compileBooleanPassed(playErrorHandling.getAny_errors_fatal(), space);
        _builder.append(_compileBooleanPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EBooleanPassed _ignore_errors = playErrorHandling.getIgnore_errors();
      boolean _tripleNotEquals_2 = (_ignore_errors != null);
      if (_tripleNotEquals_2) {
        _builder.append(space);
        _builder.append("ignore_errors: ");
        String _compileBooleanPassed_1 = this.compileBooleanPassed(playErrorHandling.getIgnore_errors(), space);
        _builder.append(_compileBooleanPassed_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EBooleanPassed _ignore_unreachable = playErrorHandling.getIgnore_unreachable();
      boolean _tripleNotEquals_3 = (_ignore_unreachable != null);
      if (_tripleNotEquals_3) {
        _builder.append(space);
        _builder.append("ignore_unreachable: ");
        String _compileBooleanPassed_2 = this.compileBooleanPassed(playErrorHandling.getIgnore_unreachable(), space);
        _builder.append(_compileBooleanPassed_2);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileFactsSettings(final EFactsSettings factsSettings, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EBooleanPassed _gather_facts = factsSettings.getGather_facts();
      boolean _tripleNotEquals = (_gather_facts != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("gather_facts: ");
        String _compileBooleanPassed = this.compileBooleanPassed(factsSettings.getGather_facts(), space);
        _builder.append(_compileBooleanPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EValuePassed _gather_subset = factsSettings.getGather_subset();
      boolean _tripleNotEquals_1 = (_gather_subset != null);
      if (_tripleNotEquals_1) {
        _builder.append(space);
        _builder.append("gather_subset: ");
        Object _compileValuePassed = this.compileValuePassed(factsSettings.getGather_subset(), space, false);
        _builder.append(_compileValuePassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ENumberPassed _gather_timeout = factsSettings.getGather_timeout();
      boolean _tripleNotEquals_2 = (_gather_timeout != null);
      if (_tripleNotEquals_2) {
        _builder.append(space);
        _builder.append("gather_timeout: ");
        String _compileNumberPassed = this.compileNumberPassed(factsSettings.getGather_timeout(), space);
        _builder.append(_compileNumberPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EStringPassed _fact_path = factsSettings.getFact_path();
      boolean _tripleNotEquals_3 = (_fact_path != null);
      if (_tripleNotEquals_3) {
        _builder.append(space);
        _builder.append("fact_path: ");
        String _compileStringPassed = this.compileStringPassed(factsSettings.getFact_path(), space, false);
        _builder.append(_compileStringPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileBlockTask(final EBlockTask blockTask, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((blockTask instanceof EBlock)) {
        CharSequence _compileBlock = this.compileBlock(((EBlock)blockTask), space);
        _builder.append(_compileBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((blockTask instanceof ETask)) {
        CharSequence _compileTaskHandler = this.compileTaskHandler(((ETaskHandler)blockTask), space);
        _builder.append(_compileTaskHandler);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileBlock(final EBlock block, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EStringPassed _name = block.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("- name: ");
        String _compileStringPassed = this.compileStringPassed(block.getName(), space.concat("  "), false);
        _builder.append(_compileStringPassed);
        _builder.newLineIfNotEmpty();
        String _concat = space.concat("  ");
        _builder.append(_concat);
        _builder.append("block:");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append(space);
        _builder.append("- block:");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _size = block.getTasks().size();
      boolean _tripleNotEquals_1 = (_size != 0);
      if (_tripleNotEquals_1) {
        {
          EList<ETask> _tasks = block.getTasks();
          for(final ETask task : _tasks) {
            CharSequence _compileTaskHandler = this.compileTaskHandler(task, space.concat("  ").concat("  "));
            _builder.append(_compileTaskHandler);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_1 = block.getRescue_tasks().size();
      boolean _tripleNotEquals_2 = (_size_1 != 0);
      if (_tripleNotEquals_2) {
        String _concat_1 = space.concat("  ");
        _builder.append(_concat_1);
        _builder.append("rescue: ");
        _builder.newLineIfNotEmpty();
        {
          EList<ETask> _rescue_tasks = block.getRescue_tasks();
          for(final ETask task_1 : _rescue_tasks) {
            CharSequence _compileTaskHandler_1 = this.compileTaskHandler(task_1, space.concat("  ").concat("  "));
            _builder.append(_compileTaskHandler_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_2 = block.getAlways_tasks().size();
      boolean _tripleNotEquals_3 = (_size_2 != 0);
      if (_tripleNotEquals_3) {
        String _concat_2 = space.concat("  ");
        _builder.append(_concat_2);
        _builder.append("always: ");
        _builder.newLineIfNotEmpty();
        {
          EList<ETask> _always_tasks = block.getAlways_tasks();
          for(final ETask task_2 : _always_tasks) {
            CharSequence _compileTaskHandler_2 = this.compileTaskHandler(task_2, space.concat("  ").concat("  "));
            _builder.append(_compileTaskHandler_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    CharSequence _compileBaseAttributes = this.compileBaseAttributes(block, space.concat("  "));
    _builder.append(_compileBaseAttributes);
    _builder.newLineIfNotEmpty();
    CharSequence _compileExecutionAttributes = this.compileExecutionAttributes(block, space.concat("  "));
    _builder.append(_compileExecutionAttributes);
    _builder.newLineIfNotEmpty();
    {
      EBlockAndRoleErrorHandling _error_handling = block.getError_handling();
      boolean _tripleNotEquals_4 = (_error_handling != null);
      if (_tripleNotEquals_4) {
        CharSequence _compileBlockAndRoleErrorHandling = this.compileBlockAndRoleErrorHandling(block.getError_handling(), space.concat("  "));
        _builder.append(_compileBlockAndRoleErrorHandling);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileBlockAndRoleErrorHandling(final EBlockAndRoleErrorHandling blockAndRoleErrorHandling, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((blockAndRoleErrorHandling != null)) {
        {
          EBooleanPassed _any_errors_fatal = blockAndRoleErrorHandling.getAny_errors_fatal();
          boolean _tripleNotEquals = (_any_errors_fatal != null);
          if (_tripleNotEquals) {
            _builder.append(space);
            _builder.append("any_errors_fatal: ");
            String _compileBooleanPassed = this.compileBooleanPassed(blockAndRoleErrorHandling.getAny_errors_fatal(), space);
            _builder.append(_compileBooleanPassed);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _ignore_errors = blockAndRoleErrorHandling.getIgnore_errors();
          boolean _tripleNotEquals_1 = (_ignore_errors != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("ignore_errors: ");
            String _compileBooleanPassed_1 = this.compileBooleanPassed(blockAndRoleErrorHandling.getIgnore_errors(), space);
            _builder.append(_compileBooleanPassed_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _ignore_unreachable = blockAndRoleErrorHandling.getIgnore_unreachable();
          boolean _tripleNotEquals_2 = (_ignore_unreachable != null);
          if (_tripleNotEquals_2) {
            _builder.append(space);
            _builder.append("ignore_unreachable: ");
            String _compileBooleanPassed_2 = this.compileBooleanPassed(blockAndRoleErrorHandling.getIgnore_unreachable(), space);
            _builder.append(_compileBooleanPassed_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileExecutionAttributes(final EExecution execution, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EExecutionExeSettings _exe_settings = execution.getExe_settings();
      boolean _tripleNotEquals = (_exe_settings != null);
      if (_tripleNotEquals) {
        {
          ENumberPassed _throttle = execution.getExe_settings().getThrottle();
          boolean _notEquals = (!Objects.equal(_throttle, Integer.valueOf(0)));
          if (_notEquals) {
            _builder.append(space);
            _builder.append("throttle: ");
            String _compileNumberPassed = this.compileNumberPassed(execution.getExe_settings().getThrottle(), space);
            _builder.append(_compileNumberPassed);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _run_once = execution.getExe_settings().getRun_once();
          boolean _tripleNotEquals_1 = (_run_once != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("run_once: ");
            String _compileBooleanPassed = this.compileBooleanPassed(execution.getExe_settings().getRun_once(), space);
            _builder.append(_compileBooleanPassed);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EDelegation _delegation = execution.getDelegation();
      boolean _tripleNotEquals_2 = (_delegation != null);
      if (_tripleNotEquals_2) {
        {
          EStringPassed _delegate_to = execution.getDelegation().getDelegate_to();
          boolean _tripleNotEquals_3 = (_delegate_to != null);
          if (_tripleNotEquals_3) {
            _builder.append(space);
            _builder.append("delegate_to: ");
            String _compileStringPassed = this.compileStringPassed(execution.getDelegation().getDelegate_to(), space, false);
            _builder.append(_compileStringPassed);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _delegate_facts = execution.getDelegation().getDelegate_facts();
          boolean _tripleNotEquals_4 = (_delegate_facts != null);
          if (_tripleNotEquals_4) {
            _builder.append(space);
            _builder.append("delegate_facts: ");
            String _compileBooleanPassed_1 = this.compileBooleanPassed(execution.getDelegation().getDelegate_facts(), space);
            _builder.append(_compileBooleanPassed_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      ECondition _when_expression = execution.getWhen_expression();
      boolean _tripleNotEquals_5 = (_when_expression != null);
      if (_tripleNotEquals_5) {
        _builder.append(space);
        _builder.append("when: ");
        String _compileCondition = this.compileCondition(execution.getWhen_expression(), space);
        _builder.append(_compileCondition);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String taskHandlerName(final ETaskHandler taskHandler, final String space) {
    if ((taskHandler instanceof ETask)) {
      EStringPassed _name = ((ETask)taskHandler).getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        return this.compileStringPassed(((ETask)taskHandler).getName(), space, false);
      } else {
        return null;
      }
    } else {
      if ((taskHandler instanceof EHandler)) {
        String _name_1 = ((EHandler)taskHandler).getName();
        boolean _tripleNotEquals_1 = (_name_1 != null);
        if (_tripleNotEquals_1) {
          return "\"".concat(this.compileString(((EHandler)taskHandler).getName())).concat("\"");
        } else {
          return null;
        }
      }
    }
    return null;
  }
  
  public CharSequence compileTaskHandler(final ETaskHandler taskHandler, final String space) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field value is undefined for the type EParameter"
      + "\nThe method or field value is undefined for the type EParameter");
  }
  
  public CharSequence compileTaskHandlerAttributes(final ETaskHandler taskHandler, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ETaskHandlerErrorHandling _error_handling = taskHandler.getError_handling();
      boolean _tripleNotEquals = (_error_handling != null);
      if (_tripleNotEquals) {
        {
          ECondition _changed_when = taskHandler.getError_handling().getChanged_when();
          boolean _tripleNotEquals_1 = (_changed_when != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("change_when: ");
            String _compileCondition = this.compileCondition(taskHandler.getError_handling().getChanged_when(), space);
            _builder.append(_compileCondition);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ECondition _failed_when = taskHandler.getError_handling().getFailed_when();
          boolean _tripleNotEquals_2 = (_failed_when != null);
          if (_tripleNotEquals_2) {
            _builder.append(space);
            _builder.append("failed_when: ");
            String _compileCondition_1 = this.compileCondition(taskHandler.getError_handling().getFailed_when(), space);
            _builder.append(_compileCondition_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _any_errors_fatal = taskHandler.getError_handling().getAny_errors_fatal();
          boolean _tripleNotEquals_3 = (_any_errors_fatal != null);
          if (_tripleNotEquals_3) {
            _builder.append(space);
            _builder.append("any_errors_fatal: ");
            String _compileBooleanPassed = this.compileBooleanPassed(taskHandler.getError_handling().getAny_errors_fatal(), space);
            _builder.append(_compileBooleanPassed);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _ignore_errors = taskHandler.getError_handling().getIgnore_errors();
          boolean _tripleNotEquals_4 = (_ignore_errors != null);
          if (_tripleNotEquals_4) {
            _builder.append(space);
            _builder.append("ignore_errors: ");
            String _compileBooleanPassed_1 = this.compileBooleanPassed(taskHandler.getError_handling().getIgnore_errors(), space);
            _builder.append(_compileBooleanPassed_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EBooleanPassed _ignore_unreachable = taskHandler.getError_handling().getIgnore_unreachable();
          boolean _tripleNotEquals_5 = (_ignore_unreachable != null);
          if (_tripleNotEquals_5) {
            _builder.append(space);
            _builder.append("ignore_unreachable: ");
            String _compileBooleanPassed_2 = this.compileBooleanPassed(taskHandler.getError_handling().getIgnore_unreachable(), space);
            _builder.append(_compileBooleanPassed_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EStringPassed _action = taskHandler.getAction();
      boolean _tripleNotEquals_6 = (_action != null);
      if (_tripleNotEquals_6) {
        _builder.append(space);
        _builder.append("action: ");
        String _compileStringPassed = this.compileStringPassed(taskHandler.getAction(), space, false);
        _builder.append(_compileStringPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EAsynchronousSettings _asynchronous_settings = taskHandler.getAsynchronous_settings();
      boolean _tripleNotEquals_7 = (_asynchronous_settings != null);
      if (_tripleNotEquals_7) {
        {
          ENumberPassed _async = taskHandler.getAsynchronous_settings().getAsync();
          boolean _tripleNotEquals_8 = (_async != null);
          if (_tripleNotEquals_8) {
            _builder.append(space);
            _builder.append("async: ");
            String _compileNumberPassed = this.compileNumberPassed(taskHandler.getAsynchronous_settings().getAsync(), space);
            _builder.append(_compileNumberPassed);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ENumberPassed _poll = taskHandler.getAsynchronous_settings().getPoll();
          boolean _tripleNotEquals_9 = (_poll != null);
          if (_tripleNotEquals_9) {
            _builder.append(space);
            _builder.append("poll: ");
            String _compileNumberPassed_1 = this.compileNumberPassed(taskHandler.getAsynchronous_settings().getPoll(), space);
            _builder.append(_compileNumberPassed_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EDictionaryPassed _args = taskHandler.getArgs();
      boolean _tripleNotEquals_10 = (_args != null);
      if (_tripleNotEquals_10) {
        _builder.append(space);
        _builder.append("args: ");
        String _compileDictionaryPassed = this.compileDictionaryPassed(taskHandler.getArgs(), space);
        _builder.append(_compileDictionaryPassed);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _size = taskHandler.getNotifiables().size();
      boolean _tripleNotEquals_11 = (_size != 0);
      if (_tripleNotEquals_11) {
        _builder.append(space);
        _builder.append("notify: ");
        ArrayList<String> _compileNotifiables = this.compileNotifiables(taskHandler);
        _builder.append(_compileNotifiables);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ELoop _loop = taskHandler.getLoop();
      boolean _tripleNotEquals_12 = (_loop != null);
      if (_tripleNotEquals_12) {
        {
          ELoop _loop_1 = taskHandler.getLoop();
          if ((_loop_1 instanceof ELoopOverList)) {
            _builder.append(space);
            _builder.append("loop: ");
            ELoop _loop_2 = taskHandler.getLoop();
            Object _compileLoopList = this.compileLoopList(((ELoopOverList) _loop_2).getLoop_list(), space);
            _builder.append(_compileLoopList);
            _builder.newLineIfNotEmpty();
            {
              ELoop _loop_3 = taskHandler.getLoop();
              ELoopControl _loop_control = ((ELoopOverList) _loop_3).getLoop_control();
              boolean _tripleNotEquals_13 = (_loop_control != null);
              if (_tripleNotEquals_13) {
                {
                  ELoop _loop_4 = taskHandler.getLoop();
                  EValuePassed _label = ((ELoopOverList) _loop_4).getLoop_control().getLabel();
                  boolean _tripleNotEquals_14 = (_label != null);
                  if (_tripleNotEquals_14) {
                    _builder.append(space);
                    _builder.append("label: ");
                    ELoop _loop_5 = taskHandler.getLoop();
                    Object _compileValuePassed = this.compileValuePassed(((ELoopOverList) _loop_5).getLoop_control().getLabel(), space, false);
                    _builder.append(_compileValuePassed);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_6 = taskHandler.getLoop();
                  ENumberPassed _pause = ((ELoopOverList) _loop_6).getLoop_control().getPause();
                  boolean _tripleNotEquals_15 = (_pause != null);
                  if (_tripleNotEquals_15) {
                    _builder.append(space);
                    _builder.append("pause: ");
                    ELoop _loop_7 = taskHandler.getLoop();
                    String _compileNumberPassed_2 = this.compileNumberPassed(((ELoopOverList) _loop_7).getLoop_control().getPause(), space);
                    _builder.append(_compileNumberPassed_2);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_8 = taskHandler.getLoop();
                  EIndexOrLoopVariable _index_var = ((ELoopOverList) _loop_8).getLoop_control().getIndex_var();
                  boolean _tripleNotEquals_16 = (_index_var != null);
                  if (_tripleNotEquals_16) {
                    _builder.append(space);
                    _builder.append("index_var: ");
                    ELoop _loop_9 = taskHandler.getLoop();
                    String _name = ((ELoopOverList) _loop_9).getLoop_control().getIndex_var().getName();
                    _builder.append(_name);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_10 = taskHandler.getLoop();
                  EIndexOrLoopVariable _loop_var = ((ELoopOverList) _loop_10).getLoop_control().getLoop_var();
                  boolean _tripleNotEquals_17 = (_loop_var != null);
                  if (_tripleNotEquals_17) {
                    _builder.append(space);
                    _builder.append("loop_var: ");
                    ELoop _loop_11 = taskHandler.getLoop();
                    String _name_1 = ((ELoopOverList) _loop_11).getLoop_control().getLoop_var().getName();
                    _builder.append(_name_1);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_12 = taskHandler.getLoop();
                  EBooleanPassed _extended = ((ELoopOverList) _loop_12).getLoop_control().getExtended();
                  boolean _tripleNotEquals_18 = (_extended != null);
                  if (_tripleNotEquals_18) {
                    _builder.append(space);
                    _builder.append("extended: ");
                    ELoop _loop_13 = taskHandler.getLoop();
                    String _compileBooleanPassed_3 = this.compileBooleanPassed(((ELoopOverList) _loop_13).getLoop_control().getExtended(), space);
                    _builder.append(_compileBooleanPassed_3);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        {
          ELoop _loop_14 = taskHandler.getLoop();
          if ((_loop_14 instanceof EUntil)) {
            {
              ELoop _loop_15 = taskHandler.getLoop();
              EJinjaExpressionEvaluationWithoutBrackets _until = ((EUntil) _loop_15).getUntil();
              boolean _tripleNotEquals_19 = (_until != null);
              if (_tripleNotEquals_19) {
                _builder.append(space);
                _builder.append("until: ");
                ELoop _loop_16 = taskHandler.getLoop();
                String _compileJinjaExpressionEvaluationWithoutBrackets = this.compileJinjaExpressionEvaluationWithoutBrackets(((EUntil) _loop_16).getUntil(), space, true);
                _builder.append(_compileJinjaExpressionEvaluationWithoutBrackets);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              ELoop _loop_17 = taskHandler.getLoop();
              ENumberPassed _retries = ((EUntil) _loop_17).getRetries();
              boolean _tripleNotEquals_20 = (_retries != null);
              if (_tripleNotEquals_20) {
                _builder.append(space);
                _builder.append("retries: ");
                ELoop _loop_18 = taskHandler.getLoop();
                String _compileNumberPassed_3 = this.compileNumberPassed(((EUntil) _loop_18).getRetries(), space);
                _builder.append(_compileNumberPassed_3);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              ELoop _loop_19 = taskHandler.getLoop();
              ENumberPassed _delay = ((EUntil) _loop_19).getDelay();
              boolean _tripleNotEquals_21 = (_delay != null);
              if (_tripleNotEquals_21) {
                _builder.append(space);
                _builder.append("delay: ");
                ELoop _loop_20 = taskHandler.getLoop();
                String _compileNumberPassed_4 = this.compileNumberPassed(((EUntil) _loop_20).getDelay(), space);
                _builder.append(_compileNumberPassed_4);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          ELoop _loop_21 = taskHandler.getLoop();
          if ((_loop_21 instanceof EWithLookup)) {
            {
              if (((((EWithLookup) taskHandler.getLoop()).getLookup() != null) && (((EWithLookup) taskHandler.getLoop()).getWith_list() != null))) {
                _builder.append(space);
                _builder.append("with_");
                ELoop _loop_22 = taskHandler.getLoop();
                String _lookup = ((EWithLookup) _loop_22).getLookup();
                _builder.append(_lookup);
                _builder.append(": ");
                ELoop _loop_23 = taskHandler.getLoop();
                String _string = this.compileValuePassed(((EWithLookup) _loop_23).getWith_list(), space, false).toString();
                _builder.append(_string);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      ERegisterVariable _register = taskHandler.getRegister();
      boolean _tripleNotEquals_22 = (_register != null);
      if (_tripleNotEquals_22) {
        _builder.append(space);
        _builder.append("register: ");
        String _name_2 = taskHandler.getRegister().getName();
        _builder.append(_name_2);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public ArrayList<String> compileNotifiables(final ETaskHandler taskHandler) {
    ArrayList<String> newList = new ArrayList<String>();
    EList<ENotifiable> _notifiables = taskHandler.getNotifiables();
    for (final ENotifiable notifiable : _notifiables) {
      if ((notifiable instanceof ENotifiedTopic)) {
        newList.add("\"".concat(this.compileString(((ENotifiedTopic)notifiable).getName())).concat("\""));
      } else {
        if ((notifiable instanceof ENotifiedHandler)) {
          newList.add("\"".concat(this.compileString(((ENotifiedHandler)notifiable).getName().getName())).concat("\""));
        }
      }
    }
    return newList;
  }
  
  public ArrayList<String> compileNotifiedTopics(final EHandler handler) {
    ArrayList<String> newList = new ArrayList<String>();
    EList<ENotifiedTopic> _listen_to = handler.getListen_to();
    for (final ENotifiedTopic listenedTopic : _listen_to) {
      newList.add("\"".concat(this.compileString(listenedTopic.getName())).concat("\""));
    }
    return newList;
  }
  
  public String compileDictionaryPassed(final EDictionaryPassed dictionaryPassed, final String space) {
    if ((dictionaryPassed instanceof EDictionary)) {
      return this.compileDictionary(((EDictionary)dictionaryPassed), space);
    } else {
      if ((dictionaryPassed instanceof EJinjaExpressionEvaluation)) {
        return "\"".concat(this.compileJinjaExpressionEvaluation(((EJinjaExpressionEvaluation)dictionaryPassed), space)).concat("\"");
      } else {
        if ((dictionaryPassed instanceof EJinjaStatement)) {
          return "\"".concat(this.compileJinjaStatement(((EJinjaStatement)dictionaryPassed), space, false)).concat("\"");
        }
      }
    }
    return null;
  }
  
  public Serializable compileCollectionListPassed(final /* ECollectionListPassed */Object collectionlistPassed, final String space) {
    throw new Error("Unresolved compilation problems:"
      + "\nECollectionList cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nThe method compileCollectionList(ECollectionList, String) from the type AnsibleDslGenerator refers to the missing type ECollectionList");
  }
  
  public Serializable compileListPassed(final EListPassed listPassed, final String space) {
    if ((listPassed instanceof org.sodalite.sdl.ansible.ansibleDsl.EList)) {
      return this.compileList(((org.sodalite.sdl.ansible.ansibleDsl.EList)listPassed), space);
    } else {
      if ((listPassed instanceof EJinjaExpressionEvaluation)) {
        return "\"".concat(this.compileJinjaExpressionEvaluation(((EJinjaExpressionEvaluation)listPassed), space)).concat("\"");
      } else {
        if ((listPassed instanceof EJinjaStatement)) {
          return "\"".concat(this.compileJinjaStatement(((EJinjaStatement)listPassed), space, false)).concat("\"");
        }
      }
    }
    return null;
  }
  
  public String compileNumberPassed(final ENumberPassed numberPassed, final String space) {
    if ((numberPassed instanceof EJinjaExpressionEvaluation)) {
      return "\"".concat(this.compileJinjaExpressionEvaluation(((EJinjaExpressionEvaluation)numberPassed), space)).concat("\"");
    } else {
      ENumber _number_passed = numberPassed.getNumber_passed();
      boolean _tripleNotEquals = (_number_passed != null);
      if (_tripleNotEquals) {
        return this.compileNumber(numberPassed.getNumber_passed());
      } else {
        String _number_passed_null = numberPassed.getNumber_passed_null();
        boolean _tripleNotEquals_1 = (_number_passed_null != null);
        if (_tripleNotEquals_1) {
          return numberPassed.getNumber_passed_null();
        } else {
          if ((numberPassed instanceof EJinjaStatement)) {
            return "\"".concat(this.compileJinjaStatement(((EJinjaStatement)numberPassed), space, false)).concat("\"");
          }
        }
      }
    }
    return null;
  }
  
  public String compileBooleanPassed(final EBooleanPassed booleanPassed, final String space) {
    if ((booleanPassed instanceof EJinjaExpressionEvaluation)) {
      return "\"".concat(this.compileJinjaExpressionEvaluation(((EJinjaExpressionEvaluation)booleanPassed), space)).concat("\"");
    } else {
      EBooleanAnsible _boolean_passed = booleanPassed.getBoolean_passed();
      boolean _tripleNotEquals = (_boolean_passed != null);
      if (_tripleNotEquals) {
        return this.compileBooleanAnsible(booleanPassed.getBoolean_passed());
      } else {
        if ((booleanPassed instanceof EJinjaStatement)) {
          return "\"".concat(this.compileJinjaStatement(((EJinjaStatement)booleanPassed), space, false)).concat("\"");
        }
      }
    }
    return null;
  }
  
  public String compileTailElement(final ETailElement tailElement, final String space, final boolean isCondition) {
    String tailElementString = "";
    EFunctionCallOrVariable _function_call = tailElement.getFunction_call();
    boolean _tripleNotEquals = (_function_call != null);
    if (_tripleNotEquals) {
      tailElementString = tailElementString.concat(this.compileFunctionCall(tailElement.getFunction_call(), space, isCondition));
    }
    EList<ESquareBracketElement> _square_bracket_elements = tailElement.getSquare_bracket_elements();
    for (final ESquareBracketElement squareBracketElement : _square_bracket_elements) {
      tailElementString = tailElementString.concat(this.compileSquareBracketElement(squareBracketElement));
    }
    return tailElementString;
  }
  
  public String compileSquareBracketElement(final ESquareBracketElement squareBracketElement) {
    String stringToReturn = "";
    EJinjaExpressionEvaluationWithoutBrackets _expression = squareBracketElement.getExpression();
    boolean _tripleNotEquals = (_expression != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat("[").concat(this.compileJinjaExpressionEvaluationWithoutBrackets(squareBracketElement.getExpression(), "", false).toString()).concat("]");
    } else {
      ESliceNotation _slice_notation = squareBracketElement.getSlice_notation();
      boolean _tripleNotEquals_1 = (_slice_notation != null);
      if (_tripleNotEquals_1) {
        stringToReturn = stringToReturn.concat("[").concat(this.compileSliceNotation(squareBracketElement.getSlice_notation())).concat("]");
      }
    }
    return stringToReturn;
  }
  
  public String compileSliceNotation(final ESliceNotation sliceNotation) {
    String stringToReturn = "";
    String _first_colon = sliceNotation.getFirst_colon();
    boolean _tripleNotEquals = (_first_colon != null);
    if (_tripleNotEquals) {
      ENumber _start = sliceNotation.getStart();
      boolean _tripleNotEquals_1 = (_start != null);
      if (_tripleNotEquals_1) {
        stringToReturn = stringToReturn.concat(this.compileNumber(sliceNotation.getStart()));
      }
      stringToReturn = stringToReturn.concat(sliceNotation.getFirst_colon());
      ENumber _step = sliceNotation.getStep();
      boolean _tripleNotEquals_2 = (_step != null);
      if (_tripleNotEquals_2) {
        stringToReturn = stringToReturn.concat(this.compileNumber(sliceNotation.getStep()));
      }
      String _second_colon = sliceNotation.getSecond_colon();
      boolean _tripleNotEquals_3 = (_second_colon != null);
      if (_tripleNotEquals_3) {
        stringToReturn = stringToReturn.concat(sliceNotation.getSecond_colon());
      }
      ENumber _stop = sliceNotation.getStop();
      boolean _tripleNotEquals_4 = (_stop != null);
      if (_tripleNotEquals_4) {
        stringToReturn = stringToReturn.concat(this.compileNumber(sliceNotation.getStop()));
      }
    } else {
      ENumber _start_1 = sliceNotation.getStart();
      boolean _tripleNotEquals_5 = (_start_1 != null);
      if (_tripleNotEquals_5) {
        stringToReturn = stringToReturn.concat(this.compileNumber(sliceNotation.getStart()));
      }
      String _colon = sliceNotation.getColon();
      boolean _tripleNotEquals_6 = (_colon != null);
      if (_tripleNotEquals_6) {
        stringToReturn = stringToReturn.concat(sliceNotation.getColon());
      }
      ENumber _stop_1 = sliceNotation.getStop();
      boolean _tripleNotEquals_7 = (_stop_1 != null);
      if (_tripleNotEquals_7) {
        stringToReturn = stringToReturn.concat(this.compileNumber(sliceNotation.getStop()));
      }
    }
    return stringToReturn;
  }
  
  public String compileJinjaExpressionEvaluationWithoutBrackets(final EJinjaExpressionEvaluationWithoutBrackets jinja, final String space, final boolean isCondition) {
    String stringToReturn = "";
    EFilteredExpression _expression_to_evaluate = jinja.getExpression_to_evaluate();
    boolean _tripleNotEquals = (_expression_to_evaluate != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(this.compileFilteredExpression(jinja.getExpression_to_evaluate(), space, isCondition));
    }
    EList<EIfBlock> _if_chain = jinja.getIf_chain();
    for (final EIfBlock ifBlock : _if_chain) {
      {
        stringToReturn = stringToReturn.concat(" if ").concat(this.compileFilteredExpression(ifBlock.getIf_condition(), space, isCondition));
        EFilteredExpression _else_expression = ifBlock.getElse_expression();
        boolean _tripleNotEquals_1 = (_else_expression != null);
        if (_tripleNotEquals_1) {
          stringToReturn = stringToReturn.concat(" else ").concat(this.compileFilteredExpression(ifBlock.getElse_expression(), space, isCondition));
        }
      }
    }
    return stringToReturn;
  }
  
  public String compileFunctionCall(final EFunctionCallOrVariable functionCall, final String space, final boolean isCondition) {
    String stringToReturn = functionCall.getName();
    int _size = functionCall.getParameters().size();
    boolean _tripleNotEquals = (_size != 0);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat("(");
      for (int index = 0; (index < functionCall.getParameters().size()); index++) {
        if ((index == 0)) {
          stringToReturn = stringToReturn.concat(this.compileFunctionInput(functionCall.getParameters().get(index), space, isCondition));
        } else {
          stringToReturn = stringToReturn.concat(", ").concat(this.compileFunctionInput(functionCall.getParameters().get(index), space, isCondition));
        }
      }
      stringToReturn = stringToReturn.concat(")");
    } else {
      String _empty_brackets = functionCall.getEmpty_brackets();
      boolean _tripleNotEquals_1 = (_empty_brackets != null);
      if (_tripleNotEquals_1) {
        stringToReturn = stringToReturn.concat("()");
      }
    }
    return stringToReturn;
  }
  
  public String compileFunctionInput(final EFunctionInput functionInput, final String space, final boolean isCondition) {
    String stringToReturn = "";
    String _parameter_name = functionInput.getParameter_name();
    boolean _tripleNotEquals = (_parameter_name != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(functionInput.getParameter_name()).concat("=");
    }
    EJinjaExpressionEvaluationWithoutBrackets _value = functionInput.getValue();
    boolean _tripleNotEquals_1 = (_value != null);
    if (_tripleNotEquals_1) {
      stringToReturn = stringToReturn.concat(this.compileJinjaExpressionEvaluationWithoutBrackets(functionInput.getValue(), space, isCondition).toString());
    }
    return stringToReturn;
  }
  
  public String compileFilteredExpression(final EFilteredExpression filteredExpression, final String space, final boolean isCondition) {
    String stringToReturn = this.compileOrExpression(filteredExpression.getTo_filter(), space, isCondition).toString();
    EFilteredExpression _filter = filteredExpression.getFilter();
    boolean _tripleNotEquals = (_filter != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" | ").concat(this.compileFilteredExpression(filteredExpression.getFilter(), space, isCondition).toString());
    }
    return stringToReturn;
  }
  
  public String compileOrExpression(final EOrExpression orExpression, final String space, final boolean isCondition) {
    String stringToReturn = this.compileAndExpression(orExpression.getLeft_or(), space, isCondition).toString();
    EOrExpression _right_or = orExpression.getRight_or();
    boolean _tripleNotEquals = (_right_or != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" or ").concat(this.compileOrExpression(orExpression.getRight_or(), space, isCondition).toString());
    }
    return stringToReturn;
  }
  
  public String compileAndExpression(final EAndExpression andExpression, final String space, final boolean isCondition) {
    String stringToReturn = this.compileTruthExpression(andExpression.getLeft_and(), space, isCondition).toString();
    EAndExpression _right_and = andExpression.getRight_and();
    boolean _tripleNotEquals = (_right_and != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" and ").concat(this.compileAndExpression(andExpression.getRight_and(), space, isCondition).toString());
    }
    return stringToReturn;
  }
  
  public String compileTruthExpression(final ETruthExpression truthExpression, final String space, final boolean isCondition) {
    String stringToReturn = this.compileOperation(truthExpression.getLeft_value(), space, isCondition).toString();
    if (((truthExpression.getEquality_sign() != null) && (truthExpression.getRight_value() != null))) {
      stringToReturn = stringToReturn.concat(" ").concat(truthExpression.getEquality_sign()).concat(" ").concat(this.compileTruthExpression(truthExpression.getRight_value(), space, isCondition).toString());
    }
    return stringToReturn;
  }
  
  public String compileOperation(final EOperation operation, final String space, final boolean isCondition) {
    String stringToReturn = this.compileIsExpression(operation.getLeft_operand(), space, isCondition).toString();
    if (((operation.getOperator() != null) && (operation.getRight_operand() != null))) {
      stringToReturn = stringToReturn.concat(" ").concat(operation.getOperator()).concat(" ").concat(this.compileOperation(operation.getRight_operand(), space, isCondition).toString());
    }
    return stringToReturn;
  }
  
  public String compileIsExpression(final EIsExpression isExpression, final String space, final boolean isCondition) {
    String stringToReturn = "";
    String _not = isExpression.getNot();
    boolean _tripleNotEquals = (_not != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat("not ");
    }
    stringToReturn = stringToReturn.concat(this.compileParenthesisedExpression(isExpression.getParenthesised_expression(), space, isCondition).toString());
    EIsExpression _status = isExpression.getStatus();
    boolean _tripleNotEquals_1 = (_status != null);
    if (_tripleNotEquals_1) {
      stringToReturn = stringToReturn.concat(" is ").concat(this.compileIsExpression(isExpression.getStatus(), space, isCondition).toString());
    } else {
      EIsExpression _container_expression = isExpression.getContainer_expression();
      boolean _tripleNotEquals_2 = (_container_expression != null);
      if (_tripleNotEquals_2) {
        String _not_in = isExpression.getNot_in();
        boolean _tripleNotEquals_3 = (_not_in != null);
        if (_tripleNotEquals_3) {
          stringToReturn = stringToReturn.concat(" not in ").concat(this.compileIsExpression(isExpression.getContainer_expression(), space, isCondition).toString());
        } else {
          stringToReturn = stringToReturn.concat(" in ").concat(this.compileIsExpression(isExpression.getContainer_expression(), space, isCondition).toString());
        }
      }
    }
    return stringToReturn;
  }
  
  public String compileParenthesisedExpression(final EParenthesisedExpression parenthesisedExpression, final String space, final boolean isCondition) {
    String stringToReturn = "";
    EValuePassedToJinjaExpression _basic_value = parenthesisedExpression.getBasic_value();
    boolean _tripleNotEquals = (_basic_value != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(this.compileValuePassedToJinjaExpression(parenthesisedExpression.getBasic_value(), space, isCondition));
    } else {
      EJinjaExpressionEvaluationWithoutBrackets _parenthesised_term = parenthesisedExpression.getParenthesised_term();
      boolean _tripleNotEquals_1 = (_parenthesised_term != null);
      if (_tripleNotEquals_1) {
        stringToReturn = stringToReturn.concat("(").concat(this.compileJinjaExpressionEvaluationWithoutBrackets(parenthesisedExpression.getParenthesised_term(), space, isCondition).toString()).concat(")");
      }
    }
    EList<ESquareBracketElement> _square_bracket_elements = parenthesisedExpression.getSquare_bracket_elements();
    for (final ESquareBracketElement squareBracketElement : _square_bracket_elements) {
      stringToReturn = stringToReturn.concat(this.compileSquareBracketElement(squareBracketElement));
    }
    EList<ETailElement> _tail = parenthesisedExpression.getTail();
    for (final ETailElement tailElement : _tail) {
      stringToReturn = stringToReturn.concat(".").concat(this.compileTailElement(tailElement, space, isCondition));
    }
    return stringToReturn;
  }
  
  public Serializable compileCollectionList(final /* ECollectionList */Object list, final String space) {
    throw new Error("Unresolved compilation problems:"
      + "\nECollectionListInLine cannot be resolved to a type."
      + "\nECollectionListIndented cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nThe method compileCollectionFQN(ECollectionFQN, String, boolean) from the type AnsibleDslGenerator refers to the missing type ECollectionFQN"
      + "\nThe method compileCollectionFQN(ECollectionFQN, String, boolean) from the type AnsibleDslGenerator refers to the missing type ECollectionFQN"
      + "\nelements cannot be resolved"
      + "\nelements cannot be resolved");
  }
  
  public String compileModuleName(final EModuleCall module, final String space) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field firstPart is undefined for the type EModuleCall"
      + "\nThe method or field secondPart is undefined for the type EModuleCall"
      + "\nThe method or field thirdPart is undefined for the type EModuleCall"
      + "\nThe method or field secondPart is undefined for the type EModuleCall"
      + "\nThe method or field thirdPart is undefined for the type EModuleCall"
      + "\nThe method or field secondPart is undefined for the type EModuleCall"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\n!== cannot be resolved"
      + "\n!== cannot be resolved");
  }
  
  public String compileCollectionFQN(final /* ECollectionFQN */Object collection, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\ncollectionName cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nnamespaceOrFqn cannot be resolved"
      + "\ncollectionName cannot be resolved"
      + "\nnamespaceOrFqn cannot be resolved");
  }
  
  public String compileRoleName(final /* ERoleName */Object role, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compileNumberOrStringWithoutQuotesPassed(ENumberOrStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type ENumberOrStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileNumberOrStringWithoutQuotesPassed(ENumberOrStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type ENumberOrStringWithoutQuotesPassed"
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed"
      + "\nThe method compileNumberOrStringWithoutQuotesPassed(ENumberOrStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type ENumberOrStringWithoutQuotesPassed"
      + "\nthirdPart cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nfirstPart cannot be resolved"
      + "\nsecondPart cannot be resolved"
      + "\nthirdPart cannot be resolved"
      + "\nsecondPart cannot be resolved"
      + "\n!== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nthirdPart cannot be resolved"
      + "\n=== cannot be resolved"
      + "\nfirstPart cannot be resolved"
      + "\nsecondPart cannot be resolved"
      + "\nfirstPart cannot be resolved");
  }
  
  public Serializable compileList(final org.sodalite.sdl.ansible.ansibleDsl.EList list, final String space) {
    if ((list instanceof EListInLine)) {
      ArrayList<Object> newList = new ArrayList<Object>();
      EList<EValuePassed> _elements = ((EListInLine)list).getElements();
      for (final EValuePassed element : _elements) {
        newList.add(this.compileValuePassed(element, space, false));
      }
      return newList;
    } else {
      if ((list instanceof EListIndented)) {
        String listString = "";
        EList<EElementOfListIndented> _elements_1 = ((EListIndented)list).getElements();
        for (final EElementOfListIndented element_1 : _elements_1) {
          listString = listString.concat("\n").concat(space).concat("  - ").concat(this.compileElementOfListIndented(element_1, space.concat("  "), false).toString());
        }
        return listString;
      }
    }
    return null;
  }
  
  public Object compileElementOfListIndented(final EElementOfListIndented element, final String space, final boolean isInMultiLine) {
    if ((element instanceof EValuePassed)) {
      return this.compileValuePassed(((EValuePassed)element), space, isInMultiLine);
    } else {
      if ((element instanceof EDictionaryOfListIndented)) {
        return this.compileDictionaryOfListIndented(((EDictionaryOfListIndented)element), space);
      }
    }
    return null;
  }
  
  public Object compileValuePassed(final EValuePassed valuePassed, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nEStringWithoutQuotesPassed cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed");
  }
  
  public String compileStringPassed(final EStringPassed stringPassed, final String space, final boolean isInMultiLine) {
    if ((stringPassed instanceof EJinjaAndString)) {
      return this.compileJinjaAndString(((EJinjaAndString)stringPassed), space, isInMultiLine);
    } else {
      if ((stringPassed instanceof EMultiLineExpression)) {
        return this.compileMultiLineExpression(((EMultiLineExpression)stringPassed), space);
      }
    }
    return null;
  }
  
  public String compileStringWithoutQuotesPassed(final /* EStringWithoutQuotesPassed */Object stringWithoutQuotesPassed, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nEJinjaAndStringWithoutQuotes cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nThe method compileJinjaAndStringWithoutQuotes(EJinjaAndStringWithoutQuotes, String, boolean) from the type AnsibleDslGenerator refers to the missing type EJinjaAndStringWithoutQuotes");
  }
  
  public String compileNumberOrStringWithoutQuotesPassed(final /* ENumberOrStringWithoutQuotesPassed */Object numberOrStringWithoutQuotesPassed, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nEStringWithoutQuotesPassed cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nThe method compileStringWithoutQuotesPassed(EStringWithoutQuotesPassed, String, boolean) from the type AnsibleDslGenerator refers to the missing type EStringWithoutQuotesPassed");
  }
  
  public String compileJinjaAndStringWithoutQuotes(final /* EJinjaAndStringWithoutQuotes */Object jinja, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compileJinjaOrStringWithoutQuotes(EJinjaOrStringWithoutQuotes, String, boolean) from the type AnsibleDslGenerator refers to the missing type EJinjaOrStringWithoutQuotes"
      + "\njinja_expression_and_stringWithout cannot be resolved");
  }
  
  public Object compileJinjaOrStringWithoutQuotes(final /* EJinjaOrStringWithoutQuotes */Object jinja, final String space, final boolean isInMultiLine) {
    throw new Error("Unresolved compilation problems:"
      + "\nstringWithoutQuotes cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nstringWithoutQuotes cannot be resolved");
  }
  
  public String compileJinjaAndString(final EJinjaAndString jinja, final String space, final boolean isInMultiLine) {
    String stringToReturn = "";
    if ((!isInMultiLine)) {
      stringToReturn = stringToReturn.concat("\"");
    }
    EList<EJinjaOrString> _jinja_expression_and_string = jinja.getJinja_expression_and_string();
    for (final EJinjaOrString jinjaOr : _jinja_expression_and_string) {
      stringToReturn = stringToReturn.concat(this.compileJinjaOrString(jinjaOr, space, isInMultiLine).toString());
    }
    if ((!isInMultiLine)) {
      stringToReturn = stringToReturn.concat("\"");
    }
    return stringToReturn;
  }
  
  public String compileMultiLineExpression(final EMultiLineExpression multiLineExpression, final String space) {
    String stringToReturn = "";
    String _new_line_command = multiLineExpression.getNew_line_command();
    boolean _tripleNotEquals = (_new_line_command != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(multiLineExpression.getNew_line_command());
    }
    EList<EJinjaAndString> _expressions = multiLineExpression.getExpressions();
    for (final EJinjaAndString jinjaAndString : _expressions) {
      stringToReturn = stringToReturn.concat("\n").concat(space.concat("  ")).concat(this.compileJinjaAndString(jinjaAndString, space, true).toString());
    }
    return stringToReturn;
  }
  
  public String compileJinjaOrString(final EJinjaOrString jinja, final String space, final boolean isInMultiLine) {
    String _string = jinja.getString();
    boolean _tripleNotEquals = (_string != null);
    if (_tripleNotEquals) {
      return this.compileStringInPossibleMultiLine(jinja.getString(), isInMultiLine);
    } else {
      if ((jinja instanceof EJinjaExpressionEvaluation)) {
        return this.compileJinjaExpressionEvaluation(((EJinjaExpressionEvaluation)jinja), space);
      } else {
        if ((jinja instanceof EJinjaStatement)) {
          return this.compileJinjaStatement(((EJinjaStatement)jinja), space, isInMultiLine);
        }
      }
    }
    return null;
  }
  
  public String compileString(final String string) {
    String stringToReturn = "";
    for (int index = 0; (index < string.length()); index++) {
      {
        final char character = string.charAt(index);
        if (((character != "\"".charAt(0)) && (character != "\\".charAt(0)))) {
          stringToReturn = stringToReturn.concat(Character.valueOf(character).toString());
        } else {
          stringToReturn = stringToReturn.concat("\\").concat(Character.valueOf(character).toString());
        }
      }
    }
    return stringToReturn;
  }
  
  public String compileStringInPossibleMultiLine(final String string, final boolean isInMultiLine) {
    if ((!isInMultiLine)) {
      return this.compileString(string);
    } else {
      String stringToReturn = "";
      for (int index = 0; (index < string.length()); index++) {
        {
          final char character = string.charAt(index);
          if ((((character != "\"".charAt(0)) && (character != "\\".charAt(0))) || ((character == "\\".charAt(0)) && (index == (string.length() - 1))))) {
            stringToReturn = stringToReturn.concat(Character.valueOf(character).toString());
          } else {
            stringToReturn = stringToReturn.concat("\\").concat(Character.valueOf(character).toString());
          }
        }
      }
      return stringToReturn;
    }
  }
  
  public String compileJinjaExpressionEvaluation(final EJinjaExpressionEvaluation jinja, final String space) {
    return "{{ ".concat(this.compileJinjaExpressionEvaluationWithoutBrackets(jinja.getJinja_expression(), space, false).toString()).concat(" }}");
  }
  
  public String compileJinjaStatement(final EJinjaStatement jinjaStatement, final String space, final boolean isInMultiLine) {
    if ((jinjaStatement instanceof EIfStatement)) {
      String stringToReturn = "{%";
      String _if_block_sign = ((EIfStatement)jinjaStatement).getIf_block_sign();
      boolean _tripleNotEquals = (_if_block_sign != null);
      if (_tripleNotEquals) {
        stringToReturn = stringToReturn.concat(((EIfStatement)jinjaStatement).getIf_block_sign());
      }
      stringToReturn = stringToReturn.concat(" if ").concat(this.compileFilteredExpression(((EIfStatement)jinjaStatement).getIf_condition(), space, false)).concat(" %}");
      stringToReturn = stringToReturn.concat(this.compileValuePassed(((EIfStatement)jinjaStatement).getIf_body(), space, isInMultiLine).toString());
      EList<EElifBlock> _elif_blocks = ((EIfStatement)jinjaStatement).getElif_blocks();
      for (final EElifBlock elif : _elif_blocks) {
        {
          stringToReturn = stringToReturn.concat("{%");
          String _elif_block_sign = elif.getElif_block_sign();
          boolean _tripleNotEquals_1 = (_elif_block_sign != null);
          if (_tripleNotEquals_1) {
            stringToReturn = stringToReturn.concat(elif.getElif_block_sign());
          }
          stringToReturn = stringToReturn.concat(" elif ").concat(this.compileFilteredExpression(elif.getElif_condition(), space, false)).concat(" %}");
          stringToReturn = stringToReturn.concat(this.compileValuePassed(elif.getElif_body(), space, isInMultiLine).toString());
        }
      }
      EValuePassed _else_body = ((EIfStatement)jinjaStatement).getElse_body();
      boolean _tripleNotEquals_1 = (_else_body != null);
      if (_tripleNotEquals_1) {
        stringToReturn = stringToReturn.concat("{%");
        String _else_block_sign = ((EIfStatement)jinjaStatement).getElse_block_sign();
        boolean _tripleNotEquals_2 = (_else_block_sign != null);
        if (_tripleNotEquals_2) {
          stringToReturn = stringToReturn.concat(((EIfStatement)jinjaStatement).getElse_block_sign());
        }
        stringToReturn = stringToReturn.concat(" else %}");
        stringToReturn = stringToReturn.concat(this.compileValuePassed(((EIfStatement)jinjaStatement).getElse_body(), space, isInMultiLine).toString());
      }
      stringToReturn = stringToReturn.concat("{%");
      String _endif_block_sign = ((EIfStatement)jinjaStatement).getEndif_block_sign();
      boolean _tripleNotEquals_3 = (_endif_block_sign != null);
      if (_tripleNotEquals_3) {
        stringToReturn = stringToReturn.concat(((EIfStatement)jinjaStatement).getEndif_block_sign());
      }
      stringToReturn = stringToReturn.concat(" endif %}");
      return stringToReturn;
    } else {
      if ((jinjaStatement instanceof EForStatement)) {
        String stringToReturn_1 = "{%";
        String _for_block_sign = ((EForStatement)jinjaStatement).getFor_block_sign();
        boolean _tripleNotEquals_4 = (_for_block_sign != null);
        if (_tripleNotEquals_4) {
          stringToReturn_1 = stringToReturn_1.concat(((EForStatement)jinjaStatement).getFor_block_sign());
        }
        for (int index = 0; (index < ((EForStatement)jinjaStatement).getIdentifiers().size()); index++) {
          if ((index == 0)) {
            stringToReturn_1 = stringToReturn_1.concat(" for ").concat(((EForStatement)jinjaStatement).getIdentifiers().get(index));
          } else {
            stringToReturn_1 = stringToReturn_1.concat(", ").concat(((EForStatement)jinjaStatement).getIdentifiers().get(index));
          }
        }
        stringToReturn_1 = stringToReturn_1.concat(" in ").concat(this.compileFilteredExpression(((EForStatement)jinjaStatement).getList(), space, false));
        EFilteredExpression _condition = ((EForStatement)jinjaStatement).getCondition();
        boolean _tripleNotEquals_5 = (_condition != null);
        if (_tripleNotEquals_5) {
          stringToReturn_1 = stringToReturn_1.concat(" if ").concat(this.compileFilteredExpression(((EForStatement)jinjaStatement).getCondition(), space, false));
        }
        String _recursive = ((EForStatement)jinjaStatement).getRecursive();
        boolean _tripleNotEquals_6 = (_recursive != null);
        if (_tripleNotEquals_6) {
          stringToReturn_1 = stringToReturn_1.concat(" ").concat(((EForStatement)jinjaStatement).getRecursive());
        }
        stringToReturn_1 = stringToReturn_1.concat(" %}");
        stringToReturn_1 = stringToReturn_1.concat(this.compileValuePassed(((EForStatement)jinjaStatement).getFor_body(), space, isInMultiLine).toString());
        EValuePassed _else_body_1 = ((EForStatement)jinjaStatement).getElse_body();
        boolean _tripleNotEquals_7 = (_else_body_1 != null);
        if (_tripleNotEquals_7) {
          stringToReturn_1 = stringToReturn_1.concat("{%");
          String _else_block_sign_1 = ((EForStatement)jinjaStatement).getElse_block_sign();
          boolean _tripleNotEquals_8 = (_else_block_sign_1 != null);
          if (_tripleNotEquals_8) {
            stringToReturn_1 = stringToReturn_1.concat(((EForStatement)jinjaStatement).getElse_block_sign());
          }
          stringToReturn_1 = stringToReturn_1.concat(" else %}");
          stringToReturn_1 = stringToReturn_1.concat(this.compileValuePassed(((EForStatement)jinjaStatement).getElse_body(), space, isInMultiLine).toString());
        }
        stringToReturn_1 = stringToReturn_1.concat("{%");
        String _endfor_block_sign = ((EForStatement)jinjaStatement).getEndfor_block_sign();
        boolean _tripleNotEquals_9 = (_endfor_block_sign != null);
        if (_tripleNotEquals_9) {
          stringToReturn_1 = stringToReturn_1.concat(((EForStatement)jinjaStatement).getEndfor_block_sign());
        }
        stringToReturn_1 = stringToReturn_1.concat(" endfor %}");
        return stringToReturn_1;
      }
    }
    return null;
  }
  
  public String compileValuePassedToJinjaExpression(final EValuePassedToJinjaExpression valuePassedToJinjaExpression, final String space, final boolean isCondition) {
    if ((valuePassedToJinjaExpression instanceof EValueJinja)) {
      return this.compileValueJinja(((EValueJinja)valuePassedToJinjaExpression), space, isCondition).toString();
    } else {
      if ((valuePassedToJinjaExpression instanceof ESpecialVariable)) {
        String specialVariableString = ((ESpecialVariable)valuePassedToJinjaExpression).getName();
        return specialVariableString;
      } else {
        if ((valuePassedToJinjaExpression instanceof EVariableReference)) {
          return this.compileVariableReference(((EVariableReference)valuePassedToJinjaExpression));
        } else {
          if ((valuePassedToJinjaExpression instanceof EFunctionCallOrVariable)) {
            return this.compileFunctionCall(((EFunctionCallOrVariable)valuePassedToJinjaExpression), space, isCondition);
          }
        }
      }
    }
    return null;
  }
  
  public String compileVariableReference(final EVariableReference variableReference) {
    throw new Error("Unresolved compilation problems:"
      + "\nLocalEInputOperationVariableReference cannot be resolved to a type."
      + "\nLocalEInputOperationVariableReference cannot be resolved to a type."
      + "\nKBEInputOperationVariableReference cannot be resolved to a type."
      + "\nKBEInputOperationVariableReference cannot be resolved to a type."
      + "\nLocalEInputInterfaceVariableReference cannot be resolved to a type."
      + "\nLocalEInputInterfaceVariableReference cannot be resolved to a type."
      + "\nKBEInputInterfaceVariableReference cannot be resolved to a type."
      + "\nKBEInputInterfaceVariableReference cannot be resolved to a type."
      + "\nThe method or field reference is undefined for the type EInputOperationVariableReference"
      + "\nThe method or field reference is undefined for the type EInputOperationVariableReference"
      + "\nThe method or field reference is undefined for the type EInputOperationVariableReference"
      + "\nThe method or field reference is undefined for the type EInputOperationVariableReference"
      + "\nThe method or field reference is undefined for the type EInputInterfaceVariableReference"
      + "\nThe method or field reference is undefined for the type EInputInterfaceVariableReference"
      + "\nThe method or field reference is undefined for the type EInputInterfaceVariableReference"
      + "\nThe method or field reference is undefined for the type EInputInterfaceVariableReference"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public Object compileLoopList(final EValuePassed loopList, final String space) {
    if (((loopList instanceof EJinjaAndString) || (loopList instanceof org.sodalite.sdl.ansible.ansibleDsl.EList))) {
      return this.compileValuePassed(loopList, space, false);
    } else {
      return "[".concat(this.compileValuePassed(loopList, space, false).toString()).concat("]");
    }
  }
  
  public String compileValueJinja(final EValueJinja valueJinja, final String space, final boolean isCondition) {
    if ((valueJinja instanceof EComposedValueJinja)) {
      return this.compileComposedValueJinja(((EComposedValueJinja)valueJinja), space, isCondition);
    } else {
      if ((valueJinja instanceof ESimpleValueJinja)) {
        return this.compileSimpleValueJinja(((ESimpleValueJinja)valueJinja), isCondition);
      }
    }
    return null;
  }
  
  public String compileComposedValueJinja(final EComposedValueJinja composedValueJinja, final String space, final boolean isCondition) {
    if ((composedValueJinja instanceof EDictionaryJinja)) {
      String dictionaryString = "{";
      for (int index = 0; (index < ((EDictionaryJinja)composedValueJinja).getDictionary_pairs().size()); index++) {
        if ((index == 0)) {
          dictionaryString = dictionaryString.concat(this.compileDictionaryPairJinja(((EDictionaryJinja)composedValueJinja).getDictionary_pairs().get(index), space, isCondition));
        } else {
          dictionaryString = dictionaryString.concat(", ").concat(this.compileDictionaryPairJinja(((EDictionaryJinja)composedValueJinja).getDictionary_pairs().get(index), space, isCondition));
        }
      }
      dictionaryString = dictionaryString.concat("}");
      return dictionaryString;
    } else {
      if ((composedValueJinja instanceof EListJinja)) {
        String listString = "[";
        for (int index = 0; (index < ((EListJinja)composedValueJinja).getElements().size()); index++) {
          if ((index == 0)) {
            listString = listString.concat(this.compileJinjaExpressionEvaluationWithoutBrackets(((EListJinja)composedValueJinja).getElements().get(index), space, isCondition).toString());
          } else {
            listString = listString.concat(", ").concat(this.compileJinjaExpressionEvaluationWithoutBrackets(((EListJinja)composedValueJinja).getElements().get(index), space, isCondition).toString());
          }
        }
        listString = listString.concat("]");
        return listString;
      }
    }
    return null;
  }
  
  public String compileDictionaryPairJinja(final EDictionaryPairJinja dictionaryPairJinja, final String space, final boolean isCondition) {
    return "\'".concat(dictionaryPairJinja.getName()).concat("\'").concat(": ").concat(this.compileJinjaExpressionEvaluationWithoutBrackets(dictionaryPairJinja.getValue(), space, isCondition).toString());
  }
  
  public Serializable compileValueWithoutString(final EValueWithoutString valueWithoutString, final String space) {
    if ((valueWithoutString instanceof EComposedValue)) {
      return this.compileComposedValue(((EComposedValue)valueWithoutString), space);
    } else {
      if ((valueWithoutString instanceof ESimpleValueWithoutString)) {
        return this.compileSimpleValueWithoutString(((ESimpleValueWithoutString)valueWithoutString));
      }
    }
    return null;
  }
  
  public Serializable compileComposedValue(final EComposedValue composedValue, final String space) {
    if ((composedValue instanceof org.sodalite.sdl.ansible.ansibleDsl.EList)) {
      return this.compileList(((org.sodalite.sdl.ansible.ansibleDsl.EList)composedValue), space);
    } else {
      if ((composedValue instanceof EDictionary)) {
        return this.compileDictionary(((EDictionary)composedValue), space);
      }
    }
    return null;
  }
  
  public String compileDictionary(final EDictionary dictionary, final String space) {
    if ((dictionary instanceof EDictionaryInLine)) {
      String dictionaryString = "{";
      EList<EDictionaryPair> _dictionary_pairs = ((EDictionaryInLine)dictionary).getDictionary_pairs();
      for (final EDictionaryPair dictionary_pair : _dictionary_pairs) {
        dictionaryString = dictionaryString.concat(this.compileDictionaryPair(dictionary_pair, space.concat("  "))).concat(", ");
      }
      int _length = dictionaryString.length();
      int _minus = (_length - 2);
      dictionaryString = dictionaryString.substring(0, _minus);
      dictionaryString = dictionaryString.concat("}");
      return dictionaryString;
    } else {
      if ((dictionary instanceof EDictionaryIndented)) {
        String dictionaryString_1 = "";
        EList<EDictionaryPair> _dictionary_pairs_1 = ((EDictionaryIndented)dictionary).getDictionary_pairs();
        for (final EDictionaryPair dictionary_pair_1 : _dictionary_pairs_1) {
          dictionaryString_1 = dictionaryString_1.concat("\n").concat(space).concat("  ").concat(this.compileDictionaryPair(dictionary_pair_1, space.concat("  ")));
        }
        return dictionaryString_1;
      }
    }
    return null;
  }
  
  public String compileDictionaryPair(final EDictionaryPair dictionaryPair, final String space) {
    return dictionaryPair.getName().concat(": ").concat(this.compileValuePassed(dictionaryPair.getValue(), space, false).toString());
  }
  
  public String compileDictionaryOfListIndented(final EDictionaryOfListIndented dictionary, final String space) {
    String dictionaryString = "";
    for (int index = 0; (index < dictionary.getDictionary_pairs().size()); index++) {
      if ((index == 0)) {
        dictionaryString = dictionaryString.concat(this.compileDictionaryPair(dictionary.getDictionary_pairs().get(index), space.concat("  ")));
      } else {
        dictionaryString = dictionaryString.concat("\n").concat(space).concat("  ").concat(this.compileDictionaryPair(dictionary.getDictionary_pairs().get(index), space.concat("  ")));
      }
    }
    return dictionaryString;
  }
  
  public String compileSimpleValueJinja(final ESimpleValueJinja simpleValueJinja, final boolean isCondition) {
    String _simple_value = simpleValueJinja.getSimple_value();
    boolean _tripleNotEquals = (_simple_value != null);
    if (_tripleNotEquals) {
      return simpleValueJinja.getSimple_value();
    } else {
      ENumber _simple_value_number = simpleValueJinja.getSimple_value_number();
      boolean _tripleNotEquals_1 = (_simple_value_number != null);
      if (_tripleNotEquals_1) {
        return this.compileNumber(simpleValueJinja.getSimple_value_number());
      } else {
        String _simple_value_string = simpleValueJinja.getSimple_value_string();
        boolean _tripleNotEquals_2 = (_simple_value_string != null);
        if (_tripleNotEquals_2) {
          if (isCondition) {
            return "\"".concat(this.compileString(simpleValueJinja.getSimple_value_string())).concat("\"");
          } else {
            return "\'".concat(this.compileString(simpleValueJinja.getSimple_value_string())).concat("\'");
          }
        }
      }
    }
    return null;
  }
  
  public String compileSimpleValueWithoutString(final ESimpleValueWithoutString simpleValueWithoutString) {
    EBooleanAnsible _simple_value_boolean = simpleValueWithoutString.getSimple_value_boolean();
    boolean _tripleNotEquals = (_simple_value_boolean != null);
    if (_tripleNotEquals) {
      return this.compileBooleanAnsible(simpleValueWithoutString.getSimple_value_boolean());
    } else {
      ENumber _simple_value_number = simpleValueWithoutString.getSimple_value_number();
      boolean _tripleNotEquals_1 = (_simple_value_number != null);
      if (_tripleNotEquals_1) {
        return this.compileNumber(simpleValueWithoutString.getSimple_value_number());
      } else {
        String _simple_value = simpleValueWithoutString.getSimple_value();
        boolean _tripleNotEquals_2 = (_simple_value != null);
        if (_tripleNotEquals_2) {
          return simpleValueWithoutString.getSimple_value();
        }
      }
    }
    return null;
  }
  
  public String compileBooleanAnsible(final EBooleanAnsible booleanAnsible) {
    String _boolean_ansible = booleanAnsible.getBoolean_ansible();
    boolean _tripleNotEquals = (_boolean_ansible != null);
    if (_tripleNotEquals) {
      return booleanAnsible.getBoolean_ansible();
    }
    return null;
  }
  
  public String compileNumber(final ENumber number) {
    String stringToReturn = "";
    stringToReturn = stringToReturn.concat(number.getNumber());
    return stringToReturn;
  }
  
  public String compileCondition(final ECondition condition, final String space) {
    if ((condition instanceof EJinjaExpressionEvaluationWithoutBrackets)) {
      return this.compileJinjaExpressionEvaluationWithoutBrackets(((EJinjaExpressionEvaluationWithoutBrackets)condition), space, true);
    } else {
      if ((condition instanceof EListOfConditions)) {
        String listString = "";
        EList<EJinjaExpressionEvaluationWithoutBrackets> _conditions = ((EListOfConditions)condition).getConditions();
        for (final EJinjaExpressionEvaluationWithoutBrackets element : _conditions) {
          listString = listString.concat("\n").concat(space).concat("  - ").concat(this.compileJinjaExpressionEvaluationWithoutBrackets(element, space.concat("  "), true));
        }
        return listString;
      }
    }
    return null;
  }
}
