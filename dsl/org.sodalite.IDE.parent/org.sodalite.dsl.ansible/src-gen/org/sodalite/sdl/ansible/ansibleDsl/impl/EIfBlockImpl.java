/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EIfBlock;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EIf Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EIfBlockImpl#getIf_condition <em>If condition</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EIfBlockImpl#getElse_expression <em>Else expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EIfBlockImpl extends MinimalEObjectImpl.Container implements EIfBlock
{
  /**
   * The cached value of the '{@link #getIf_condition() <em>If condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf_condition()
   * @generated
   * @ordered
   */
  protected EFilteredExpression if_condition;

  /**
   * The cached value of the '{@link #getElse_expression() <em>Else expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse_expression()
   * @generated
   * @ordered
   */
  protected EFilteredExpression else_expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EIfBlockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EIF_BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EFilteredExpression getIf_condition()
  {
    return if_condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf_condition(EFilteredExpression newIf_condition, NotificationChain msgs)
  {
    EFilteredExpression oldIf_condition = if_condition;
    if_condition = newIf_condition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EIF_BLOCK__IF_CONDITION, oldIf_condition, newIf_condition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIf_condition(EFilteredExpression newIf_condition)
  {
    if (newIf_condition != if_condition)
    {
      NotificationChain msgs = null;
      if (if_condition != null)
        msgs = ((InternalEObject)if_condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EIF_BLOCK__IF_CONDITION, null, msgs);
      if (newIf_condition != null)
        msgs = ((InternalEObject)newIf_condition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EIF_BLOCK__IF_CONDITION, null, msgs);
      msgs = basicSetIf_condition(newIf_condition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EIF_BLOCK__IF_CONDITION, newIf_condition, newIf_condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EFilteredExpression getElse_expression()
  {
    return else_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElse_expression(EFilteredExpression newElse_expression, NotificationChain msgs)
  {
    EFilteredExpression oldElse_expression = else_expression;
    else_expression = newElse_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION, oldElse_expression, newElse_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElse_expression(EFilteredExpression newElse_expression)
  {
    if (newElse_expression != else_expression)
    {
      NotificationChain msgs = null;
      if (else_expression != null)
        msgs = ((InternalEObject)else_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION, null, msgs);
      if (newElse_expression != null)
        msgs = ((InternalEObject)newElse_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION, null, msgs);
      msgs = basicSetElse_expression(newElse_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION, newElse_expression, newElse_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EIF_BLOCK__IF_CONDITION:
        return basicSetIf_condition(null, msgs);
      case AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION:
        return basicSetElse_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EIF_BLOCK__IF_CONDITION:
        return getIf_condition();
      case AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION:
        return getElse_expression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EIF_BLOCK__IF_CONDITION:
        setIf_condition((EFilteredExpression)newValue);
        return;
      case AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION:
        setElse_expression((EFilteredExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EIF_BLOCK__IF_CONDITION:
        setIf_condition((EFilteredExpression)null);
        return;
      case AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION:
        setElse_expression((EFilteredExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EIF_BLOCK__IF_CONDITION:
        return if_condition != null;
      case AnsibleDslPackage.EIF_BLOCK__ELSE_EXPRESSION:
        return else_expression != null;
    }
    return super.eIsSet(featureID);
  }

} //EIfBlockImpl
