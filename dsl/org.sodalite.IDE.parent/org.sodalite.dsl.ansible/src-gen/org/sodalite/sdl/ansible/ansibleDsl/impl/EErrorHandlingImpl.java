/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EErrorHandling;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EError Handling</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EErrorHandlingImpl#getAny_errors_fatal <em>Any errors fatal</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EErrorHandlingImpl#getIgnore_errors <em>Ignore errors</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EErrorHandlingImpl#getIgnore_unreachable <em>Ignore unreachable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EErrorHandlingImpl extends MinimalEObjectImpl.Container implements EErrorHandling
{
  /**
   * The cached value of the '{@link #getAny_errors_fatal() <em>Any errors fatal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAny_errors_fatal()
   * @generated
   * @ordered
   */
  protected EBooleanPassed any_errors_fatal;

  /**
   * The cached value of the '{@link #getIgnore_errors() <em>Ignore errors</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore_errors()
   * @generated
   * @ordered
   */
  protected EBooleanPassed ignore_errors;

  /**
   * The cached value of the '{@link #getIgnore_unreachable() <em>Ignore unreachable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore_unreachable()
   * @generated
   * @ordered
   */
  protected EBooleanPassed ignore_unreachable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EErrorHandlingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EERROR_HANDLING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getAny_errors_fatal()
  {
    return any_errors_fatal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAny_errors_fatal(EBooleanPassed newAny_errors_fatal, NotificationChain msgs)
  {
    EBooleanPassed oldAny_errors_fatal = any_errors_fatal;
    any_errors_fatal = newAny_errors_fatal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL, oldAny_errors_fatal, newAny_errors_fatal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAny_errors_fatal(EBooleanPassed newAny_errors_fatal)
  {
    if (newAny_errors_fatal != any_errors_fatal)
    {
      NotificationChain msgs = null;
      if (any_errors_fatal != null)
        msgs = ((InternalEObject)any_errors_fatal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL, null, msgs);
      if (newAny_errors_fatal != null)
        msgs = ((InternalEObject)newAny_errors_fatal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL, null, msgs);
      msgs = basicSetAny_errors_fatal(newAny_errors_fatal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL, newAny_errors_fatal, newAny_errors_fatal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getIgnore_errors()
  {
    return ignore_errors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIgnore_errors(EBooleanPassed newIgnore_errors, NotificationChain msgs)
  {
    EBooleanPassed oldIgnore_errors = ignore_errors;
    ignore_errors = newIgnore_errors;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS, oldIgnore_errors, newIgnore_errors);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnore_errors(EBooleanPassed newIgnore_errors)
  {
    if (newIgnore_errors != ignore_errors)
    {
      NotificationChain msgs = null;
      if (ignore_errors != null)
        msgs = ((InternalEObject)ignore_errors).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS, null, msgs);
      if (newIgnore_errors != null)
        msgs = ((InternalEObject)newIgnore_errors).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS, null, msgs);
      msgs = basicSetIgnore_errors(newIgnore_errors, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS, newIgnore_errors, newIgnore_errors));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getIgnore_unreachable()
  {
    return ignore_unreachable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIgnore_unreachable(EBooleanPassed newIgnore_unreachable, NotificationChain msgs)
  {
    EBooleanPassed oldIgnore_unreachable = ignore_unreachable;
    ignore_unreachable = newIgnore_unreachable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE, oldIgnore_unreachable, newIgnore_unreachable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnore_unreachable(EBooleanPassed newIgnore_unreachable)
  {
    if (newIgnore_unreachable != ignore_unreachable)
    {
      NotificationChain msgs = null;
      if (ignore_unreachable != null)
        msgs = ((InternalEObject)ignore_unreachable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE, null, msgs);
      if (newIgnore_unreachable != null)
        msgs = ((InternalEObject)newIgnore_unreachable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE, null, msgs);
      msgs = basicSetIgnore_unreachable(newIgnore_unreachable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE, newIgnore_unreachable, newIgnore_unreachable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        return basicSetAny_errors_fatal(null, msgs);
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        return basicSetIgnore_errors(null, msgs);
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        return basicSetIgnore_unreachable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        return getAny_errors_fatal();
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        return getIgnore_errors();
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        return getIgnore_unreachable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        setAny_errors_fatal((EBooleanPassed)newValue);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        setIgnore_errors((EBooleanPassed)newValue);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        setIgnore_unreachable((EBooleanPassed)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        setAny_errors_fatal((EBooleanPassed)null);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        setIgnore_errors((EBooleanPassed)null);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        setIgnore_unreachable((EBooleanPassed)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        return any_errors_fatal != null;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        return ignore_errors != null;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        return ignore_unreachable != null;
    }
    return super.eIsSet(featureID);
  }

} //EErrorHandlingImpl
