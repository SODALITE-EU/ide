/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluationWithoutBrackets;
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EUntil;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EUntil</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EUntilImpl#getUntil <em>Until</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EUntilImpl#getRetries <em>Retries</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EUntilImpl#getDelay <em>Delay</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EUntilImpl extends ELoopImpl implements EUntil
{
  /**
   * The cached value of the '{@link #getUntil() <em>Until</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUntil()
   * @generated
   * @ordered
   */
  protected EJinjaExpressionEvaluationWithoutBrackets until;

  /**
   * The cached value of the '{@link #getRetries() <em>Retries</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRetries()
   * @generated
   * @ordered
   */
  protected ENumberPassed retries;

  /**
   * The cached value of the '{@link #getDelay() <em>Delay</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelay()
   * @generated
   * @ordered
   */
  protected ENumberPassed delay;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EUntilImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EUNTIL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EJinjaExpressionEvaluationWithoutBrackets getUntil()
  {
    return until;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUntil(EJinjaExpressionEvaluationWithoutBrackets newUntil, NotificationChain msgs)
  {
    EJinjaExpressionEvaluationWithoutBrackets oldUntil = until;
    until = newUntil;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EUNTIL__UNTIL, oldUntil, newUntil);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUntil(EJinjaExpressionEvaluationWithoutBrackets newUntil)
  {
    if (newUntil != until)
    {
      NotificationChain msgs = null;
      if (until != null)
        msgs = ((InternalEObject)until).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EUNTIL__UNTIL, null, msgs);
      if (newUntil != null)
        msgs = ((InternalEObject)newUntil).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EUNTIL__UNTIL, null, msgs);
      msgs = basicSetUntil(newUntil, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EUNTIL__UNTIL, newUntil, newUntil));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumberPassed getRetries()
  {
    return retries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRetries(ENumberPassed newRetries, NotificationChain msgs)
  {
    ENumberPassed oldRetries = retries;
    retries = newRetries;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EUNTIL__RETRIES, oldRetries, newRetries);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRetries(ENumberPassed newRetries)
  {
    if (newRetries != retries)
    {
      NotificationChain msgs = null;
      if (retries != null)
        msgs = ((InternalEObject)retries).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EUNTIL__RETRIES, null, msgs);
      if (newRetries != null)
        msgs = ((InternalEObject)newRetries).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EUNTIL__RETRIES, null, msgs);
      msgs = basicSetRetries(newRetries, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EUNTIL__RETRIES, newRetries, newRetries));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumberPassed getDelay()
  {
    return delay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDelay(ENumberPassed newDelay, NotificationChain msgs)
  {
    ENumberPassed oldDelay = delay;
    delay = newDelay;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EUNTIL__DELAY, oldDelay, newDelay);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelay(ENumberPassed newDelay)
  {
    if (newDelay != delay)
    {
      NotificationChain msgs = null;
      if (delay != null)
        msgs = ((InternalEObject)delay).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EUNTIL__DELAY, null, msgs);
      if (newDelay != null)
        msgs = ((InternalEObject)newDelay).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EUNTIL__DELAY, null, msgs);
      msgs = basicSetDelay(newDelay, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EUNTIL__DELAY, newDelay, newDelay));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EUNTIL__UNTIL:
        return basicSetUntil(null, msgs);
      case AnsibleDslPackage.EUNTIL__RETRIES:
        return basicSetRetries(null, msgs);
      case AnsibleDslPackage.EUNTIL__DELAY:
        return basicSetDelay(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EUNTIL__UNTIL:
        return getUntil();
      case AnsibleDslPackage.EUNTIL__RETRIES:
        return getRetries();
      case AnsibleDslPackage.EUNTIL__DELAY:
        return getDelay();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EUNTIL__UNTIL:
        setUntil((EJinjaExpressionEvaluationWithoutBrackets)newValue);
        return;
      case AnsibleDslPackage.EUNTIL__RETRIES:
        setRetries((ENumberPassed)newValue);
        return;
      case AnsibleDslPackage.EUNTIL__DELAY:
        setDelay((ENumberPassed)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EUNTIL__UNTIL:
        setUntil((EJinjaExpressionEvaluationWithoutBrackets)null);
        return;
      case AnsibleDslPackage.EUNTIL__RETRIES:
        setRetries((ENumberPassed)null);
        return;
      case AnsibleDslPackage.EUNTIL__DELAY:
        setDelay((ENumberPassed)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EUNTIL__UNTIL:
        return until != null;
      case AnsibleDslPackage.EUNTIL__RETRIES:
        return retries != null;
      case AnsibleDslPackage.EUNTIL__DELAY:
        return delay != null;
    }
    return super.eIsSet(featureID);
  }

} //EUntilImpl
