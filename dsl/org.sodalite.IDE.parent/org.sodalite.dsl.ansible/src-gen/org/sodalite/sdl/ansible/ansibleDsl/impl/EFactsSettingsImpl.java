/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings;
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EStringPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EFacts Settings</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EFactsSettingsImpl#getGather_facts <em>Gather facts</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EFactsSettingsImpl#getGather_subset <em>Gather subset</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EFactsSettingsImpl#getGather_timeout <em>Gather timeout</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EFactsSettingsImpl#getFact_path <em>Fact path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EFactsSettingsImpl extends MinimalEObjectImpl.Container implements EFactsSettings
{
  /**
   * The cached value of the '{@link #getGather_facts() <em>Gather facts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGather_facts()
   * @generated
   * @ordered
   */
  protected EBooleanPassed gather_facts;

  /**
   * The cached value of the '{@link #getGather_subset() <em>Gather subset</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGather_subset()
   * @generated
   * @ordered
   */
  protected EValuePassed gather_subset;

  /**
   * The cached value of the '{@link #getGather_timeout() <em>Gather timeout</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGather_timeout()
   * @generated
   * @ordered
   */
  protected ENumberPassed gather_timeout;

  /**
   * The cached value of the '{@link #getFact_path() <em>Fact path</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFact_path()
   * @generated
   * @ordered
   */
  protected EStringPassed fact_path;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EFactsSettingsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EFACTS_SETTINGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getGather_facts()
  {
    return gather_facts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGather_facts(EBooleanPassed newGather_facts, NotificationChain msgs)
  {
    EBooleanPassed oldGather_facts = gather_facts;
    gather_facts = newGather_facts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS, oldGather_facts, newGather_facts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGather_facts(EBooleanPassed newGather_facts)
  {
    if (newGather_facts != gather_facts)
    {
      NotificationChain msgs = null;
      if (gather_facts != null)
        msgs = ((InternalEObject)gather_facts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS, null, msgs);
      if (newGather_facts != null)
        msgs = ((InternalEObject)newGather_facts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS, null, msgs);
      msgs = basicSetGather_facts(newGather_facts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS, newGather_facts, newGather_facts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValuePassed getGather_subset()
  {
    return gather_subset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGather_subset(EValuePassed newGather_subset, NotificationChain msgs)
  {
    EValuePassed oldGather_subset = gather_subset;
    gather_subset = newGather_subset;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET, oldGather_subset, newGather_subset);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGather_subset(EValuePassed newGather_subset)
  {
    if (newGather_subset != gather_subset)
    {
      NotificationChain msgs = null;
      if (gather_subset != null)
        msgs = ((InternalEObject)gather_subset).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET, null, msgs);
      if (newGather_subset != null)
        msgs = ((InternalEObject)newGather_subset).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET, null, msgs);
      msgs = basicSetGather_subset(newGather_subset, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET, newGather_subset, newGather_subset));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumberPassed getGather_timeout()
  {
    return gather_timeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGather_timeout(ENumberPassed newGather_timeout, NotificationChain msgs)
  {
    ENumberPassed oldGather_timeout = gather_timeout;
    gather_timeout = newGather_timeout;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT, oldGather_timeout, newGather_timeout);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGather_timeout(ENumberPassed newGather_timeout)
  {
    if (newGather_timeout != gather_timeout)
    {
      NotificationChain msgs = null;
      if (gather_timeout != null)
        msgs = ((InternalEObject)gather_timeout).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT, null, msgs);
      if (newGather_timeout != null)
        msgs = ((InternalEObject)newGather_timeout).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT, null, msgs);
      msgs = basicSetGather_timeout(newGather_timeout, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT, newGather_timeout, newGather_timeout));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EStringPassed getFact_path()
  {
    return fact_path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFact_path(EStringPassed newFact_path, NotificationChain msgs)
  {
    EStringPassed oldFact_path = fact_path;
    fact_path = newFact_path;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH, oldFact_path, newFact_path);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFact_path(EStringPassed newFact_path)
  {
    if (newFact_path != fact_path)
    {
      NotificationChain msgs = null;
      if (fact_path != null)
        msgs = ((InternalEObject)fact_path).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH, null, msgs);
      if (newFact_path != null)
        msgs = ((InternalEObject)newFact_path).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH, null, msgs);
      msgs = basicSetFact_path(newFact_path, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH, newFact_path, newFact_path));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS:
        return basicSetGather_facts(null, msgs);
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET:
        return basicSetGather_subset(null, msgs);
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT:
        return basicSetGather_timeout(null, msgs);
      case AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH:
        return basicSetFact_path(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS:
        return getGather_facts();
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET:
        return getGather_subset();
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT:
        return getGather_timeout();
      case AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH:
        return getFact_path();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS:
        setGather_facts((EBooleanPassed)newValue);
        return;
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET:
        setGather_subset((EValuePassed)newValue);
        return;
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT:
        setGather_timeout((ENumberPassed)newValue);
        return;
      case AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH:
        setFact_path((EStringPassed)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS:
        setGather_facts((EBooleanPassed)null);
        return;
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET:
        setGather_subset((EValuePassed)null);
        return;
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT:
        setGather_timeout((ENumberPassed)null);
        return;
      case AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH:
        setFact_path((EStringPassed)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_FACTS:
        return gather_facts != null;
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_SUBSET:
        return gather_subset != null;
      case AnsibleDslPackage.EFACTS_SETTINGS__GATHER_TIMEOUT:
        return gather_timeout != null;
      case AnsibleDslPackage.EFACTS_SETTINGS__FACT_PATH:
        return fact_path != null;
    }
    return super.eIsSet(featureID);
  }

} //EFactsSettingsImpl
