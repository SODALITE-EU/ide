/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EIsExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EOperation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EOperation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EOperationImpl#getLeft_operand <em>Left operand</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EOperationImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EOperationImpl#getRight_operand <em>Right operand</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EOperationImpl extends MinimalEObjectImpl.Container implements EOperation
{
  /**
   * The cached value of the '{@link #getLeft_operand() <em>Left operand</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_operand()
   * @generated
   * @ordered
   */
  protected EIsExpression left_operand;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight_operand() <em>Right operand</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_operand()
   * @generated
   * @ordered
   */
  protected EOperation right_operand;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EOPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EIsExpression getLeft_operand()
  {
    return left_operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft_operand(EIsExpression newLeft_operand, NotificationChain msgs)
  {
    EIsExpression oldLeft_operand = left_operand;
    left_operand = newLeft_operand;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EOPERATION__LEFT_OPERAND, oldLeft_operand, newLeft_operand);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft_operand(EIsExpression newLeft_operand)
  {
    if (newLeft_operand != left_operand)
    {
      NotificationChain msgs = null;
      if (left_operand != null)
        msgs = ((InternalEObject)left_operand).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EOPERATION__LEFT_OPERAND, null, msgs);
      if (newLeft_operand != null)
        msgs = ((InternalEObject)newLeft_operand).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EOPERATION__LEFT_OPERAND, null, msgs);
      msgs = basicSetLeft_operand(newLeft_operand, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EOPERATION__LEFT_OPERAND, newLeft_operand, newLeft_operand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EOPERATION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EOperation getRight_operand()
  {
    return right_operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight_operand(EOperation newRight_operand, NotificationChain msgs)
  {
    EOperation oldRight_operand = right_operand;
    right_operand = newRight_operand;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EOPERATION__RIGHT_OPERAND, oldRight_operand, newRight_operand);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight_operand(EOperation newRight_operand)
  {
    if (newRight_operand != right_operand)
    {
      NotificationChain msgs = null;
      if (right_operand != null)
        msgs = ((InternalEObject)right_operand).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EOPERATION__RIGHT_OPERAND, null, msgs);
      if (newRight_operand != null)
        msgs = ((InternalEObject)newRight_operand).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EOPERATION__RIGHT_OPERAND, null, msgs);
      msgs = basicSetRight_operand(newRight_operand, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EOPERATION__RIGHT_OPERAND, newRight_operand, newRight_operand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EOPERATION__LEFT_OPERAND:
        return basicSetLeft_operand(null, msgs);
      case AnsibleDslPackage.EOPERATION__RIGHT_OPERAND:
        return basicSetRight_operand(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EOPERATION__LEFT_OPERAND:
        return getLeft_operand();
      case AnsibleDslPackage.EOPERATION__OPERATOR:
        return getOperator();
      case AnsibleDslPackage.EOPERATION__RIGHT_OPERAND:
        return getRight_operand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EOPERATION__LEFT_OPERAND:
        setLeft_operand((EIsExpression)newValue);
        return;
      case AnsibleDslPackage.EOPERATION__OPERATOR:
        setOperator((String)newValue);
        return;
      case AnsibleDslPackage.EOPERATION__RIGHT_OPERAND:
        setRight_operand((EOperation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EOPERATION__LEFT_OPERAND:
        setLeft_operand((EIsExpression)null);
        return;
      case AnsibleDslPackage.EOPERATION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case AnsibleDslPackage.EOPERATION__RIGHT_OPERAND:
        setRight_operand((EOperation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EOPERATION__LEFT_OPERAND:
        return left_operand != null;
      case AnsibleDslPackage.EOPERATION__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case AnsibleDslPackage.EOPERATION__RIGHT_OPERAND:
        return right_operand != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //EOperationImpl
