/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EAsynchronousSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EBase;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ECollectionListPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ECondition;
import org.sodalite.sdl.ansible.ansibleDsl.EConnection;
import org.sodalite.sdl.ansible.ansibleDsl.EDelegation;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EExecution;
import org.sodalite.sdl.ansible.ansibleDsl.EExecutionExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EListPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ELoop;
import org.sodalite.sdl.ansible.ansibleDsl.EModuleCall;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiable;
import org.sodalite.sdl.ansible.ansibleDsl.EPrivilegeEscalation;
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariable;
import org.sodalite.sdl.ansible.ansibleDsl.EStringPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ETask;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandlerErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EValidationMode;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ETask</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getPrivilege_escalation <em>Privilege escalation</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getValidation_mode <em>Validation mode</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getConnection <em>Connection</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getNo_log <em>No log</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getDebugger <em>Debugger</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getModule_defaults <em>Module defaults</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getEnvironment <em>Environment</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getCollections <em>Collections</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getTags <em>Tags</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getVariable_declarations <em>Variable declarations</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getExe_settings <em>Exe settings</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getDelegation <em>Delegation</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getWhen_expression <em>When expression</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getError_handling <em>Error handling</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getAction <em>Action</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getAsynchronous_settings <em>Asynchronous settings</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getModule <em>Module</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getNotifiables <em>Notifiables</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getLoop <em>Loop</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getRegister <em>Register</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ETaskImpl extends EBlockTaskImpl implements ETask
{
  /**
   * The cached value of the '{@link #getPrivilege_escalation() <em>Privilege escalation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrivilege_escalation()
   * @generated
   * @ordered
   */
  protected EPrivilegeEscalation privilege_escalation;

  /**
   * The cached value of the '{@link #getValidation_mode() <em>Validation mode</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidation_mode()
   * @generated
   * @ordered
   */
  protected EValidationMode validation_mode;

  /**
   * The cached value of the '{@link #getConnection() <em>Connection</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnection()
   * @generated
   * @ordered
   */
  protected EConnection connection;

  /**
   * The cached value of the '{@link #getNo_log() <em>No log</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNo_log()
   * @generated
   * @ordered
   */
  protected EBooleanPassed no_log;

  /**
   * The cached value of the '{@link #getDebugger() <em>Debugger</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDebugger()
   * @generated
   * @ordered
   */
  protected EStringPassed debugger;

  /**
   * The cached value of the '{@link #getModule_defaults() <em>Module defaults</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModule_defaults()
   * @generated
   * @ordered
   */
  protected EValuePassed module_defaults;

  /**
   * The cached value of the '{@link #getEnvironment() <em>Environment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironment()
   * @generated
   * @ordered
   */
  protected EValuePassed environment;

  /**
   * The cached value of the '{@link #getCollections() <em>Collections</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollections()
   * @generated
   * @ordered
   */
  protected ECollectionListPassed collections;

  /**
   * The cached value of the '{@link #getTags() <em>Tags</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTags()
   * @generated
   * @ordered
   */
  protected EListPassed tags;

  /**
   * The cached value of the '{@link #getVariable_declarations() <em>Variable declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable_declarations()
   * @generated
   * @ordered
   */
  protected EList<EVariableDeclaration> variable_declarations;

  /**
   * The cached value of the '{@link #getExe_settings() <em>Exe settings</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExe_settings()
   * @generated
   * @ordered
   */
  protected EExecutionExeSettings exe_settings;

  /**
   * The cached value of the '{@link #getDelegation() <em>Delegation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelegation()
   * @generated
   * @ordered
   */
  protected EDelegation delegation;

  /**
   * The cached value of the '{@link #getWhen_expression() <em>When expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhen_expression()
   * @generated
   * @ordered
   */
  protected ECondition when_expression;

  /**
   * The cached value of the '{@link #getError_handling() <em>Error handling</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getError_handling()
   * @generated
   * @ordered
   */
  protected ETaskHandlerErrorHandling error_handling;

  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected EStringPassed action;

  /**
   * The cached value of the '{@link #getAsynchronous_settings() <em>Asynchronous settings</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsynchronous_settings()
   * @generated
   * @ordered
   */
  protected EAsynchronousSettings asynchronous_settings;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EDictionaryPassed args;

  /**
   * The cached value of the '{@link #getModule() <em>Module</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModule()
   * @generated
   * @ordered
   */
  protected EModuleCall module;

  /**
   * The cached value of the '{@link #getNotifiables() <em>Notifiables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotifiables()
   * @generated
   * @ordered
   */
  protected EList<ENotifiable> notifiables;

  /**
   * The cached value of the '{@link #getLoop() <em>Loop</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoop()
   * @generated
   * @ordered
   */
  protected ELoop loop;

  /**
   * The cached value of the '{@link #getRegister() <em>Register</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegister()
   * @generated
   * @ordered
   */
  protected ERegisterVariable register;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected EStringPassed name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ETaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ETASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EPrivilegeEscalation getPrivilege_escalation()
  {
    return privilege_escalation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrivilege_escalation(EPrivilegeEscalation newPrivilege_escalation, NotificationChain msgs)
  {
    EPrivilegeEscalation oldPrivilege_escalation = privilege_escalation;
    privilege_escalation = newPrivilege_escalation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION, oldPrivilege_escalation, newPrivilege_escalation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrivilege_escalation(EPrivilegeEscalation newPrivilege_escalation)
  {
    if (newPrivilege_escalation != privilege_escalation)
    {
      NotificationChain msgs = null;
      if (privilege_escalation != null)
        msgs = ((InternalEObject)privilege_escalation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION, null, msgs);
      if (newPrivilege_escalation != null)
        msgs = ((InternalEObject)newPrivilege_escalation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION, null, msgs);
      msgs = basicSetPrivilege_escalation(newPrivilege_escalation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION, newPrivilege_escalation, newPrivilege_escalation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValidationMode getValidation_mode()
  {
    return validation_mode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValidation_mode(EValidationMode newValidation_mode, NotificationChain msgs)
  {
    EValidationMode oldValidation_mode = validation_mode;
    validation_mode = newValidation_mode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__VALIDATION_MODE, oldValidation_mode, newValidation_mode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValidation_mode(EValidationMode newValidation_mode)
  {
    if (newValidation_mode != validation_mode)
    {
      NotificationChain msgs = null;
      if (validation_mode != null)
        msgs = ((InternalEObject)validation_mode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__VALIDATION_MODE, null, msgs);
      if (newValidation_mode != null)
        msgs = ((InternalEObject)newValidation_mode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__VALIDATION_MODE, null, msgs);
      msgs = basicSetValidation_mode(newValidation_mode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__VALIDATION_MODE, newValidation_mode, newValidation_mode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConnection getConnection()
  {
    return connection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConnection(EConnection newConnection, NotificationChain msgs)
  {
    EConnection oldConnection = connection;
    connection = newConnection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__CONNECTION, oldConnection, newConnection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConnection(EConnection newConnection)
  {
    if (newConnection != connection)
    {
      NotificationChain msgs = null;
      if (connection != null)
        msgs = ((InternalEObject)connection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__CONNECTION, null, msgs);
      if (newConnection != null)
        msgs = ((InternalEObject)newConnection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__CONNECTION, null, msgs);
      msgs = basicSetConnection(newConnection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__CONNECTION, newConnection, newConnection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getNo_log()
  {
    return no_log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNo_log(EBooleanPassed newNo_log, NotificationChain msgs)
  {
    EBooleanPassed oldNo_log = no_log;
    no_log = newNo_log;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__NO_LOG, oldNo_log, newNo_log);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNo_log(EBooleanPassed newNo_log)
  {
    if (newNo_log != no_log)
    {
      NotificationChain msgs = null;
      if (no_log != null)
        msgs = ((InternalEObject)no_log).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__NO_LOG, null, msgs);
      if (newNo_log != null)
        msgs = ((InternalEObject)newNo_log).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__NO_LOG, null, msgs);
      msgs = basicSetNo_log(newNo_log, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__NO_LOG, newNo_log, newNo_log));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EStringPassed getDebugger()
  {
    return debugger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDebugger(EStringPassed newDebugger, NotificationChain msgs)
  {
    EStringPassed oldDebugger = debugger;
    debugger = newDebugger;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__DEBUGGER, oldDebugger, newDebugger);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDebugger(EStringPassed newDebugger)
  {
    if (newDebugger != debugger)
    {
      NotificationChain msgs = null;
      if (debugger != null)
        msgs = ((InternalEObject)debugger).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__DEBUGGER, null, msgs);
      if (newDebugger != null)
        msgs = ((InternalEObject)newDebugger).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__DEBUGGER, null, msgs);
      msgs = basicSetDebugger(newDebugger, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__DEBUGGER, newDebugger, newDebugger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValuePassed getModule_defaults()
  {
    return module_defaults;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModule_defaults(EValuePassed newModule_defaults, NotificationChain msgs)
  {
    EValuePassed oldModule_defaults = module_defaults;
    module_defaults = newModule_defaults;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__MODULE_DEFAULTS, oldModule_defaults, newModule_defaults);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModule_defaults(EValuePassed newModule_defaults)
  {
    if (newModule_defaults != module_defaults)
    {
      NotificationChain msgs = null;
      if (module_defaults != null)
        msgs = ((InternalEObject)module_defaults).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__MODULE_DEFAULTS, null, msgs);
      if (newModule_defaults != null)
        msgs = ((InternalEObject)newModule_defaults).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__MODULE_DEFAULTS, null, msgs);
      msgs = basicSetModule_defaults(newModule_defaults, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__MODULE_DEFAULTS, newModule_defaults, newModule_defaults));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValuePassed getEnvironment()
  {
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnvironment(EValuePassed newEnvironment, NotificationChain msgs)
  {
    EValuePassed oldEnvironment = environment;
    environment = newEnvironment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ENVIRONMENT, oldEnvironment, newEnvironment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnvironment(EValuePassed newEnvironment)
  {
    if (newEnvironment != environment)
    {
      NotificationChain msgs = null;
      if (environment != null)
        msgs = ((InternalEObject)environment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ENVIRONMENT, null, msgs);
      if (newEnvironment != null)
        msgs = ((InternalEObject)newEnvironment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ENVIRONMENT, null, msgs);
      msgs = basicSetEnvironment(newEnvironment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ENVIRONMENT, newEnvironment, newEnvironment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECollectionListPassed getCollections()
  {
    return collections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCollections(ECollectionListPassed newCollections, NotificationChain msgs)
  {
    ECollectionListPassed oldCollections = collections;
    collections = newCollections;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__COLLECTIONS, oldCollections, newCollections);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCollections(ECollectionListPassed newCollections)
  {
    if (newCollections != collections)
    {
      NotificationChain msgs = null;
      if (collections != null)
        msgs = ((InternalEObject)collections).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__COLLECTIONS, null, msgs);
      if (newCollections != null)
        msgs = ((InternalEObject)newCollections).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__COLLECTIONS, null, msgs);
      msgs = basicSetCollections(newCollections, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__COLLECTIONS, newCollections, newCollections));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EListPassed getTags()
  {
    return tags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTags(EListPassed newTags, NotificationChain msgs)
  {
    EListPassed oldTags = tags;
    tags = newTags;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__TAGS, oldTags, newTags);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTags(EListPassed newTags)
  {
    if (newTags != tags)
    {
      NotificationChain msgs = null;
      if (tags != null)
        msgs = ((InternalEObject)tags).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__TAGS, null, msgs);
      if (newTags != null)
        msgs = ((InternalEObject)newTags).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__TAGS, null, msgs);
      msgs = basicSetTags(newTags, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__TAGS, newTags, newTags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EVariableDeclaration> getVariable_declarations()
  {
    if (variable_declarations == null)
    {
      variable_declarations = new EObjectContainmentEList<EVariableDeclaration>(EVariableDeclaration.class, this, AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS);
    }
    return variable_declarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EExecutionExeSettings getExe_settings()
  {
    return exe_settings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExe_settings(EExecutionExeSettings newExe_settings, NotificationChain msgs)
  {
    EExecutionExeSettings oldExe_settings = exe_settings;
    exe_settings = newExe_settings;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__EXE_SETTINGS, oldExe_settings, newExe_settings);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExe_settings(EExecutionExeSettings newExe_settings)
  {
    if (newExe_settings != exe_settings)
    {
      NotificationChain msgs = null;
      if (exe_settings != null)
        msgs = ((InternalEObject)exe_settings).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__EXE_SETTINGS, null, msgs);
      if (newExe_settings != null)
        msgs = ((InternalEObject)newExe_settings).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__EXE_SETTINGS, null, msgs);
      msgs = basicSetExe_settings(newExe_settings, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__EXE_SETTINGS, newExe_settings, newExe_settings));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EDelegation getDelegation()
  {
    return delegation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDelegation(EDelegation newDelegation, NotificationChain msgs)
  {
    EDelegation oldDelegation = delegation;
    delegation = newDelegation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__DELEGATION, oldDelegation, newDelegation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelegation(EDelegation newDelegation)
  {
    if (newDelegation != delegation)
    {
      NotificationChain msgs = null;
      if (delegation != null)
        msgs = ((InternalEObject)delegation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__DELEGATION, null, msgs);
      if (newDelegation != null)
        msgs = ((InternalEObject)newDelegation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__DELEGATION, null, msgs);
      msgs = basicSetDelegation(newDelegation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__DELEGATION, newDelegation, newDelegation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECondition getWhen_expression()
  {
    return when_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhen_expression(ECondition newWhen_expression, NotificationChain msgs)
  {
    ECondition oldWhen_expression = when_expression;
    when_expression = newWhen_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__WHEN_EXPRESSION, oldWhen_expression, newWhen_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhen_expression(ECondition newWhen_expression)
  {
    if (newWhen_expression != when_expression)
    {
      NotificationChain msgs = null;
      if (when_expression != null)
        msgs = ((InternalEObject)when_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__WHEN_EXPRESSION, null, msgs);
      if (newWhen_expression != null)
        msgs = ((InternalEObject)newWhen_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__WHEN_EXPRESSION, null, msgs);
      msgs = basicSetWhen_expression(newWhen_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__WHEN_EXPRESSION, newWhen_expression, newWhen_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ETaskHandlerErrorHandling getError_handling()
  {
    return error_handling;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetError_handling(ETaskHandlerErrorHandling newError_handling, NotificationChain msgs)
  {
    ETaskHandlerErrorHandling oldError_handling = error_handling;
    error_handling = newError_handling;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ERROR_HANDLING, oldError_handling, newError_handling);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setError_handling(ETaskHandlerErrorHandling newError_handling)
  {
    if (newError_handling != error_handling)
    {
      NotificationChain msgs = null;
      if (error_handling != null)
        msgs = ((InternalEObject)error_handling).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ERROR_HANDLING, null, msgs);
      if (newError_handling != null)
        msgs = ((InternalEObject)newError_handling).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ERROR_HANDLING, null, msgs);
      msgs = basicSetError_handling(newError_handling, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ERROR_HANDLING, newError_handling, newError_handling));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EStringPassed getAction()
  {
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAction(EStringPassed newAction, NotificationChain msgs)
  {
    EStringPassed oldAction = action;
    action = newAction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ACTION, oldAction, newAction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAction(EStringPassed newAction)
  {
    if (newAction != action)
    {
      NotificationChain msgs = null;
      if (action != null)
        msgs = ((InternalEObject)action).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ACTION, null, msgs);
      if (newAction != null)
        msgs = ((InternalEObject)newAction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ACTION, null, msgs);
      msgs = basicSetAction(newAction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ACTION, newAction, newAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAsynchronousSettings getAsynchronous_settings()
  {
    return asynchronous_settings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAsynchronous_settings(EAsynchronousSettings newAsynchronous_settings, NotificationChain msgs)
  {
    EAsynchronousSettings oldAsynchronous_settings = asynchronous_settings;
    asynchronous_settings = newAsynchronous_settings;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS, oldAsynchronous_settings, newAsynchronous_settings);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsynchronous_settings(EAsynchronousSettings newAsynchronous_settings)
  {
    if (newAsynchronous_settings != asynchronous_settings)
    {
      NotificationChain msgs = null;
      if (asynchronous_settings != null)
        msgs = ((InternalEObject)asynchronous_settings).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS, null, msgs);
      if (newAsynchronous_settings != null)
        msgs = ((InternalEObject)newAsynchronous_settings).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS, null, msgs);
      msgs = basicSetAsynchronous_settings(newAsynchronous_settings, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS, newAsynchronous_settings, newAsynchronous_settings));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EDictionaryPassed getArgs()
  {
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArgs(EDictionaryPassed newArgs, NotificationChain msgs)
  {
    EDictionaryPassed oldArgs = args;
    args = newArgs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ARGS, oldArgs, newArgs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArgs(EDictionaryPassed newArgs)
  {
    if (newArgs != args)
    {
      NotificationChain msgs = null;
      if (args != null)
        msgs = ((InternalEObject)args).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ARGS, null, msgs);
      if (newArgs != null)
        msgs = ((InternalEObject)newArgs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__ARGS, null, msgs);
      msgs = basicSetArgs(newArgs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__ARGS, newArgs, newArgs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EModuleCall getModule()
  {
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModule(EModuleCall newModule, NotificationChain msgs)
  {
    EModuleCall oldModule = module;
    module = newModule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__MODULE, oldModule, newModule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModule(EModuleCall newModule)
  {
    if (newModule != module)
    {
      NotificationChain msgs = null;
      if (module != null)
        msgs = ((InternalEObject)module).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__MODULE, null, msgs);
      if (newModule != null)
        msgs = ((InternalEObject)newModule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__MODULE, null, msgs);
      msgs = basicSetModule(newModule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__MODULE, newModule, newModule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ENotifiable> getNotifiables()
  {
    if (notifiables == null)
    {
      notifiables = new EObjectContainmentEList<ENotifiable>(ENotifiable.class, this, AnsibleDslPackage.ETASK__NOTIFIABLES);
    }
    return notifiables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ELoop getLoop()
  {
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoop(ELoop newLoop, NotificationChain msgs)
  {
    ELoop oldLoop = loop;
    loop = newLoop;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__LOOP, oldLoop, newLoop);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLoop(ELoop newLoop)
  {
    if (newLoop != loop)
    {
      NotificationChain msgs = null;
      if (loop != null)
        msgs = ((InternalEObject)loop).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__LOOP, null, msgs);
      if (newLoop != null)
        msgs = ((InternalEObject)newLoop).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__LOOP, null, msgs);
      msgs = basicSetLoop(newLoop, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__LOOP, newLoop, newLoop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ERegisterVariable getRegister()
  {
    return register;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRegister(ERegisterVariable newRegister, NotificationChain msgs)
  {
    ERegisterVariable oldRegister = register;
    register = newRegister;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__REGISTER, oldRegister, newRegister);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegister(ERegisterVariable newRegister)
  {
    if (newRegister != register)
    {
      NotificationChain msgs = null;
      if (register != null)
        msgs = ((InternalEObject)register).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__REGISTER, null, msgs);
      if (newRegister != null)
        msgs = ((InternalEObject)newRegister).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__REGISTER, null, msgs);
      msgs = basicSetRegister(newRegister, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__REGISTER, newRegister, newRegister));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EStringPassed getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(EStringPassed newName, NotificationChain msgs)
  {
    EStringPassed oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(EStringPassed newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION:
        return basicSetPrivilege_escalation(null, msgs);
      case AnsibleDslPackage.ETASK__VALIDATION_MODE:
        return basicSetValidation_mode(null, msgs);
      case AnsibleDslPackage.ETASK__CONNECTION:
        return basicSetConnection(null, msgs);
      case AnsibleDslPackage.ETASK__NO_LOG:
        return basicSetNo_log(null, msgs);
      case AnsibleDslPackage.ETASK__DEBUGGER:
        return basicSetDebugger(null, msgs);
      case AnsibleDslPackage.ETASK__MODULE_DEFAULTS:
        return basicSetModule_defaults(null, msgs);
      case AnsibleDslPackage.ETASK__ENVIRONMENT:
        return basicSetEnvironment(null, msgs);
      case AnsibleDslPackage.ETASK__COLLECTIONS:
        return basicSetCollections(null, msgs);
      case AnsibleDslPackage.ETASK__TAGS:
        return basicSetTags(null, msgs);
      case AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS:
        return ((InternalEList<?>)getVariable_declarations()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.ETASK__EXE_SETTINGS:
        return basicSetExe_settings(null, msgs);
      case AnsibleDslPackage.ETASK__DELEGATION:
        return basicSetDelegation(null, msgs);
      case AnsibleDslPackage.ETASK__WHEN_EXPRESSION:
        return basicSetWhen_expression(null, msgs);
      case AnsibleDslPackage.ETASK__ERROR_HANDLING:
        return basicSetError_handling(null, msgs);
      case AnsibleDslPackage.ETASK__ACTION:
        return basicSetAction(null, msgs);
      case AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS:
        return basicSetAsynchronous_settings(null, msgs);
      case AnsibleDslPackage.ETASK__ARGS:
        return basicSetArgs(null, msgs);
      case AnsibleDslPackage.ETASK__MODULE:
        return basicSetModule(null, msgs);
      case AnsibleDslPackage.ETASK__NOTIFIABLES:
        return ((InternalEList<?>)getNotifiables()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.ETASK__LOOP:
        return basicSetLoop(null, msgs);
      case AnsibleDslPackage.ETASK__REGISTER:
        return basicSetRegister(null, msgs);
      case AnsibleDslPackage.ETASK__NAME:
        return basicSetName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION:
        return getPrivilege_escalation();
      case AnsibleDslPackage.ETASK__VALIDATION_MODE:
        return getValidation_mode();
      case AnsibleDslPackage.ETASK__CONNECTION:
        return getConnection();
      case AnsibleDslPackage.ETASK__NO_LOG:
        return getNo_log();
      case AnsibleDslPackage.ETASK__DEBUGGER:
        return getDebugger();
      case AnsibleDslPackage.ETASK__MODULE_DEFAULTS:
        return getModule_defaults();
      case AnsibleDslPackage.ETASK__ENVIRONMENT:
        return getEnvironment();
      case AnsibleDslPackage.ETASK__COLLECTIONS:
        return getCollections();
      case AnsibleDslPackage.ETASK__TAGS:
        return getTags();
      case AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS:
        return getVariable_declarations();
      case AnsibleDslPackage.ETASK__EXE_SETTINGS:
        return getExe_settings();
      case AnsibleDslPackage.ETASK__DELEGATION:
        return getDelegation();
      case AnsibleDslPackage.ETASK__WHEN_EXPRESSION:
        return getWhen_expression();
      case AnsibleDslPackage.ETASK__ERROR_HANDLING:
        return getError_handling();
      case AnsibleDslPackage.ETASK__ACTION:
        return getAction();
      case AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS:
        return getAsynchronous_settings();
      case AnsibleDslPackage.ETASK__ARGS:
        return getArgs();
      case AnsibleDslPackage.ETASK__MODULE:
        return getModule();
      case AnsibleDslPackage.ETASK__NOTIFIABLES:
        return getNotifiables();
      case AnsibleDslPackage.ETASK__LOOP:
        return getLoop();
      case AnsibleDslPackage.ETASK__REGISTER:
        return getRegister();
      case AnsibleDslPackage.ETASK__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION:
        setPrivilege_escalation((EPrivilegeEscalation)newValue);
        return;
      case AnsibleDslPackage.ETASK__VALIDATION_MODE:
        setValidation_mode((EValidationMode)newValue);
        return;
      case AnsibleDslPackage.ETASK__CONNECTION:
        setConnection((EConnection)newValue);
        return;
      case AnsibleDslPackage.ETASK__NO_LOG:
        setNo_log((EBooleanPassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__DEBUGGER:
        setDebugger((EStringPassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__MODULE_DEFAULTS:
        setModule_defaults((EValuePassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__ENVIRONMENT:
        setEnvironment((EValuePassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__COLLECTIONS:
        setCollections((ECollectionListPassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__TAGS:
        setTags((EListPassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS:
        getVariable_declarations().clear();
        getVariable_declarations().addAll((Collection<? extends EVariableDeclaration>)newValue);
        return;
      case AnsibleDslPackage.ETASK__EXE_SETTINGS:
        setExe_settings((EExecutionExeSettings)newValue);
        return;
      case AnsibleDslPackage.ETASK__DELEGATION:
        setDelegation((EDelegation)newValue);
        return;
      case AnsibleDslPackage.ETASK__WHEN_EXPRESSION:
        setWhen_expression((ECondition)newValue);
        return;
      case AnsibleDslPackage.ETASK__ERROR_HANDLING:
        setError_handling((ETaskHandlerErrorHandling)newValue);
        return;
      case AnsibleDslPackage.ETASK__ACTION:
        setAction((EStringPassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS:
        setAsynchronous_settings((EAsynchronousSettings)newValue);
        return;
      case AnsibleDslPackage.ETASK__ARGS:
        setArgs((EDictionaryPassed)newValue);
        return;
      case AnsibleDslPackage.ETASK__MODULE:
        setModule((EModuleCall)newValue);
        return;
      case AnsibleDslPackage.ETASK__NOTIFIABLES:
        getNotifiables().clear();
        getNotifiables().addAll((Collection<? extends ENotifiable>)newValue);
        return;
      case AnsibleDslPackage.ETASK__LOOP:
        setLoop((ELoop)newValue);
        return;
      case AnsibleDslPackage.ETASK__REGISTER:
        setRegister((ERegisterVariable)newValue);
        return;
      case AnsibleDslPackage.ETASK__NAME:
        setName((EStringPassed)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION:
        setPrivilege_escalation((EPrivilegeEscalation)null);
        return;
      case AnsibleDslPackage.ETASK__VALIDATION_MODE:
        setValidation_mode((EValidationMode)null);
        return;
      case AnsibleDslPackage.ETASK__CONNECTION:
        setConnection((EConnection)null);
        return;
      case AnsibleDslPackage.ETASK__NO_LOG:
        setNo_log((EBooleanPassed)null);
        return;
      case AnsibleDslPackage.ETASK__DEBUGGER:
        setDebugger((EStringPassed)null);
        return;
      case AnsibleDslPackage.ETASK__MODULE_DEFAULTS:
        setModule_defaults((EValuePassed)null);
        return;
      case AnsibleDslPackage.ETASK__ENVIRONMENT:
        setEnvironment((EValuePassed)null);
        return;
      case AnsibleDslPackage.ETASK__COLLECTIONS:
        setCollections((ECollectionListPassed)null);
        return;
      case AnsibleDslPackage.ETASK__TAGS:
        setTags((EListPassed)null);
        return;
      case AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS:
        getVariable_declarations().clear();
        return;
      case AnsibleDslPackage.ETASK__EXE_SETTINGS:
        setExe_settings((EExecutionExeSettings)null);
        return;
      case AnsibleDslPackage.ETASK__DELEGATION:
        setDelegation((EDelegation)null);
        return;
      case AnsibleDslPackage.ETASK__WHEN_EXPRESSION:
        setWhen_expression((ECondition)null);
        return;
      case AnsibleDslPackage.ETASK__ERROR_HANDLING:
        setError_handling((ETaskHandlerErrorHandling)null);
        return;
      case AnsibleDslPackage.ETASK__ACTION:
        setAction((EStringPassed)null);
        return;
      case AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS:
        setAsynchronous_settings((EAsynchronousSettings)null);
        return;
      case AnsibleDslPackage.ETASK__ARGS:
        setArgs((EDictionaryPassed)null);
        return;
      case AnsibleDslPackage.ETASK__MODULE:
        setModule((EModuleCall)null);
        return;
      case AnsibleDslPackage.ETASK__NOTIFIABLES:
        getNotifiables().clear();
        return;
      case AnsibleDslPackage.ETASK__LOOP:
        setLoop((ELoop)null);
        return;
      case AnsibleDslPackage.ETASK__REGISTER:
        setRegister((ERegisterVariable)null);
        return;
      case AnsibleDslPackage.ETASK__NAME:
        setName((EStringPassed)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION:
        return privilege_escalation != null;
      case AnsibleDslPackage.ETASK__VALIDATION_MODE:
        return validation_mode != null;
      case AnsibleDslPackage.ETASK__CONNECTION:
        return connection != null;
      case AnsibleDslPackage.ETASK__NO_LOG:
        return no_log != null;
      case AnsibleDslPackage.ETASK__DEBUGGER:
        return debugger != null;
      case AnsibleDslPackage.ETASK__MODULE_DEFAULTS:
        return module_defaults != null;
      case AnsibleDslPackage.ETASK__ENVIRONMENT:
        return environment != null;
      case AnsibleDslPackage.ETASK__COLLECTIONS:
        return collections != null;
      case AnsibleDslPackage.ETASK__TAGS:
        return tags != null;
      case AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS:
        return variable_declarations != null && !variable_declarations.isEmpty();
      case AnsibleDslPackage.ETASK__EXE_SETTINGS:
        return exe_settings != null;
      case AnsibleDslPackage.ETASK__DELEGATION:
        return delegation != null;
      case AnsibleDslPackage.ETASK__WHEN_EXPRESSION:
        return when_expression != null;
      case AnsibleDslPackage.ETASK__ERROR_HANDLING:
        return error_handling != null;
      case AnsibleDslPackage.ETASK__ACTION:
        return action != null;
      case AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS:
        return asynchronous_settings != null;
      case AnsibleDslPackage.ETASK__ARGS:
        return args != null;
      case AnsibleDslPackage.ETASK__MODULE:
        return module != null;
      case AnsibleDslPackage.ETASK__NOTIFIABLES:
        return notifiables != null && !notifiables.isEmpty();
      case AnsibleDslPackage.ETASK__LOOP:
        return loop != null;
      case AnsibleDslPackage.ETASK__REGISTER:
        return register != null;
      case AnsibleDslPackage.ETASK__NAME:
        return name != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == EBase.class)
    {
      switch (derivedFeatureID)
      {
        case AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION: return AnsibleDslPackage.EBASE__PRIVILEGE_ESCALATION;
        case AnsibleDslPackage.ETASK__VALIDATION_MODE: return AnsibleDslPackage.EBASE__VALIDATION_MODE;
        case AnsibleDslPackage.ETASK__CONNECTION: return AnsibleDslPackage.EBASE__CONNECTION;
        case AnsibleDslPackage.ETASK__NO_LOG: return AnsibleDslPackage.EBASE__NO_LOG;
        case AnsibleDslPackage.ETASK__DEBUGGER: return AnsibleDslPackage.EBASE__DEBUGGER;
        case AnsibleDslPackage.ETASK__MODULE_DEFAULTS: return AnsibleDslPackage.EBASE__MODULE_DEFAULTS;
        case AnsibleDslPackage.ETASK__ENVIRONMENT: return AnsibleDslPackage.EBASE__ENVIRONMENT;
        case AnsibleDslPackage.ETASK__COLLECTIONS: return AnsibleDslPackage.EBASE__COLLECTIONS;
        case AnsibleDslPackage.ETASK__TAGS: return AnsibleDslPackage.EBASE__TAGS;
        case AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS: return AnsibleDslPackage.EBASE__VARIABLE_DECLARATIONS;
        default: return -1;
      }
    }
    if (baseClass == EExecution.class)
    {
      switch (derivedFeatureID)
      {
        case AnsibleDslPackage.ETASK__EXE_SETTINGS: return AnsibleDslPackage.EEXECUTION__EXE_SETTINGS;
        case AnsibleDslPackage.ETASK__DELEGATION: return AnsibleDslPackage.EEXECUTION__DELEGATION;
        case AnsibleDslPackage.ETASK__WHEN_EXPRESSION: return AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION;
        default: return -1;
      }
    }
    if (baseClass == ETaskHandler.class)
    {
      switch (derivedFeatureID)
      {
        case AnsibleDslPackage.ETASK__ERROR_HANDLING: return AnsibleDslPackage.ETASK_HANDLER__ERROR_HANDLING;
        case AnsibleDslPackage.ETASK__ACTION: return AnsibleDslPackage.ETASK_HANDLER__ACTION;
        case AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS: return AnsibleDslPackage.ETASK_HANDLER__ASYNCHRONOUS_SETTINGS;
        case AnsibleDslPackage.ETASK__ARGS: return AnsibleDslPackage.ETASK_HANDLER__ARGS;
        case AnsibleDslPackage.ETASK__MODULE: return AnsibleDslPackage.ETASK_HANDLER__MODULE;
        case AnsibleDslPackage.ETASK__NOTIFIABLES: return AnsibleDslPackage.ETASK_HANDLER__NOTIFIABLES;
        case AnsibleDslPackage.ETASK__LOOP: return AnsibleDslPackage.ETASK_HANDLER__LOOP;
        case AnsibleDslPackage.ETASK__REGISTER: return AnsibleDslPackage.ETASK_HANDLER__REGISTER;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == EBase.class)
    {
      switch (baseFeatureID)
      {
        case AnsibleDslPackage.EBASE__PRIVILEGE_ESCALATION: return AnsibleDslPackage.ETASK__PRIVILEGE_ESCALATION;
        case AnsibleDslPackage.EBASE__VALIDATION_MODE: return AnsibleDslPackage.ETASK__VALIDATION_MODE;
        case AnsibleDslPackage.EBASE__CONNECTION: return AnsibleDslPackage.ETASK__CONNECTION;
        case AnsibleDslPackage.EBASE__NO_LOG: return AnsibleDslPackage.ETASK__NO_LOG;
        case AnsibleDslPackage.EBASE__DEBUGGER: return AnsibleDslPackage.ETASK__DEBUGGER;
        case AnsibleDslPackage.EBASE__MODULE_DEFAULTS: return AnsibleDslPackage.ETASK__MODULE_DEFAULTS;
        case AnsibleDslPackage.EBASE__ENVIRONMENT: return AnsibleDslPackage.ETASK__ENVIRONMENT;
        case AnsibleDslPackage.EBASE__COLLECTIONS: return AnsibleDslPackage.ETASK__COLLECTIONS;
        case AnsibleDslPackage.EBASE__TAGS: return AnsibleDslPackage.ETASK__TAGS;
        case AnsibleDslPackage.EBASE__VARIABLE_DECLARATIONS: return AnsibleDslPackage.ETASK__VARIABLE_DECLARATIONS;
        default: return -1;
      }
    }
    if (baseClass == EExecution.class)
    {
      switch (baseFeatureID)
      {
        case AnsibleDslPackage.EEXECUTION__EXE_SETTINGS: return AnsibleDslPackage.ETASK__EXE_SETTINGS;
        case AnsibleDslPackage.EEXECUTION__DELEGATION: return AnsibleDslPackage.ETASK__DELEGATION;
        case AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION: return AnsibleDslPackage.ETASK__WHEN_EXPRESSION;
        default: return -1;
      }
    }
    if (baseClass == ETaskHandler.class)
    {
      switch (baseFeatureID)
      {
        case AnsibleDslPackage.ETASK_HANDLER__ERROR_HANDLING: return AnsibleDslPackage.ETASK__ERROR_HANDLING;
        case AnsibleDslPackage.ETASK_HANDLER__ACTION: return AnsibleDslPackage.ETASK__ACTION;
        case AnsibleDslPackage.ETASK_HANDLER__ASYNCHRONOUS_SETTINGS: return AnsibleDslPackage.ETASK__ASYNCHRONOUS_SETTINGS;
        case AnsibleDslPackage.ETASK_HANDLER__ARGS: return AnsibleDslPackage.ETASK__ARGS;
        case AnsibleDslPackage.ETASK_HANDLER__MODULE: return AnsibleDslPackage.ETASK__MODULE;
        case AnsibleDslPackage.ETASK_HANDLER__NOTIFIABLES: return AnsibleDslPackage.ETASK__NOTIFIABLES;
        case AnsibleDslPackage.ETASK_HANDLER__LOOP: return AnsibleDslPackage.ETASK__LOOP;
        case AnsibleDslPackage.ETASK_HANDLER__REGISTER: return AnsibleDslPackage.ETASK__REGISTER;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //ETaskImpl
