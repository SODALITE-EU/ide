/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EAsynchronousSettings;
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EAsynchronous Settings</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EAsynchronousSettingsImpl#getAsync <em>Async</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EAsynchronousSettingsImpl#getPoll <em>Poll</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EAsynchronousSettingsImpl extends MinimalEObjectImpl.Container implements EAsynchronousSettings
{
  /**
   * The cached value of the '{@link #getAsync() <em>Async</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsync()
   * @generated
   * @ordered
   */
  protected ENumberPassed async;

  /**
   * The cached value of the '{@link #getPoll() <em>Poll</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoll()
   * @generated
   * @ordered
   */
  protected ENumberPassed poll;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EAsynchronousSettingsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EASYNCHRONOUS_SETTINGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumberPassed getAsync()
  {
    return async;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAsync(ENumberPassed newAsync, NotificationChain msgs)
  {
    ENumberPassed oldAsync = async;
    async = newAsync;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC, oldAsync, newAsync);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsync(ENumberPassed newAsync)
  {
    if (newAsync != async)
    {
      NotificationChain msgs = null;
      if (async != null)
        msgs = ((InternalEObject)async).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC, null, msgs);
      if (newAsync != null)
        msgs = ((InternalEObject)newAsync).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC, null, msgs);
      msgs = basicSetAsync(newAsync, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC, newAsync, newAsync));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumberPassed getPoll()
  {
    return poll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPoll(ENumberPassed newPoll, NotificationChain msgs)
  {
    ENumberPassed oldPoll = poll;
    poll = newPoll;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL, oldPoll, newPoll);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoll(ENumberPassed newPoll)
  {
    if (newPoll != poll)
    {
      NotificationChain msgs = null;
      if (poll != null)
        msgs = ((InternalEObject)poll).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL, null, msgs);
      if (newPoll != null)
        msgs = ((InternalEObject)newPoll).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL, null, msgs);
      msgs = basicSetPoll(newPoll, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL, newPoll, newPoll));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        return basicSetAsync(null, msgs);
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        return basicSetPoll(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        return getAsync();
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        return getPoll();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        setAsync((ENumberPassed)newValue);
        return;
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        setPoll((ENumberPassed)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        setAsync((ENumberPassed)null);
        return;
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        setPoll((ENumberPassed)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        return async != null;
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        return poll != null;
    }
    return super.eIsSet(featureID);
  }

} //EAsynchronousSettingsImpl
