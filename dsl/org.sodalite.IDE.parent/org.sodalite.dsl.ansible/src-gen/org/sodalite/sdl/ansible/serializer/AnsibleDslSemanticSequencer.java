/*
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EAndExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EAsynchronousSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EBlockAndRoleErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanAnsible;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ECollectionFQN;
import org.sodalite.sdl.ansible.ansibleDsl.ECollectionListInLine;
import org.sodalite.sdl.ansible.ansibleDsl.ECollectionListIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EConnection;
import org.sodalite.sdl.ansible.ansibleDsl.EDelegation;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryInLine;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryOfListIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPair;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPairJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EElifBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EExecutionExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EExternalFileInclusion;
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EForStatement;
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionCallOrVariable;
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionInput;
import org.sodalite.sdl.ansible.ansibleDsl.EHandler;
import org.sodalite.sdl.ansible.ansibleDsl.EIfBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EIfStatement;
import org.sodalite.sdl.ansible.ansibleDsl.EIndexOrLoopVariable;
import org.sodalite.sdl.ansible.ansibleDsl.EIndexOrLoopVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.EInputInterfaceVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.EInputOperationVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.EIsExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaAndString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaAndStringWithoutQuotes;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluation;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluationWithoutBrackets;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaOrString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaOrStringWithoutQuotes;
import org.sodalite.sdl.ansible.ansibleDsl.EListInLine;
import org.sodalite.sdl.ansible.ansibleDsl.EListIndented;
import org.sodalite.sdl.ansible.ansibleDsl.EListJinja;
import org.sodalite.sdl.ansible.ansibleDsl.EListOfConditions;
import org.sodalite.sdl.ansible.ansibleDsl.ELoopControl;
import org.sodalite.sdl.ansible.ansibleDsl.ELoopOverList;
import org.sodalite.sdl.ansible.ansibleDsl.EModuleCall;
import org.sodalite.sdl.ansible.ansibleDsl.EMultiLineExpression;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedTopic;
import org.sodalite.sdl.ansible.ansibleDsl.ENumber;
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EOperation;
import org.sodalite.sdl.ansible.ansibleDsl.EOrExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EPREFIX_TYPE;
import org.sodalite.sdl.ansible.ansibleDsl.EParameter;
import org.sodalite.sdl.ansible.ansibleDsl.EParenthesisedExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EPlay;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybook;
import org.sodalite.sdl.ansible.ansibleDsl.EPrivilegeEscalation;
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariable;
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusion;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusions;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleName;
import org.sodalite.sdl.ansible.ansibleDsl.ESetFactVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueJinja;
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueWithoutString;
import org.sodalite.sdl.ansible.ansibleDsl.ESliceNotation;
import org.sodalite.sdl.ansible.ansibleDsl.ESpecialVariable;
import org.sodalite.sdl.ansible.ansibleDsl.ESquareBracketElement;
import org.sodalite.sdl.ansible.ansibleDsl.ETailElement;
import org.sodalite.sdl.ansible.ansibleDsl.ETask;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandlerErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.ETruthExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EUntil;
import org.sodalite.sdl.ansible.ansibleDsl.EUsedByBody;
import org.sodalite.sdl.ansible.ansibleDsl.EValidationMode;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclaration;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclarationVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.EWithLookup;
import org.sodalite.sdl.ansible.ansibleDsl.KBEInputInterfaceVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.KBEInputOperationVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.KBNode;
import org.sodalite.sdl.ansible.ansibleDsl.LocalEInputInterfaceVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.LocalEInputOperationVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.LocalNode;
import org.sodalite.sdl.ansible.services.AnsibleDslGrammarAccess;

@SuppressWarnings("all")
public class AnsibleDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AnsibleDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnsibleDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnsibleDslPackage.EAND_EXPRESSION:
				sequence_EAndExpression(context, (EAndExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS:
				sequence_EAsynchronousSettings(context, (EAsynchronousSettings) semanticObject); 
				return; 
			case AnsibleDslPackage.EBLOCK:
				sequence_EBlock(context, (EBlock) semanticObject); 
				return; 
			case AnsibleDslPackage.EBLOCK_AND_ROLE_ERROR_HANDLING:
				sequence_EBlockAndRoleErrorHandling(context, (EBlockAndRoleErrorHandling) semanticObject); 
				return; 
			case AnsibleDslPackage.EBOOLEAN_ANSIBLE:
				sequence_EBooleanAnsible(context, (EBooleanAnsible) semanticObject); 
				return; 
			case AnsibleDslPackage.EBOOLEAN_PASSED:
				sequence_EBooleanPassed(context, (EBooleanPassed) semanticObject); 
				return; 
			case AnsibleDslPackage.ECOLLECTION_FQN:
				sequence_ECollectionFQN(context, (ECollectionFQN) semanticObject); 
				return; 
			case AnsibleDslPackage.ECOLLECTION_LIST_IN_LINE:
				sequence_ECollectionListInLine(context, (ECollectionListInLine) semanticObject); 
				return; 
			case AnsibleDslPackage.ECOLLECTION_LIST_INDENTED:
				sequence_ECollectionListIndented(context, (ECollectionListIndented) semanticObject); 
				return; 
			case AnsibleDslPackage.ECONNECTION:
				sequence_EConnection(context, (EConnection) semanticObject); 
				return; 
			case AnsibleDslPackage.EDELEGATION:
				sequence_EDelegation(context, (EDelegation) semanticObject); 
				return; 
			case AnsibleDslPackage.EDICTIONARY_IN_LINE:
				sequence_EDictionaryInLine(context, (EDictionaryInLine) semanticObject); 
				return; 
			case AnsibleDslPackage.EDICTIONARY_INDENTED:
				sequence_EDictionaryIndented(context, (EDictionaryIndented) semanticObject); 
				return; 
			case AnsibleDslPackage.EDICTIONARY_JINJA:
				sequence_EDictionaryJinja(context, (EDictionaryJinja) semanticObject); 
				return; 
			case AnsibleDslPackage.EDICTIONARY_OF_LIST_INDENTED:
				sequence_EDictionaryOfListIndented(context, (EDictionaryOfListIndented) semanticObject); 
				return; 
			case AnsibleDslPackage.EDICTIONARY_PAIR:
				sequence_EDictionaryPair(context, (EDictionaryPair) semanticObject); 
				return; 
			case AnsibleDslPackage.EDICTIONARY_PAIR_JINJA:
				sequence_EDictionaryPairJinja(context, (EDictionaryPairJinja) semanticObject); 
				return; 
			case AnsibleDslPackage.EELIF_BLOCK:
				sequence_EElifBlock(context, (EElifBlock) semanticObject); 
				return; 
			case AnsibleDslPackage.EEXECUTION_EXE_SETTINGS:
				sequence_EExecutionExeSettings(context, (EExecutionExeSettings) semanticObject); 
				return; 
			case AnsibleDslPackage.EEXTERNAL_FILE_INCLUSION:
				sequence_EExternalFileInclusion(context, (EExternalFileInclusion) semanticObject); 
				return; 
			case AnsibleDslPackage.EFACTS_SETTINGS:
				sequence_EFactsSettings(context, (EFactsSettings) semanticObject); 
				return; 
			case AnsibleDslPackage.EFILTERED_EXPRESSION:
				sequence_EFilteredExpression(context, (EFilteredExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.EFOR_STATEMENT:
				sequence_EForStatement(context, (EForStatement) semanticObject); 
				return; 
			case AnsibleDslPackage.EFUNCTION_CALL_OR_VARIABLE:
				sequence_EFunctionCallOrVariable(context, (EFunctionCallOrVariable) semanticObject); 
				return; 
			case AnsibleDslPackage.EFUNCTION_INPUT:
				sequence_EFunctionInput(context, (EFunctionInput) semanticObject); 
				return; 
			case AnsibleDslPackage.EHANDLER:
				sequence_EHandler(context, (EHandler) semanticObject); 
				return; 
			case AnsibleDslPackage.EIF_BLOCK:
				sequence_EIfBlock(context, (EIfBlock) semanticObject); 
				return; 
			case AnsibleDslPackage.EIF_STATEMENT:
				sequence_EIfStatement(context, (EIfStatement) semanticObject); 
				return; 
			case AnsibleDslPackage.EINDEX_OR_LOOP_VARIABLE:
				sequence_EIndexOrLoopVariable(context, (EIndexOrLoopVariable) semanticObject); 
				return; 
			case AnsibleDslPackage.EINDEX_OR_LOOP_VARIABLE_REFERENCE:
				sequence_EIndexOrLoopVariableReference(context, (EIndexOrLoopVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.EINPUT_INTERFACE_VARIABLE_REFERENCE:
				sequence_EInputInterfaceVariableReference(context, (EInputInterfaceVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.EINPUT_OPERATION_VARIABLE_REFERENCE:
				sequence_EInputOperationVariableReference(context, (EInputOperationVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.EIS_EXPRESSION:
				sequence_EIsExpression(context, (EIsExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.EJINJA_AND_STRING:
				sequence_EJinjaAndString(context, (EJinjaAndString) semanticObject); 
				return; 
			case AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES:
				sequence_EJinjaAndStringWithoutQuotes(context, (EJinjaAndStringWithoutQuotes) semanticObject); 
				return; 
			case AnsibleDslPackage.EJINJA_EXPRESSION_EVALUATION:
				sequence_EJinjaExpressionEvaluation(context, (EJinjaExpressionEvaluation) semanticObject); 
				return; 
			case AnsibleDslPackage.EJINJA_EXPRESSION_EVALUATION_WITHOUT_BRACKETS:
				sequence_EJinjaExpressionEvaluationWithoutBrackets(context, (EJinjaExpressionEvaluationWithoutBrackets) semanticObject); 
				return; 
			case AnsibleDslPackage.EJINJA_OR_STRING:
				sequence_EJinjaOrString(context, (EJinjaOrString) semanticObject); 
				return; 
			case AnsibleDslPackage.EJINJA_OR_STRING_WITHOUT_QUOTES:
				sequence_EJinjaOrStringWithoutQuotes(context, (EJinjaOrStringWithoutQuotes) semanticObject); 
				return; 
			case AnsibleDslPackage.ELIST_IN_LINE:
				sequence_EListInLine(context, (EListInLine) semanticObject); 
				return; 
			case AnsibleDslPackage.ELIST_INDENTED:
				sequence_EListIndented(context, (EListIndented) semanticObject); 
				return; 
			case AnsibleDslPackage.ELIST_JINJA:
				sequence_EListJinja(context, (EListJinja) semanticObject); 
				return; 
			case AnsibleDslPackage.ELIST_OF_CONDITIONS:
				sequence_EListOfConditions(context, (EListOfConditions) semanticObject); 
				return; 
			case AnsibleDslPackage.ELOOP_CONTROL:
				sequence_ELoopControl(context, (ELoopControl) semanticObject); 
				return; 
			case AnsibleDslPackage.ELOOP_OVER_LIST:
				sequence_ELoopOverList(context, (ELoopOverList) semanticObject); 
				return; 
			case AnsibleDslPackage.EMODULE_CALL:
				sequence_EModuleCall(context, (EModuleCall) semanticObject); 
				return; 
			case AnsibleDslPackage.EMULTI_LINE_EXPRESSION:
				sequence_EMultiLineExpression(context, (EMultiLineExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.ENOTIFIED_HANDLER:
				sequence_ENotifiedHandler(context, (ENotifiedHandler) semanticObject); 
				return; 
			case AnsibleDslPackage.ENOTIFIED_TOPIC:
				sequence_ENotifiedTopic(context, (ENotifiedTopic) semanticObject); 
				return; 
			case AnsibleDslPackage.ENUMBER:
				sequence_ENumber(context, (ENumber) semanticObject); 
				return; 
			case AnsibleDslPackage.ENUMBER_PASSED:
				sequence_ENumberPassed(context, (ENumberPassed) semanticObject); 
				return; 
			case AnsibleDslPackage.EOPERATION:
				sequence_EOperation(context, (EOperation) semanticObject); 
				return; 
			case AnsibleDslPackage.EOR_EXPRESSION:
				sequence_EOrExpression(context, (EOrExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.EPREFIX_TYPE:
				sequence_EPREFIX_TYPE(context, (EPREFIX_TYPE) semanticObject); 
				return; 
			case AnsibleDslPackage.EPARAMETER:
				sequence_EParameter(context, (EParameter) semanticObject); 
				return; 
			case AnsibleDslPackage.EPARENTHESISED_EXPRESSION:
				sequence_EParenthesisedExpression(context, (EParenthesisedExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.EPLAY:
				sequence_EPlay(context, (EPlay) semanticObject); 
				return; 
			case AnsibleDslPackage.EPLAY_ERROR_HANDLING:
				sequence_EPlayErrorHandling(context, (EPlayErrorHandling) semanticObject); 
				return; 
			case AnsibleDslPackage.EPLAY_EXE_SETTINGS:
				sequence_EPlayExeSettings(context, (EPlayExeSettings) semanticObject); 
				return; 
			case AnsibleDslPackage.EPLAYBOOK:
				sequence_EPlaybook(context, (EPlaybook) semanticObject); 
				return; 
			case AnsibleDslPackage.EPRIVILEGE_ESCALATION:
				sequence_EPrivilegeEscalation(context, (EPrivilegeEscalation) semanticObject); 
				return; 
			case AnsibleDslPackage.EREGISTER_VARIABLE:
				sequence_ERegisterVariable(context, (ERegisterVariable) semanticObject); 
				return; 
			case AnsibleDslPackage.EREGISTER_VARIABLE_REFERENCE:
				sequence_ERegisterVariableReference(context, (ERegisterVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.EROLE_INCLUSION:
				sequence_ERoleInclusion(context, (ERoleInclusion) semanticObject); 
				return; 
			case AnsibleDslPackage.EROLE_INCLUSIONS:
				sequence_ERoleInclusions(context, (ERoleInclusions) semanticObject); 
				return; 
			case AnsibleDslPackage.EROLE_NAME:
				sequence_ERoleName(context, (ERoleName) semanticObject); 
				return; 
			case AnsibleDslPackage.ESET_FACT_VARIABLE_REFERENCE:
				sequence_ESetFactVariableReference(context, (ESetFactVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.ESIMPLE_VALUE_JINJA:
				sequence_ESimpleValueJinja(context, (ESimpleValueJinja) semanticObject); 
				return; 
			case AnsibleDslPackage.ESIMPLE_VALUE_WITHOUT_STRING:
				sequence_ESimpleValueWithoutString(context, (ESimpleValueWithoutString) semanticObject); 
				return; 
			case AnsibleDslPackage.ESLICE_NOTATION:
				sequence_ESliceNotation(context, (ESliceNotation) semanticObject); 
				return; 
			case AnsibleDslPackage.ESPECIAL_VARIABLE:
				sequence_ESpecialVariable(context, (ESpecialVariable) semanticObject); 
				return; 
			case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT:
				sequence_ESquareBracketElement(context, (ESquareBracketElement) semanticObject); 
				return; 
			case AnsibleDslPackage.ETAIL_ELEMENT:
				sequence_ETailElement(context, (ETailElement) semanticObject); 
				return; 
			case AnsibleDslPackage.ETASK:
				sequence_ETask(context, (ETask) semanticObject); 
				return; 
			case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING:
				sequence_ETaskHandlerErrorHandling(context, (ETaskHandlerErrorHandling) semanticObject); 
				return; 
			case AnsibleDslPackage.ETRUTH_EXPRESSION:
				sequence_ETruthExpression(context, (ETruthExpression) semanticObject); 
				return; 
			case AnsibleDslPackage.EUNTIL:
				sequence_EUntil(context, (EUntil) semanticObject); 
				return; 
			case AnsibleDslPackage.EUSED_BY_BODY:
				sequence_EUsedByBody(context, (EUsedByBody) semanticObject); 
				return; 
			case AnsibleDslPackage.EVALIDATION_MODE:
				sequence_EValidationMode(context, (EValidationMode) semanticObject); 
				return; 
			case AnsibleDslPackage.EVARIABLE_DECLARATION:
				sequence_EVariableDeclaration(context, (EVariableDeclaration) semanticObject); 
				return; 
			case AnsibleDslPackage.EVARIABLE_DECLARATION_VARIABLE_REFERENCE:
				sequence_EVariableDeclarationVariableReference(context, (EVariableDeclarationVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.EWITH_LOOKUP:
				sequence_EWithLookup(context, (EWithLookup) semanticObject); 
				return; 
			case AnsibleDslPackage.KBE_INPUT_INTERFACE_VARIABLE_REFERENCE:
				sequence_KBEInputInterfaceVariableReference(context, (KBEInputInterfaceVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.KBE_INPUT_OPERATION_VARIABLE_REFERENCE:
				sequence_KBEInputOperationVariableReference(context, (KBEInputOperationVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.KB_NODE:
				sequence_KBNode(context, (KBNode) semanticObject); 
				return; 
			case AnsibleDslPackage.LOCAL_EINPUT_INTERFACE_VARIABLE_REFERENCE:
				sequence_LocalEInputInterfaceVariableReference(context, (LocalEInputInterfaceVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.LOCAL_EINPUT_OPERATION_VARIABLE_REFERENCE:
				sequence_LocalEInputOperationVariableReference(context, (LocalEInputOperationVariableReference) semanticObject); 
				return; 
			case AnsibleDslPackage.LOCAL_NODE:
				sequence_LocalNode(context, (LocalNode) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EAndExpression returns EAndExpression
	 *
	 * Constraint:
	 *     (left_and=ETruthExpression right_and=EAndExpression?)
	 */
	protected void sequence_EAndExpression(ISerializationContext context, EAndExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAsynchronousSettings returns EAsynchronousSettings
	 *
	 * Constraint:
	 *     (async=ENumberPassed | poll=ENumberPassed)+
	 */
	protected void sequence_EAsynchronousSettings(ISerializationContext context, EAsynchronousSettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EErrorHandling returns EBlockAndRoleErrorHandling
	 *     EBlockAndRoleErrorHandling returns EBlockAndRoleErrorHandling
	 *
	 * Constraint:
	 *     (any_errors_fatal=EBooleanPassed | ignore_errors=EBooleanPassed | ignore_unreachable=EBooleanPassed)+
	 */
	protected void sequence_EBlockAndRoleErrorHandling(ISerializationContext context, EBlockAndRoleErrorHandling semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBase returns EBlock
	 *     EExecution returns EBlock
	 *     EBlockTaskRole returns EBlock
	 *     EBlockTask returns EBlock
	 *     EBlock returns EBlock
	 *
	 * Constraint:
	 *     (
	 *         name=EStringPassed | 
	 *         privilege_escalation=EPrivilegeEscalation | 
	 *         validation_mode=EValidationMode | 
	 *         connection=EConnection | 
	 *         no_log=EBooleanPassed | 
	 *         debugger=EStringPassed | 
	 *         module_defaults=EValuePassed | 
	 *         environment=EValuePassed | 
	 *         collections=ECollectionListPassed | 
	 *         tags=EListPassed | 
	 *         variable_declarations+=EVariableDeclaration | 
	 *         exe_settings=EExecutionExeSettings | 
	 *         delegation=EDelegation | 
	 *         when_expression=ECondition | 
	 *         error_handling=EBlockAndRoleErrorHandling | 
	 *         tasks+=ETask | 
	 *         rescue_tasks+=ETask | 
	 *         always_tasks+=ETask
	 *     )+
	 */
	protected void sequence_EBlock(ISerializationContext context, EBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBooleanAnsible returns EBooleanAnsible
	 *
	 * Constraint:
	 *     (boolean_ansible=BOOLEAN | boolean_ansible=BOOLEAN_ONLY_ANSIBLE)
	 */
	protected void sequence_EBooleanAnsible(ISerializationContext context, EBooleanAnsible semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBooleanPassed returns EBooleanPassed
	 *
	 * Constraint:
	 *     (boolean_passed=EBooleanAnsible | boolean_passed_null=NULL)
	 */
	protected void sequence_EBooleanPassed(ISerializationContext context, EBooleanPassed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECollectionFQN returns ECollectionFQN
	 *
	 * Constraint:
	 *     (namespaceOrFqn=EStringWithoutQuotesPassed collectionName=EStringWithoutQuotesPassed?)
	 */
	protected void sequence_ECollectionFQN(ISerializationContext context, ECollectionFQN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECollectionListPassed returns ECollectionListInLine
	 *     ECollectionList returns ECollectionListInLine
	 *     ECollectionListInLine returns ECollectionListInLine
	 *
	 * Constraint:
	 *     (elements+=ECollectionFQN elements+=ECollectionFQN*)
	 */
	protected void sequence_ECollectionListInLine(ISerializationContext context, ECollectionListInLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECollectionListPassed returns ECollectionListIndented
	 *     ECollectionList returns ECollectionListIndented
	 *     ECollectionListIndented returns ECollectionListIndented
	 *
	 * Constraint:
	 *     elements+=ECollectionFQN+
	 */
	protected void sequence_ECollectionListIndented(ISerializationContext context, ECollectionListIndented semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConnection returns EConnection
	 *
	 * Constraint:
	 *     (connection=EStringPassed | port=ENumberPassed | remote_user=EStringPassed)+
	 */
	protected void sequence_EConnection(ISerializationContext context, EConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDelegation returns EDelegation
	 *
	 * Constraint:
	 *     (delegate_to=EStringPassed | delegate_facts=EBooleanPassed)+
	 */
	protected void sequence_EDelegation(ISerializationContext context, EDelegation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassed returns EDictionaryInLine
	 *     EComposedValue returns EDictionaryInLine
	 *     EValueWithoutString returns EDictionaryInLine
	 *     EDictionary returns EDictionaryInLine
	 *     EDictionaryInLine returns EDictionaryInLine
	 *     EElementOfListIndented returns EDictionaryInLine
	 *     EDictionaryPassed returns EDictionaryInLine
	 *
	 * Constraint:
	 *     (dictionary_pairs+=EDictionaryPair dictionary_pairs+=EDictionaryPair*)
	 */
	protected void sequence_EDictionaryInLine(ISerializationContext context, EDictionaryInLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassed returns EDictionaryIndented
	 *     EComposedValue returns EDictionaryIndented
	 *     EValueWithoutString returns EDictionaryIndented
	 *     EDictionary returns EDictionaryIndented
	 *     EDictionaryIndented returns EDictionaryIndented
	 *     EDictionaryPassed returns EDictionaryIndented
	 *
	 * Constraint:
	 *     dictionary_pairs+=EDictionaryPair+
	 */
	protected void sequence_EDictionaryIndented(ISerializationContext context, EDictionaryIndented semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EDictionaryJinja
	 *     EComposedValueJinja returns EDictionaryJinja
	 *     EValueJinja returns EDictionaryJinja
	 *     EDictionaryJinja returns EDictionaryJinja
	 *
	 * Constraint:
	 *     (dictionary_pairs+=EDictionaryPairJinja dictionary_pairs+=EDictionaryPairJinja*)?
	 */
	protected void sequence_EDictionaryJinja(ISerializationContext context, EDictionaryJinja semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDictionaryOfListIndented returns EDictionaryOfListIndented
	 *     EElementOfListIndented returns EDictionaryOfListIndented
	 *
	 * Constraint:
	 *     dictionary_pairs+=EDictionaryPair+
	 */
	protected void sequence_EDictionaryOfListIndented(ISerializationContext context, EDictionaryOfListIndented semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDictionaryPairJinja returns EDictionaryPairJinja
	 *
	 * Constraint:
	 *     ((name=ID | name=STRING) value=EJinjaExpressionEvaluationWithoutBrackets)
	 */
	protected void sequence_EDictionaryPairJinja(ISerializationContext context, EDictionaryPairJinja semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDictionaryPair returns EDictionaryPair
	 *
	 * Constraint:
	 *     (name=ID value=EValuePassed)
	 */
	protected void sequence_EDictionaryPair(ISerializationContext context, EDictionaryPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EDICTIONARY_PAIR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EDICTIONARY_PAIR__NAME));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EDICTIONARY_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EDICTIONARY_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEDictionaryPairAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEDictionaryPairAccess().getValueEValuePassedParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EElifBlock returns EElifBlock
	 *
	 * Constraint:
	 *     ((elif_block_sign='+' | elif_block_sign='-')? elif_condition=EFilteredExpression elif_body=EValuePassed)
	 */
	protected void sequence_EElifBlock(ISerializationContext context, EElifBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EExeSettings returns EExecutionExeSettings
	 *     EExecutionExeSettings returns EExecutionExeSettings
	 *
	 * Constraint:
	 *     (throttle=ENumberPassed | run_once=EBooleanPassed)+
	 */
	protected void sequence_EExecutionExeSettings(ISerializationContext context, EExecutionExeSettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EExternalFileInclusion returns EExternalFileInclusion
	 *
	 * Constraint:
	 *     ((import_playbook=STRING | include=STRING) when_expression=ECondition?)
	 */
	protected void sequence_EExternalFileInclusion(ISerializationContext context, EExternalFileInclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EFactsSettings returns EFactsSettings
	 *
	 * Constraint:
	 *     (gather_facts=EBooleanPassed | gather_subset=EValuePassed | gather_timeout=ENumberPassed | fact_path=EStringPassed)+
	 */
	protected void sequence_EFactsSettings(ISerializationContext context, EFactsSettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EFilteredExpression returns EFilteredExpression
	 *
	 * Constraint:
	 *     (to_filter=EOrExpression filter=EFilteredExpression?)
	 */
	protected void sequence_EFilteredExpression(ISerializationContext context, EFilteredExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaOrString returns EForStatement
	 *     EJinjaOrStringWithoutQuotes returns EForStatement
	 *     EJinjaStatement returns EForStatement
	 *     EForStatement returns EForStatement
	 *     ECollectionListPassed returns EForStatement
	 *     EDictionaryPassed returns EForStatement
	 *     EListPassed returns EForStatement
	 *     ENumberPassed returns EForStatement
	 *     EBooleanPassed returns EForStatement
	 *
	 * Constraint:
	 *     (
	 *         (for_block_sign='+' | for_block_sign='-')? 
	 *         identifiers+=ID 
	 *         identifiers+=ID* 
	 *         list=EFilteredExpression 
	 *         condition=EFilteredExpression? 
	 *         recursive=ID? 
	 *         for_body=EValuePassed 
	 *         ((else_block_sign='+' | else_block_sign='-')? else_body=EValuePassed)? 
	 *         (endfor_block_sign='+' | endfor_block_sign='-')?
	 *     )
	 */
	protected void sequence_EForStatement(ISerializationContext context, EForStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EFunctionCallOrVariable
	 *     EFunctionCallOrVariable returns EFunctionCallOrVariable
	 *
	 * Constraint:
	 *     (name=ID ((parameters+=EFunctionInput parameters+=EFunctionInput*) | empty_brackets='()')?)
	 */
	protected void sequence_EFunctionCallOrVariable(ISerializationContext context, EFunctionCallOrVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EFunctionInput returns EFunctionInput
	 *
	 * Constraint:
	 *     (parameter_name=ID? value=EJinjaExpressionEvaluationWithoutBrackets)
	 */
	protected void sequence_EFunctionInput(ISerializationContext context, EFunctionInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBase returns EHandler
	 *     EExecution returns EHandler
	 *     ETaskHandler returns EHandler
	 *     EHandler returns EHandler
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=STRING | 
	 *             privilege_escalation=EPrivilegeEscalation | 
	 *             validation_mode=EValidationMode | 
	 *             connection=EConnection | 
	 *             no_log=EBooleanPassed | 
	 *             debugger=EStringPassed | 
	 *             module_defaults=EValuePassed | 
	 *             environment=EValuePassed | 
	 *             collections=ECollectionListPassed | 
	 *             tags=EListPassed | 
	 *             variable_declarations+=EVariableDeclaration | 
	 *             exe_settings=EExecutionExeSettings | 
	 *             delegation=EDelegation | 
	 *             when_expression=ECondition | 
	 *             error_handling=ETaskHandlerErrorHandling | 
	 *             action=EStringPassed | 
	 *             asynchronous_settings=EAsynchronousSettings | 
	 *             args=EDictionaryPassed | 
	 *             module=EModuleCall | 
	 *             loop=ELoop | 
	 *             register=ERegisterVariable
	 *         )? 
	 *         (listen_to+=[ENotifiedTopic|STRING] listen_to+=[ENotifiedTopic|STRING]*)? 
	 *         (notifiables+=ENotifiable notifiables+=ENotifiable*)?
	 *     )+
	 */
	protected void sequence_EHandler(ISerializationContext context, EHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EIfBlock returns EIfBlock
	 *
	 * Constraint:
	 *     (if_condition=EFilteredExpression else_expression=EFilteredExpression?)
	 */
	protected void sequence_EIfBlock(ISerializationContext context, EIfBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaOrString returns EIfStatement
	 *     EJinjaOrStringWithoutQuotes returns EIfStatement
	 *     EJinjaStatement returns EIfStatement
	 *     EIfStatement returns EIfStatement
	 *     ECollectionListPassed returns EIfStatement
	 *     EDictionaryPassed returns EIfStatement
	 *     EListPassed returns EIfStatement
	 *     ENumberPassed returns EIfStatement
	 *     EBooleanPassed returns EIfStatement
	 *
	 * Constraint:
	 *     (
	 *         (if_block_sign='+' | if_block_sign='-')? 
	 *         if_condition=EFilteredExpression 
	 *         if_body=EValuePassed 
	 *         elif_blocks+=EElifBlock* 
	 *         ((else_block_sign='+' | else_block_sign='-')? else_body=EValuePassed)? 
	 *         (endif_block_sign='+' | endif_block_sign='-')?
	 *     )
	 */
	protected void sequence_EIfStatement(ISerializationContext context, EIfStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EIndexOrLoopVariableReference
	 *     EIndexOrLoopVariableReference returns EIndexOrLoopVariableReference
	 *     EVariableReference returns EIndexOrLoopVariableReference
	 *
	 * Constraint:
	 *     index_or_loop_variable_reference=[EIndexOrLoopVariable|ID]
	 */
	protected void sequence_EIndexOrLoopVariableReference(ISerializationContext context, EIndexOrLoopVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EINDEX_OR_LOOP_VARIABLE_REFERENCE__INDEX_OR_LOOP_VARIABLE_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EINDEX_OR_LOOP_VARIABLE_REFERENCE__INDEX_OR_LOOP_VARIABLE_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEIndexOrLoopVariableReferenceAccess().getIndex_or_loop_variable_referenceEIndexOrLoopVariableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.EINDEX_OR_LOOP_VARIABLE_REFERENCE__INDEX_OR_LOOP_VARIABLE_REFERENCE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EIndexOrLoopVariable returns EIndexOrLoopVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EIndexOrLoopVariable(ISerializationContext context, EIndexOrLoopVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EINDEX_OR_LOOP_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EINDEX_OR_LOOP_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEIndexOrLoopVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EInputInterfaceVariableReference
	 *     EInputInterfaceVariableReference returns EInputInterfaceVariableReference
	 *     EVariableReference returns EInputInterfaceVariableReference
	 *
	 * Constraint:
	 *     (reference=LocalEInputInterfaceVariableReference | reference=KBEInputInterfaceVariableReference)
	 */
	protected void sequence_EInputInterfaceVariableReference(ISerializationContext context, EInputInterfaceVariableReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EInputOperationVariableReference
	 *     EInputOperationVariableReference returns EInputOperationVariableReference
	 *     EVariableReference returns EInputOperationVariableReference
	 *
	 * Constraint:
	 *     (reference=LocalEInputOperationVariableReference | reference=KBEInputOperationVariableReference)
	 */
	protected void sequence_EInputOperationVariableReference(ISerializationContext context, EInputOperationVariableReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EIsExpression returns EIsExpression
	 *
	 * Constraint:
	 *     (not='not'? parenthesised_expression=EParenthesisedExpression (status=EIsExpression | (not_in='not'? container_expression=EIsExpression))?)
	 */
	protected void sequence_EIsExpression(ISerializationContext context, EIsExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENumberOrStringWithoutQuotesPassed returns EJinjaAndStringWithoutQuotes
	 *     EJinjaAndStringWithoutQuotes returns EJinjaAndStringWithoutQuotes
	 *     EStringWithoutQuotesPassed returns EJinjaAndStringWithoutQuotes
	 *     EValueWithString returns EJinjaAndStringWithoutQuotes
	 *     EValuePassed returns EJinjaAndStringWithoutQuotes
	 *
	 * Constraint:
	 *     jinja_expression_and_stringWithout+=EJinjaOrStringWithoutQuotes+
	 */
	protected void sequence_EJinjaAndStringWithoutQuotes(ISerializationContext context, EJinjaAndStringWithoutQuotes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaAndString returns EJinjaAndString
	 *     EValueWithString returns EJinjaAndString
	 *     EStringPassed returns EJinjaAndString
	 *     EValuePassed returns EJinjaAndString
	 *     EElementOfListIndented returns EJinjaAndString
	 *
	 * Constraint:
	 *     jinja_expression_and_string+=EJinjaOrString+
	 */
	protected void sequence_EJinjaAndString(ISerializationContext context, EJinjaAndString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaExpressionEvaluationWithoutBrackets returns EJinjaExpressionEvaluationWithoutBrackets
	 *     ECondition returns EJinjaExpressionEvaluationWithoutBrackets
	 *
	 * Constraint:
	 *     (expression_to_evaluate=EFilteredExpression if_chain+=EIfBlock*)
	 */
	protected void sequence_EJinjaExpressionEvaluationWithoutBrackets(ISerializationContext context, EJinjaExpressionEvaluationWithoutBrackets semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaOrString returns EJinjaExpressionEvaluation
	 *     EJinjaOrStringWithoutQuotes returns EJinjaExpressionEvaluation
	 *     EJinjaExpressionEvaluation returns EJinjaExpressionEvaluation
	 *     ECollectionListPassed returns EJinjaExpressionEvaluation
	 *     EDictionaryPassed returns EJinjaExpressionEvaluation
	 *     EListPassed returns EJinjaExpressionEvaluation
	 *     ENumberPassed returns EJinjaExpressionEvaluation
	 *     EBooleanPassed returns EJinjaExpressionEvaluation
	 *
	 * Constraint:
	 *     jinja_expression=EJinjaExpressionEvaluationWithoutBrackets
	 */
	protected void sequence_EJinjaExpressionEvaluation(ISerializationContext context, EJinjaExpressionEvaluation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EJINJA_EXPRESSION_EVALUATION__JINJA_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EJINJA_EXPRESSION_EVALUATION__JINJA_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEJinjaExpressionEvaluationAccess().getJinja_expressionEJinjaExpressionEvaluationWithoutBracketsParserRuleCall_1_0(), semanticObject.getJinja_expression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaOrStringWithoutQuotes returns EJinjaOrStringWithoutQuotes
	 *
	 * Constraint:
	 *     stringWithoutQuotes=ID
	 */
	protected void sequence_EJinjaOrStringWithoutQuotes(ISerializationContext context, EJinjaOrStringWithoutQuotes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EJINJA_OR_STRING_WITHOUT_QUOTES__STRING_WITHOUT_QUOTES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EJINJA_OR_STRING_WITHOUT_QUOTES__STRING_WITHOUT_QUOTES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEJinjaOrStringWithoutQuotesAccess().getStringWithoutQuotesIDTerminalRuleCall_2_0(), semanticObject.getStringWithoutQuotes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EJinjaOrString returns EJinjaOrString
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_EJinjaOrString(ISerializationContext context, EJinjaOrString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EJINJA_OR_STRING__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EJINJA_OR_STRING__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEJinjaOrStringAccess().getStringSTRINGTerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassed returns EListInLine
	 *     EComposedValue returns EListInLine
	 *     EValueWithoutString returns EListInLine
	 *     EList returns EListInLine
	 *     EListInLine returns EListInLine
	 *     EElementOfListIndented returns EListInLine
	 *     EListPassed returns EListInLine
	 *
	 * Constraint:
	 *     (elements+=EValuePassed elements+=EValuePassed*)
	 */
	protected void sequence_EListInLine(ISerializationContext context, EListInLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassed returns EListIndented
	 *     EComposedValue returns EListIndented
	 *     EValueWithoutString returns EListIndented
	 *     EList returns EListIndented
	 *     EListIndented returns EListIndented
	 *     EElementOfListIndented returns EListIndented
	 *     EListPassed returns EListIndented
	 *
	 * Constraint:
	 *     elements+=EElementOfListIndented+
	 */
	protected void sequence_EListIndented(ISerializationContext context, EListIndented semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EListJinja
	 *     EComposedValueJinja returns EListJinja
	 *     EValueJinja returns EListJinja
	 *     EListJinja returns EListJinja
	 *
	 * Constraint:
	 *     (elements+=EJinjaExpressionEvaluationWithoutBrackets elements+=EJinjaExpressionEvaluationWithoutBrackets*)?
	 */
	protected void sequence_EListJinja(ISerializationContext context, EListJinja semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECondition returns EListOfConditions
	 *     EListOfConditions returns EListOfConditions
	 *
	 * Constraint:
	 *     conditions+=EJinjaExpressionEvaluationWithoutBrackets+
	 */
	protected void sequence_EListOfConditions(ISerializationContext context, EListOfConditions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ELoopControl returns ELoopControl
	 *
	 * Constraint:
	 *     (label=EValuePassed | pause=ENumberPassed | index_var=EIndexOrLoopVariable | loop_var=EIndexOrLoopVariable | extended=EBooleanPassed)+
	 */
	protected void sequence_ELoopControl(ISerializationContext context, ELoopControl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ELoop returns ELoopOverList
	 *     ELoopOverList returns ELoopOverList
	 *
	 * Constraint:
	 *     (loop_list=EValuePassed loop_control=ELoopControl?)
	 */
	protected void sequence_ELoopOverList(ISerializationContext context, ELoopOverList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EModuleCall returns EModuleCall
	 *
	 * Constraint:
	 *     (
	 *         firstPart=EStringWithoutQuotesPassed 
	 *         (secondPart=EStringWithoutQuotesPassed thirdPart=EStringWithoutQuotesPassed?)? 
	 *         (direct_parameter=EValuePassed | parameters+=EParameter)*
	 *     )
	 */
	protected void sequence_EModuleCall(ISerializationContext context, EModuleCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENumberOrStringWithoutQuotesPassed returns EMultiLineExpression
	 *     EMultiLineExpression returns EMultiLineExpression
	 *     EStringWithoutQuotesPassed returns EMultiLineExpression
	 *     EValueWithString returns EMultiLineExpression
	 *     EStringPassed returns EMultiLineExpression
	 *     EValuePassed returns EMultiLineExpression
	 *     EElementOfListIndented returns EMultiLineExpression
	 *
	 * Constraint:
	 *     ((new_line_command='>' | new_line_command='|') expressions+=EJinjaAndString+)
	 */
	protected void sequence_EMultiLineExpression(ISerializationContext context, EMultiLineExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENotifiable returns ENotifiedHandler
	 *     ENotifiedHandler returns ENotifiedHandler
	 *
	 * Constraint:
	 *     name=[EHandler|STRING]
	 */
	protected void sequence_ENotifiedHandler(ISerializationContext context, ENotifiedHandler semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.ENOTIFIED_HANDLER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.ENOTIFIED_HANDLER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getENotifiedHandlerAccess().getNameEHandlerSTRINGTerminalRuleCall_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.ENOTIFIED_HANDLER__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ENotifiable returns ENotifiedTopic
	 *     ENotifiedTopic returns ENotifiedTopic
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ENotifiedTopic(ISerializationContext context, ENotifiedTopic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.ENOTIFIED_TOPIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.ENOTIFIED_TOPIC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getENotifiedTopicAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ENumberPassed returns ENumberPassed
	 *
	 * Constraint:
	 *     (number_passed=ENumber | number_passed_null=NULL)
	 */
	protected void sequence_ENumberPassed(ISerializationContext context, ENumberPassed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENumberOrStringWithoutQuotesPassed returns ENumber
	 *     ENumber returns ENumber
	 *
	 * Constraint:
	 *     (number=OCTAL_NUMBER | number=HEXADECIMAL_NUMBER | number=SIMPLE_NUMBER | number=EXPONENTIAL_NUMBER | number=INTEGER)
	 */
	protected void sequence_ENumber(ISerializationContext context, ENumber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EOperation returns EOperation
	 *
	 * Constraint:
	 *     (
	 *         left_operand=EIsExpression 
	 *         (
	 *             (
	 *                 operator='+' | 
	 *                 operator='-' | 
	 *                 operator='/' | 
	 *                 operator='//' | 
	 *                 operator='%' | 
	 *                 operator='*' | 
	 *                 operator='**'
	 *             ) 
	 *             right_operand=EOperation
	 *         )?
	 *     )
	 */
	protected void sequence_EOperation(ISerializationContext context, EOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EOrExpression returns EOrExpression
	 *
	 * Constraint:
	 *     (left_or=EAndExpression right_or=EOrExpression?)
	 */
	protected void sequence_EOrExpression(ISerializationContext context, EOrExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPREFIX_TYPE returns EPREFIX_TYPE
	 *
	 * Constraint:
	 *     (module=ID? type=QUALIFIED_NAME)
	 */
	protected void sequence_EPREFIX_TYPE(ISerializationContext context, EPREFIX_TYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EParameter returns EParameter
	 *
	 * Constraint:
	 *     (name=ID value=EValuePassed)
	 */
	protected void sequence_EParameter(ISerializationContext context, EParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EPARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EPARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EPARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EPARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEParameterAccess().getValueEValuePassedParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EParenthesisedExpression returns EParenthesisedExpression
	 *
	 * Constraint:
	 *     (
	 *         (basic_value=EValuePassedToJinjaExpression | parenthesised_term=EJinjaExpressionEvaluationWithoutBrackets) 
	 *         square_bracket_elements+=ESquareBracketElement* 
	 *         tail+=ETailElement*
	 *     )
	 */
	protected void sequence_EParenthesisedExpression(ISerializationContext context, EParenthesisedExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EErrorHandling returns EPlayErrorHandling
	 *     EPlayErrorHandling returns EPlayErrorHandling
	 *
	 * Constraint:
	 *     (max_fail_percentage=ENumberPassed | any_errors_fatal=EBooleanPassed | ignore_errors=EBooleanPassed | ignore_unreachable=EBooleanPassed)+
	 */
	protected void sequence_EPlayErrorHandling(ISerializationContext context, EPlayErrorHandling semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EExeSettings returns EPlayExeSettings
	 *     EPlayExeSettings returns EPlayExeSettings
	 *
	 * Constraint:
	 *     (strategy=EStringPassed | serial_list=EValuePassed | order=EStringPassed | throttle=ENumberPassed | run_once=EBooleanPassed)+
	 */
	protected void sequence_EPlayExeSettings(ISerializationContext context, EPlayExeSettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBase returns EPlay
	 *     EPlay returns EPlay
	 *
	 * Constraint:
	 *     (
	 *         name=EStringPassed | 
	 *         hosts=EStringPassed | 
	 *         privilege_escalation=EPrivilegeEscalation | 
	 *         validation_mode=EValidationMode | 
	 *         connection=EConnection | 
	 *         no_log=EBooleanPassed | 
	 *         debugger=EStringPassed | 
	 *         module_defaults=EValuePassed | 
	 *         environment=EValuePassed | 
	 *         collections=ECollectionListPassed | 
	 *         tags=EListPassed | 
	 *         variable_declarations+=EVariableDeclaration | 
	 *         play_exe_settings=EPlayExeSettings | 
	 *         error_handling=EPlayErrorHandling | 
	 *         facts_settings=EFactsSettings | 
	 *         vars_files=EListPassed | 
	 *         vars_prompt=EListPassed | 
	 *         force_handlers=EBooleanPassed | 
	 *         external_file_inclusion=EExternalFileInclusion | 
	 *         pre_tasks_list+=EBlockTask | 
	 *         roles_inclusions=ERoleInclusions | 
	 *         tasks_list+=EBlockTask | 
	 *         post_tasks_list+=EBlockTask | 
	 *         handlers+=EHandler
	 *     )*
	 */
	protected void sequence_EPlay(ISerializationContext context, EPlay semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns EPlaybook
	 *     EPlaybook returns EPlaybook
	 *
	 * Constraint:
	 *     (name=STRING used_by=EUsedByBody? plays+=EPlay+)
	 */
	protected void sequence_EPlaybook(ISerializationContext context, EPlaybook semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPrivilegeEscalation returns EPrivilegeEscalation
	 *
	 * Constraint:
	 *     (become=EBooleanPassed | become_exe=EStringPassed | become_flags=EStringPassed | become_method=EStringPassed | become_user=EStringPassed)+
	 */
	protected void sequence_EPrivilegeEscalation(ISerializationContext context, EPrivilegeEscalation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns ERegisterVariableReference
	 *     ERegisterVariableReference returns ERegisterVariableReference
	 *     EVariableReference returns ERegisterVariableReference
	 *
	 * Constraint:
	 *     register_variable_reference=[ERegisterVariable|ID]
	 */
	protected void sequence_ERegisterVariableReference(ISerializationContext context, ERegisterVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EREGISTER_VARIABLE_REFERENCE__REGISTER_VARIABLE_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EREGISTER_VARIABLE_REFERENCE__REGISTER_VARIABLE_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getERegisterVariableReferenceAccess().getRegister_variable_referenceERegisterVariableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.EREGISTER_VARIABLE_REFERENCE__REGISTER_VARIABLE_REFERENCE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ERegisterVariable returns ERegisterVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ERegisterVariable(ISerializationContext context, ERegisterVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EREGISTER_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EREGISTER_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getERegisterVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EBase returns ERoleInclusion
	 *     EExecution returns ERoleInclusion
	 *     ERoleInclusion returns ERoleInclusion
	 *
	 * Constraint:
	 *     (
	 *         name=ERoleName 
	 *         (
	 *             privilege_escalation=EPrivilegeEscalation | 
	 *             validation_mode=EValidationMode | 
	 *             connection=EConnection | 
	 *             no_log=EBooleanPassed | 
	 *             debugger=EStringPassed | 
	 *             module_defaults=EValuePassed | 
	 *             environment=EValuePassed | 
	 *             collections=ECollectionListPassed | 
	 *             tags=EListPassed | 
	 *             variable_declarations+=EVariableDeclaration | 
	 *             exe_settings=EExecutionExeSettings | 
	 *             delegation=EDelegation | 
	 *             when_expression=ECondition | 
	 *             error_handling=EBlockAndRoleErrorHandling
	 *         )*
	 *     )
	 */
	protected void sequence_ERoleInclusion(ISerializationContext context, ERoleInclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERoleInclusions returns ERoleInclusions
	 *
	 * Constraint:
	 *     roles+=ERoleInclusion+
	 */
	protected void sequence_ERoleInclusions(ISerializationContext context, ERoleInclusions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERoleName returns ERoleName
	 *
	 * Constraint:
	 *     (firstPart=ENumberOrStringWithoutQuotesPassed (secondPart=EStringWithoutQuotesPassed thirdPart=EStringWithoutQuotesPassed?)?)
	 */
	protected void sequence_ERoleName(ISerializationContext context, ERoleName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns ESetFactVariableReference
	 *     ESetFactVariableReference returns ESetFactVariableReference
	 *     EVariableReference returns ESetFactVariableReference
	 *
	 * Constraint:
	 *     name=[EParameter|ID]
	 */
	protected void sequence_ESetFactVariableReference(ISerializationContext context, ESetFactVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.ESET_FACT_VARIABLE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.ESET_FACT_VARIABLE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getESetFactVariableReferenceAccess().getNameEParameterIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.ESET_FACT_VARIABLE_REFERENCE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns ESimpleValueJinja
	 *     EValueJinja returns ESimpleValueJinja
	 *     ESimpleValueJinja returns ESimpleValueJinja
	 *
	 * Constraint:
	 *     (simple_value_string=STRING | simple_value=BOOLEAN | simple_value=NULL | simple_value_number=ENumber | simple_value=NONE)
	 */
	protected void sequence_ESimpleValueJinja(ISerializationContext context, ESimpleValueJinja semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassed returns ESimpleValueWithoutString
	 *     EValueWithoutString returns ESimpleValueWithoutString
	 *     ESimpleValueWithoutString returns ESimpleValueWithoutString
	 *     EElementOfListIndented returns ESimpleValueWithoutString
	 *
	 * Constraint:
	 *     (simple_value_boolean=EBooleanAnsible | simple_value=NULL | simple_value_number=ENumber | simple_value=NONE)
	 */
	protected void sequence_ESimpleValueWithoutString(ISerializationContext context, ESimpleValueWithoutString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ESliceNotation returns ESliceNotation
	 *
	 * Constraint:
	 *     ((start=ENumber? colon=':' stop=ENumber?) | (start=ENumber? first_colon=':' step=ENumber? second_colon=':' stop=ENumber?))
	 */
	protected void sequence_ESliceNotation(ISerializationContext context, ESliceNotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns ESpecialVariable
	 *     ESpecialVariable returns ESpecialVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ESpecialVariable(ISerializationContext context, ESpecialVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.ESPECIAL_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.ESPECIAL_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getESpecialVariableAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ESquareBracketElement returns ESquareBracketElement
	 *
	 * Constraint:
	 *     (expression=EJinjaExpressionEvaluationWithoutBrackets | slice_notation=ESliceNotation)
	 */
	protected void sequence_ESquareBracketElement(ISerializationContext context, ESquareBracketElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ETailElement returns ETailElement
	 *
	 * Constraint:
	 *     (function_call=EFunctionCallOrVariable square_bracket_elements+=ESquareBracketElement*)
	 */
	protected void sequence_ETailElement(ISerializationContext context, ETailElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EErrorHandling returns ETaskHandlerErrorHandling
	 *     ETaskHandlerErrorHandling returns ETaskHandlerErrorHandling
	 *
	 * Constraint:
	 *     (changed_when=ECondition | failed_when=ECondition | any_errors_fatal=EBooleanPassed | ignore_errors=EBooleanPassed | ignore_unreachable=EBooleanPassed)+
	 */
	protected void sequence_ETaskHandlerErrorHandling(ISerializationContext context, ETaskHandlerErrorHandling semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBase returns ETask
	 *     EExecution returns ETask
	 *     EBlockTaskRole returns ETask
	 *     EBlockTask returns ETask
	 *     ETaskHandler returns ETask
	 *     ETask returns ETask
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=EStringPassed | 
	 *             privilege_escalation=EPrivilegeEscalation | 
	 *             validation_mode=EValidationMode | 
	 *             connection=EConnection | 
	 *             no_log=EBooleanPassed | 
	 *             debugger=EStringPassed | 
	 *             module_defaults=EValuePassed | 
	 *             environment=EValuePassed | 
	 *             collections=ECollectionListPassed | 
	 *             tags=EListPassed | 
	 *             variable_declarations+=EVariableDeclaration | 
	 *             exe_settings=EExecutionExeSettings | 
	 *             delegation=EDelegation | 
	 *             when_expression=ECondition | 
	 *             error_handling=ETaskHandlerErrorHandling | 
	 *             action=EStringPassed | 
	 *             asynchronous_settings=EAsynchronousSettings | 
	 *             args=EDictionaryPassed | 
	 *             module=EModuleCall | 
	 *             loop=ELoop | 
	 *             register=ERegisterVariable
	 *         )? 
	 *         (notifiables+=ENotifiable notifiables+=ENotifiable*)?
	 *     )+
	 */
	protected void sequence_ETask(ISerializationContext context, ETask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ETruthExpression returns ETruthExpression
	 *
	 * Constraint:
	 *     (
	 *         left_value=EOperation 
	 *         (
	 *             (
	 *                 equality_sign='==' | 
	 *                 equality_sign='!=' | 
	 *                 equality_sign='<' | 
	 *                 equality_sign='>' | 
	 *                 equality_sign='<=' | 
	 *                 equality_sign='>='
	 *             ) 
	 *             right_value=ETruthExpression
	 *         )?
	 *     )
	 */
	protected void sequence_ETruthExpression(ISerializationContext context, ETruthExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ELoop returns EUntil
	 *     EUntil returns EUntil
	 *
	 * Constraint:
	 *     (until=EJinjaExpressionEvaluationWithoutBrackets | retries=ENumberPassed | delay=ENumberPassed)+
	 */
	protected void sequence_EUntil(ISerializationContext context, EUntil semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EUsedByBody returns EUsedByBody
	 *
	 * Constraint:
	 *     node=Node
	 */
	protected void sequence_EUsedByBody(ISerializationContext context, EUsedByBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EUSED_BY_BODY__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EUSED_BY_BODY__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEUsedByBodyAccess().getNodeNodeParserRuleCall_2_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EValidationMode returns EValidationMode
	 *
	 * Constraint:
	 *     (check_mode=EBooleanPassed | diff=EBooleanPassed)+
	 */
	protected void sequence_EValidationMode(ISerializationContext context, EValidationMode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValuePassedToJinjaExpression returns EVariableDeclarationVariableReference
	 *     EVariableDeclarationVariableReference returns EVariableDeclarationVariableReference
	 *     EVariableReference returns EVariableDeclarationVariableReference
	 *
	 * Constraint:
	 *     variable_declaration_variable_reference=[EVariableDeclaration|ID]
	 */
	protected void sequence_EVariableDeclarationVariableReference(ISerializationContext context, EVariableDeclarationVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EVARIABLE_DECLARATION_VARIABLE_REFERENCE__VARIABLE_DECLARATION_VARIABLE_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EVARIABLE_DECLARATION_VARIABLE_REFERENCE__VARIABLE_DECLARATION_VARIABLE_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEVariableDeclarationVariableReferenceAccess().getVariable_declaration_variable_referenceEVariableDeclarationIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.EVARIABLE_DECLARATION_VARIABLE_REFERENCE__VARIABLE_DECLARATION_VARIABLE_REFERENCE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EVariableDeclaration returns EVariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID value_passed=EValuePassed)
	 */
	protected void sequence_EVariableDeclaration(ISerializationContext context, EVariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EVARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EVARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EVARIABLE_DECLARATION__VALUE_PASSED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EVARIABLE_DECLARATION__VALUE_PASSED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEVariableDeclarationAccess().getValue_passedEValuePassedParserRuleCall_2_0(), semanticObject.getValue_passed());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ELoop returns EWithLookup
	 *     EWithLookup returns EWithLookup
	 *
	 * Constraint:
	 *     (lookup=ID with_list=EValuePassed)
	 */
	protected void sequence_EWithLookup(ISerializationContext context, EWithLookup semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EWITH_LOOKUP__LOOKUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EWITH_LOOKUP__LOOKUP));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.EWITH_LOOKUP__WITH_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.EWITH_LOOKUP__WITH_LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEWithLookupAccess().getLookupIDTerminalRuleCall_1_0(), semanticObject.getLookup());
		feeder.accept(grammarAccess.getEWithLookupAccess().getWith_listEValuePassedParserRuleCall_3_0(), semanticObject.getWith_list());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KBEInputInterfaceVariableReference returns KBEInputInterfaceVariableReference
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_KBEInputInterfaceVariableReference(ISerializationContext context, KBEInputInterfaceVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.KBE_INPUT_INTERFACE_VARIABLE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.KBE_INPUT_INTERFACE_VARIABLE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKBEInputInterfaceVariableReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KBEInputOperationVariableReference returns KBEInputOperationVariableReference
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_KBEInputOperationVariableReference(ISerializationContext context, KBEInputOperationVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.KBE_INPUT_OPERATION_VARIABLE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.KBE_INPUT_OPERATION_VARIABLE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKBEInputOperationVariableReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns KBNode
	 *     KBNode returns KBNode
	 *
	 * Constraint:
	 *     (node_type=EPREFIX_TYPE interface=ID operation=ID)
	 */
	protected void sequence_KBNode(ISerializationContext context, KBNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.KB_NODE__NODE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.KB_NODE__NODE_TYPE));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.KB_NODE__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.KB_NODE__INTERFACE));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.KB_NODE__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.KB_NODE__OPERATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKBNodeAccess().getNode_typeEPREFIX_TYPEParserRuleCall_1_0(), semanticObject.getNode_type());
		feeder.accept(grammarAccess.getKBNodeAccess().getInterfaceIDTerminalRuleCall_3_0(), semanticObject.getInterface());
		feeder.accept(grammarAccess.getKBNodeAccess().getOperationIDTerminalRuleCall_5_0(), semanticObject.getOperation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LocalEInputInterfaceVariableReference returns LocalEInputInterfaceVariableReference
	 *
	 * Constraint:
	 *     name=[EPropertyDefinition|STRING]
	 */
	protected void sequence_LocalEInputInterfaceVariableReference(ISerializationContext context, LocalEInputInterfaceVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.LOCAL_EINPUT_INTERFACE_VARIABLE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.LOCAL_EINPUT_INTERFACE_VARIABLE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalEInputInterfaceVariableReferenceAccess().getNameEPropertyDefinitionSTRINGTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.LOCAL_EINPUT_INTERFACE_VARIABLE_REFERENCE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LocalEInputOperationVariableReference returns LocalEInputOperationVariableReference
	 *
	 * Constraint:
	 *     name=[EParameterDefinition|STRING]
	 */
	protected void sequence_LocalEInputOperationVariableReference(ISerializationContext context, LocalEInputOperationVariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.LOCAL_EINPUT_OPERATION_VARIABLE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.LOCAL_EINPUT_OPERATION_VARIABLE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalEInputOperationVariableReferenceAccess().getNameEParameterDefinitionSTRINGTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.LOCAL_EINPUT_OPERATION_VARIABLE_REFERENCE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns LocalNode
	 *     LocalNode returns LocalNode
	 *
	 * Constraint:
	 *     (node_type=[ENodeType|STRING] interface=[EInterfaceDefinition|STRING] operation=[EOperationDefinition|STRING])
	 */
	protected void sequence_LocalNode(ISerializationContext context, LocalNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.LOCAL_NODE__NODE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.LOCAL_NODE__NODE_TYPE));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.LOCAL_NODE__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.LOCAL_NODE__INTERFACE));
			if (transientValues.isValueTransient(semanticObject, AnsibleDslPackage.Literals.LOCAL_NODE__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnsibleDslPackage.Literals.LOCAL_NODE__OPERATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalNodeAccess().getNode_typeENodeTypeSTRINGTerminalRuleCall_1_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.LOCAL_NODE__NODE_TYPE, false));
		feeder.accept(grammarAccess.getLocalNodeAccess().getInterfaceEInterfaceDefinitionSTRINGTerminalRuleCall_3_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.LOCAL_NODE__INTERFACE, false));
		feeder.accept(grammarAccess.getLocalNodeAccess().getOperationEOperationDefinitionSTRINGTerminalRuleCall_5_0_1(), semanticObject.eGet(AnsibleDslPackage.Literals.LOCAL_NODE__OPERATION, false));
		feeder.finish();
	}
	
	
}
