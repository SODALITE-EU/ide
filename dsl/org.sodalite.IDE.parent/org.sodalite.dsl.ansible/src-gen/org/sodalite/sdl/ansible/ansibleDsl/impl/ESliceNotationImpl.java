/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.ENumber;
import org.sodalite.sdl.ansible.ansibleDsl.ESliceNotation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ESlice Notation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESliceNotationImpl#getStart <em>Start</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESliceNotationImpl#getColon <em>Colon</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESliceNotationImpl#getStop <em>Stop</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESliceNotationImpl#getFirst_colon <em>First colon</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESliceNotationImpl#getStep <em>Step</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESliceNotationImpl#getSecond_colon <em>Second colon</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ESliceNotationImpl extends MinimalEObjectImpl.Container implements ESliceNotation
{
  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected ENumber start;

  /**
   * The default value of the '{@link #getColon() <em>Colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColon()
   * @generated
   * @ordered
   */
  protected static final String COLON_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColon() <em>Colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColon()
   * @generated
   * @ordered
   */
  protected String colon = COLON_EDEFAULT;

  /**
   * The cached value of the '{@link #getStop() <em>Stop</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStop()
   * @generated
   * @ordered
   */
  protected ENumber stop;

  /**
   * The default value of the '{@link #getFirst_colon() <em>First colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirst_colon()
   * @generated
   * @ordered
   */
  protected static final String FIRST_COLON_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFirst_colon() <em>First colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirst_colon()
   * @generated
   * @ordered
   */
  protected String first_colon = FIRST_COLON_EDEFAULT;

  /**
   * The cached value of the '{@link #getStep() <em>Step</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStep()
   * @generated
   * @ordered
   */
  protected ENumber step;

  /**
   * The default value of the '{@link #getSecond_colon() <em>Second colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecond_colon()
   * @generated
   * @ordered
   */
  protected static final String SECOND_COLON_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSecond_colon() <em>Second colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecond_colon()
   * @generated
   * @ordered
   */
  protected String second_colon = SECOND_COLON_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ESliceNotationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ESLICE_NOTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumber getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStart(ENumber newStart, NotificationChain msgs)
  {
    ENumber oldStart = start;
    start = newStart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__START, oldStart, newStart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStart(ENumber newStart)
  {
    if (newStart != start)
    {
      NotificationChain msgs = null;
      if (start != null)
        msgs = ((InternalEObject)start).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESLICE_NOTATION__START, null, msgs);
      if (newStart != null)
        msgs = ((InternalEObject)newStart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESLICE_NOTATION__START, null, msgs);
      msgs = basicSetStart(newStart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__START, newStart, newStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getColon()
  {
    return colon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColon(String newColon)
  {
    String oldColon = colon;
    colon = newColon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__COLON, oldColon, colon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumber getStop()
  {
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStop(ENumber newStop, NotificationChain msgs)
  {
    ENumber oldStop = stop;
    stop = newStop;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__STOP, oldStop, newStop);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStop(ENumber newStop)
  {
    if (newStop != stop)
    {
      NotificationChain msgs = null;
      if (stop != null)
        msgs = ((InternalEObject)stop).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESLICE_NOTATION__STOP, null, msgs);
      if (newStop != null)
        msgs = ((InternalEObject)newStop).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESLICE_NOTATION__STOP, null, msgs);
      msgs = basicSetStop(newStop, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__STOP, newStop, newStop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFirst_colon()
  {
    return first_colon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFirst_colon(String newFirst_colon)
  {
    String oldFirst_colon = first_colon;
    first_colon = newFirst_colon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__FIRST_COLON, oldFirst_colon, first_colon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumber getStep()
  {
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStep(ENumber newStep, NotificationChain msgs)
  {
    ENumber oldStep = step;
    step = newStep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__STEP, oldStep, newStep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStep(ENumber newStep)
  {
    if (newStep != step)
    {
      NotificationChain msgs = null;
      if (step != null)
        msgs = ((InternalEObject)step).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESLICE_NOTATION__STEP, null, msgs);
      if (newStep != null)
        msgs = ((InternalEObject)newStep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESLICE_NOTATION__STEP, null, msgs);
      msgs = basicSetStep(newStep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__STEP, newStep, newStep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSecond_colon()
  {
    return second_colon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecond_colon(String newSecond_colon)
  {
    String oldSecond_colon = second_colon;
    second_colon = newSecond_colon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESLICE_NOTATION__SECOND_COLON, oldSecond_colon, second_colon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESLICE_NOTATION__START:
        return basicSetStart(null, msgs);
      case AnsibleDslPackage.ESLICE_NOTATION__STOP:
        return basicSetStop(null, msgs);
      case AnsibleDslPackage.ESLICE_NOTATION__STEP:
        return basicSetStep(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESLICE_NOTATION__START:
        return getStart();
      case AnsibleDslPackage.ESLICE_NOTATION__COLON:
        return getColon();
      case AnsibleDslPackage.ESLICE_NOTATION__STOP:
        return getStop();
      case AnsibleDslPackage.ESLICE_NOTATION__FIRST_COLON:
        return getFirst_colon();
      case AnsibleDslPackage.ESLICE_NOTATION__STEP:
        return getStep();
      case AnsibleDslPackage.ESLICE_NOTATION__SECOND_COLON:
        return getSecond_colon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESLICE_NOTATION__START:
        setStart((ENumber)newValue);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__COLON:
        setColon((String)newValue);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__STOP:
        setStop((ENumber)newValue);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__FIRST_COLON:
        setFirst_colon((String)newValue);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__STEP:
        setStep((ENumber)newValue);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__SECOND_COLON:
        setSecond_colon((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESLICE_NOTATION__START:
        setStart((ENumber)null);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__COLON:
        setColon(COLON_EDEFAULT);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__STOP:
        setStop((ENumber)null);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__FIRST_COLON:
        setFirst_colon(FIRST_COLON_EDEFAULT);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__STEP:
        setStep((ENumber)null);
        return;
      case AnsibleDslPackage.ESLICE_NOTATION__SECOND_COLON:
        setSecond_colon(SECOND_COLON_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESLICE_NOTATION__START:
        return start != null;
      case AnsibleDslPackage.ESLICE_NOTATION__COLON:
        return COLON_EDEFAULT == null ? colon != null : !COLON_EDEFAULT.equals(colon);
      case AnsibleDslPackage.ESLICE_NOTATION__STOP:
        return stop != null;
      case AnsibleDslPackage.ESLICE_NOTATION__FIRST_COLON:
        return FIRST_COLON_EDEFAULT == null ? first_colon != null : !FIRST_COLON_EDEFAULT.equals(first_colon);
      case AnsibleDslPackage.ESLICE_NOTATION__STEP:
        return step != null;
      case AnsibleDslPackage.ESLICE_NOTATION__SECOND_COLON:
        return SECOND_COLON_EDEFAULT == null ? second_colon != null : !SECOND_COLON_EDEFAULT.equals(second_colon);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (colon: ");
    result.append(colon);
    result.append(", first_colon: ");
    result.append(first_colon);
    result.append(", second_colon: ");
    result.append(second_colon);
    result.append(')');
    return result.toString();
  }

} //ESliceNotationImpl
