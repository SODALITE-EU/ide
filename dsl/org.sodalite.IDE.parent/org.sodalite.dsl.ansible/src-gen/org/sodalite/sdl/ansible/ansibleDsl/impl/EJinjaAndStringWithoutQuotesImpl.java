/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaAndStringWithoutQuotes;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaOrStringWithoutQuotes;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EJinja And String Without Quotes</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EJinjaAndStringWithoutQuotesImpl#getJinja_expression_and_stringWithout <em>Jinja expression and string Without</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EJinjaAndStringWithoutQuotesImpl extends EStringWithoutQuotesPassedImpl implements EJinjaAndStringWithoutQuotes
{
  /**
   * The cached value of the '{@link #getJinja_expression_and_stringWithout() <em>Jinja expression and string Without</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJinja_expression_and_stringWithout()
   * @generated
   * @ordered
   */
  protected EList<EJinjaOrStringWithoutQuotes> jinja_expression_and_stringWithout;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EJinjaAndStringWithoutQuotesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EJINJA_AND_STRING_WITHOUT_QUOTES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EJinjaOrStringWithoutQuotes> getJinja_expression_and_stringWithout()
  {
    if (jinja_expression_and_stringWithout == null)
    {
      jinja_expression_and_stringWithout = new EObjectContainmentEList<EJinjaOrStringWithoutQuotes>(EJinjaOrStringWithoutQuotes.class, this, AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES__JINJA_EXPRESSION_AND_STRING_WITHOUT);
    }
    return jinja_expression_and_stringWithout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES__JINJA_EXPRESSION_AND_STRING_WITHOUT:
        return ((InternalEList<?>)getJinja_expression_and_stringWithout()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES__JINJA_EXPRESSION_AND_STRING_WITHOUT:
        return getJinja_expression_and_stringWithout();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES__JINJA_EXPRESSION_AND_STRING_WITHOUT:
        getJinja_expression_and_stringWithout().clear();
        getJinja_expression_and_stringWithout().addAll((Collection<? extends EJinjaOrStringWithoutQuotes>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES__JINJA_EXPRESSION_AND_STRING_WITHOUT:
        getJinja_expression_and_stringWithout().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EJINJA_AND_STRING_WITHOUT_QUOTES__JINJA_EXPRESSION_AND_STRING_WITHOUT:
        return jinja_expression_and_stringWithout != null && !jinja_expression_and_stringWithout.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EJinjaAndStringWithoutQuotesImpl
