/*
 * generated by Xtext 2.22.0
 */
grammar DebugInternalAnsibleDsl;

// Rule Model
ruleModel:
	ruleEPlaybook
;

// Rule EPlaybook
ruleEPlaybook:
	'playbook_name:'
	RULE_STRING
	ruleEUsedByBody
	?
	'plays:'
	RULE_BEGIN
	ruleEPlay
	+
	RULE_END
;

// Rule EUsedByBody
ruleEUsedByBody:
	'used_by:'
	RULE_BEGIN
	ruleNode
	RULE_END
;

// Rule Node
ruleNode:
	(
		ruleLocalNode
		    |
		ruleKBNode
	)
;

// Rule LocalNode
ruleLocalNode:
	'node_type:'
	RULE_STRING
	'interface:'
	RULE_STRING
	'operation:'
	RULE_STRING
;

// Rule KBNode
ruleKBNode:
	'node_type:'
	ruleEPREFIX_TYPE
	'interface:'
	RULE_ID
	'operation:'
	RULE_ID
;

// Rule EPREFIX_TYPE
ruleEPREFIX_TYPE:
	(
		RULE_ID
		'/'
	)?
	ruleQUALIFIED_NAME
;

// Rule EExecution
ruleEExecution:
	(
		ruleEBlock
		    |
		ruleETaskHandler
		    |
		ruleERoleInclusion
	)
;

// Rule EBlockTask
ruleEBlockTask:
	(
		ruleEBlock
		    |
		ruleETask
	)
;

// Rule ETaskHandler
ruleETaskHandler:
	(
		ruleETask
		    |
		ruleEHandler
	)
;

// Rule EPlay
ruleEPlay:
	'play:'
	RULE_BEGIN
	((
		'play_name:'
		ruleEStringPassed
	)?
	    |
	(
		'hosts:'
		ruleEStringPassed
	)?
	    |
	ruleEPrivilegeEscalation
	?
	    |
	ruleEValidationMode
	?
	    |
	ruleEConnection
	?
	    |
	(
		'no_log:'
		ruleEBooleanPassed
	)?
	    |
	(
		'debugger:'
		ruleEStringPassed
	)?
	    |
	(
		'module_defaults:'
		ruleEValuePassed
	)?
	    |
	(
		'environment:'
		ruleEValuePassed
	)?
	    |
	(
		'collections:'
		ruleECollectionListPassed
	)?
	    |
	(
		'tags_attribute:'
		ruleEListPassed
	)?
	    |
	(
		'vars:'
		RULE_BEGIN
		ruleEVariableDeclaration
		+
		RULE_END
	)?
	    |
	ruleEPlayExeSettings
	?
	    |
	ruleEPlayErrorHandling
	?
	    |
	ruleEFactsSettings
	?
	    |
	(
		'vars_files:'
		ruleEListPassed
	)?
	    |
	(
		'vars_prompt:'
		ruleEListPassed
	)?
	    |
	(
		'force_handlers:'
		ruleEBooleanPassed
	)?
	    |
	ruleEExternalFileInclusion
	?
	    |
	(
		'pre_tasks:'
		RULE_BEGIN
		ruleEBlockTask
		+
		RULE_END
	)?
	    |
	ruleERoleInclusions
	?
	    |
	(
		'tasks_list:'
		RULE_BEGIN
		ruleEBlockTask
		+
		RULE_END
	)?
	    |
	(
		'post_tasks:'
		RULE_BEGIN
		ruleEBlockTask
		+
		RULE_END
	)?
	    |
	(
		'handlers:'
		RULE_BEGIN
		ruleEHandler
		+
		RULE_END
	)?
	)*
	RULE_END
;

// Rule EBlock
ruleEBlock:
	'block_to_execute:'
	RULE_BEGIN
	((
		'block_name:'
		ruleEStringPassed
	)?
	    |
	ruleEPrivilegeEscalation
	?
	    |
	ruleEValidationMode
	?
	    |
	ruleEConnection
	?
	    |
	(
		'no_log:'
		ruleEBooleanPassed
	)?
	    |
	(
		'debugger:'
		ruleEStringPassed
	)?
	    |
	(
		'module_defaults:'
		ruleEValuePassed
	)?
	    |
	(
		'environment:'
		ruleEValuePassed
	)?
	    |
	(
		'collections:'
		ruleECollectionListPassed
	)?
	    |
	(
		'tags_attribute:'
		ruleEListPassed
	)?
	    |
	(
		'vars:'
		RULE_BEGIN
		ruleEVariableDeclaration
		+
		RULE_END
	)?
	    |
	ruleEExecutionExeSettings
	?
	    |
	ruleEDelegation
	?
	    |
	(
		'when:'
		ruleECondition
	)?
	    |
	ruleEBlockAndRoleErrorHandling
	?
	    |
	'tasks:'
	RULE_BEGIN
	ruleETask
	+
	RULE_END
	    |
	(
		'rescue_tasks:'
		RULE_BEGIN
		ruleETask
		+
		RULE_END
	)?
	    |
	(
		'always_tasks:'
		RULE_BEGIN
		ruleETask
		+
		RULE_END
	)?
	)*
	RULE_END
;

// Rule ETask
ruleETask:
	'task_to_execute:'
	RULE_BEGIN
	((
		'task_name:'
		ruleEStringPassed
	)?
	    |
	ruleEPrivilegeEscalation
	?
	    |
	ruleEValidationMode
	?
	    |
	ruleEConnection
	?
	    |
	(
		'no_log:'
		ruleEBooleanPassed
	)?
	    |
	(
		'debugger:'
		ruleEStringPassed
	)?
	    |
	(
		'module_defaults:'
		ruleEValuePassed
	)?
	    |
	(
		'environment:'
		ruleEValuePassed
	)?
	    |
	(
		'collections:'
		ruleECollectionListPassed
	)?
	    |
	(
		'tags_attribute:'
		ruleEListPassed
	)?
	    |
	(
		'vars:'
		RULE_BEGIN
		ruleEVariableDeclaration
		+
		RULE_END
	)?
	    |
	ruleEExecutionExeSettings
	?
	    |
	ruleEDelegation
	?
	    |
	(
		'when:'
		ruleECondition
	)?
	    |
	ruleETaskHandlerErrorHandling
	?
	    |
	(
		'action:'
		ruleEStringPassed
	)?
	    |
	ruleEAsynchronousSettings
	?
	    |
	(
		'args:'
		ruleEDictionaryPassed
	)?
	    |
	ruleEModuleCall
	    |
	(
		'notify:'
		ruleENotifiable
		(
			','
			ruleENotifiable
		)*
	)?
	    |
	ruleELoop
	?
	    |
	ruleERegisterVariable
	?
	)*
	RULE_END
;

// Rule EHandler
ruleEHandler:
	'handler:'
	RULE_BEGIN
	((
		'handler_name:'
		RULE_STRING
	)?
	    |
	ruleEPrivilegeEscalation
	?
	    |
	ruleEValidationMode
	?
	    |
	ruleEConnection
	?
	    |
	(
		'no_log:'
		ruleEBooleanPassed
	)?
	    |
	(
		'debugger:'
		ruleEStringPassed
	)?
	    |
	(
		'module_defaults:'
		ruleEValuePassed
	)?
	    |
	(
		'environment:'
		ruleEValuePassed
	)?
	    |
	(
		'collections:'
		ruleECollectionListPassed
	)?
	    |
	(
		'tags_attribute:'
		ruleEListPassed
	)?
	    |
	(
		'vars:'
		RULE_BEGIN
		ruleEVariableDeclaration
		+
		RULE_END
	)?
	    |
	ruleEExecutionExeSettings
	?
	    |
	ruleEDelegation
	?
	    |
	(
		'when:'
		ruleECondition
	)?
	    |
	ruleETaskHandlerErrorHandling
	?
	    |
	(
		'action:'
		ruleEStringPassed
	)?
	    |
	ruleEAsynchronousSettings
	?
	    |
	(
		'args:'
		ruleEDictionaryPassed
	)?
	    |
	ruleEModuleCall
	    |
	(
		'notify:'
		ruleENotifiable
		(
			','
			ruleENotifiable
		)*
	)?
	    |
	ruleELoop
	?
	    |
	ruleERegisterVariable
	?
	    |
	(
		'listen:'
		RULE_STRING
		(
			','
			RULE_STRING
		)*
	)?
	)*
	RULE_END
;

// Rule EModuleCall
ruleEModuleCall:
	'module:'
	ruleEStringWithoutQuotesPassed
	(
		'.'
		ruleEStringWithoutQuotesPassed
		(
			'.'
			ruleEStringWithoutQuotesPassed
		)?
	)?
	(
		RULE_BEGIN
		((
			'direct_parameter:'
			ruleEValuePassed
		)?
		    |
		(
			'parameters:'
			RULE_BEGIN
			ruleEParameter
			+
			RULE_END
		)?
		)*
		RULE_END
	)?
;

// Rule EParameter
ruleEParameter:
	RULE_ID
	':'
	ruleEValuePassed
;

// Rule ERoleInclusion
ruleERoleInclusion:
	'role:'
	RULE_BEGIN
	'role_name:'
	ruleERoleName
	(ruleEPrivilegeEscalation
	?
	    |
	ruleEValidationMode
	?
	    |
	ruleEConnection
	?
	    |
	(
		'no_log:'
		ruleEBooleanPassed
	)?
	    |
	(
		'debugger:'
		ruleEStringPassed
	)?
	    |
	(
		'module_defaults:'
		ruleEValuePassed
	)?
	    |
	(
		'environment:'
		ruleEValuePassed
	)?
	    |
	(
		'collections:'
		ruleECollectionListPassed
	)?
	    |
	(
		'tags_attribute:'
		ruleEListPassed
	)?
	    |
	(
		'vars:'
		RULE_BEGIN
		ruleEVariableDeclaration
		+
		RULE_END
	)?
	    |
	ruleEExecutionExeSettings
	?
	    |
	ruleEDelegation
	?
	    |
	(
		'when:'
		ruleECondition
	)?
	    |
	ruleEBlockAndRoleErrorHandling
	?
	)*
	RULE_END
;

// Rule ERoleName
ruleERoleName:
	ruleENumberOrStringWithoutQuotesPassed
	(
		'.'
		ruleEStringWithoutQuotesPassed
		(
			'.'
			ruleEStringWithoutQuotesPassed
		)?
	)?
;

// Rule ENumberOrStringWithoutQuotesPassed
ruleENumberOrStringWithoutQuotesPassed:
	(
		ruleEStringWithoutQuotesPassed
		    |
		ruleENumber
	)
;

// Rule ERoleInclusions
ruleERoleInclusions:
	'roles_inclusions:'
	RULE_BEGIN
	ruleERoleInclusion
	+
	RULE_END
;

// Rule EExternalFileInclusion
ruleEExternalFileInclusion:
	'external_file_inclusion:'
	RULE_BEGIN
	(
		'import_playbook:'
		RULE_STRING
		    |
		'include:'
		RULE_STRING
	)
	(
		'when:'
		ruleECondition
	)?
	RULE_END
;

// Rule ELoop
ruleELoop:
	'loop:'
	RULE_BEGIN
	(
		ruleELoopOverList
		    |
		ruleEWithLookup
		    |
		ruleEUntil
	)
	RULE_END
;

// Rule ELoopOverList
ruleELoopOverList:
	'loop_over:'
	ruleEValuePassed
	ruleELoopControl
	?
;

// Rule ELoopControl
ruleELoopControl:
	'loop_control:'
	RULE_BEGIN
	((
		'label:'
		ruleEValuePassed
	)?
	    |
	(
		'pause:'
		ruleENumberPassed
	)?
	    |
	(
		'index_var:'
		ruleEIndexOrLoopVariable
	)?
	    |
	(
		'loop_var:'
		ruleEIndexOrLoopVariable
	)?
	    |
	(
		'extended:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EWithLookup
ruleEWithLookup:
	'with'
	RULE_ID
	':'
	ruleEValuePassed
;

// Rule EUntil
ruleEUntil:
	'until:'
	RULE_BEGIN
	((
		'until_condition:'
		ruleEJinjaExpressionEvaluationWithoutBrackets
	)?
	    |
	(
		'retries:'
		ruleENumberPassed
	)?
	    |
	(
		'delay_attribute:'
		ruleENumberPassed
	)?
	)*
	RULE_END
;

// Rule EPrivilegeEscalation
ruleEPrivilegeEscalation:
	'privilege_escalation:'
	RULE_BEGIN
	((
		'become:'
		ruleEBooleanPassed
	)?
	    |
	(
		'become_exe:'
		ruleEStringPassed
	)?
	    |
	(
		'become_flags:'
		ruleEStringPassed
	)?
	    |
	(
		'become_method:'
		ruleEStringPassed
	)?
	    |
	(
		'become_user:'
		ruleEStringPassed
	)?
	)*
	RULE_END
;

// Rule EValidationMode
ruleEValidationMode:
	'validation_mode:'
	RULE_BEGIN
	((
		'check_mode:'
		ruleEBooleanPassed
	)?
	    |
	(
		'diff:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EConnection
ruleEConnection:
	'connection_info:'
	RULE_BEGIN
	((
		'connection:'
		ruleEStringPassed
	)?
	    |
	(
		'port_attribute:'
		ruleENumberPassed
	)?
	    |
	(
		'remote_user:'
		ruleEStringPassed
	)?
	)*
	RULE_END
;

// Rule EPlayExeSettings
ruleEPlayExeSettings:
	'play_exe_settings:'
	RULE_BEGIN
	((
		'strategy:'
		ruleEStringPassed
	)?
	    |
	(
		'serial:'
		ruleEValuePassed
	)?
	    |
	(
		'order:'
		ruleEStringPassed
	)?
	    |
	(
		'throttle:'
		ruleENumberPassed
	)?
	    |
	(
		'run_once:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EExecutionExeSettings
ruleEExecutionExeSettings:
	'exe_settings:'
	RULE_BEGIN
	((
		'throttle:'
		ruleENumberPassed
	)?
	    |
	(
		'run_once:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EBlockAndRoleErrorHandling
ruleEBlockAndRoleErrorHandling:
	'error_handling:'
	RULE_BEGIN
	((
		'any_errors_fatal:'
		ruleEBooleanPassed
	)?
	    |
	(
		'ignore_errors:'
		ruleEBooleanPassed
	)?
	    |
	(
		'ignore_unreachable:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EPlayErrorHandling
ruleEPlayErrorHandling:
	'error_handling:'
	RULE_BEGIN
	((
		'max_fail_percentage:'
		ruleENumberPassed
	)?
	    |
	(
		'any_errors_fatal:'
		ruleEBooleanPassed
	)?
	    |
	(
		'ignore_errors:'
		ruleEBooleanPassed
	)?
	    |
	(
		'ignore_unreachable:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule ETaskHandlerErrorHandling
ruleETaskHandlerErrorHandling:
	'error_handling:'
	RULE_BEGIN
	((
		'changed_when:'
		ruleECondition
	)?
	    |
	(
		'failed_when:'
		ruleECondition
	)?
	    |
	(
		'any_errors_fatal:'
		ruleEBooleanPassed
	)?
	    |
	(
		'ignore_errors:'
		ruleEBooleanPassed
	)?
	    |
	(
		'ignore_unreachable:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EFactsSettings
ruleEFactsSettings:
	'facts_settings:'
	RULE_BEGIN
	((
		'gather_facts:'
		ruleEBooleanPassed
	)?
	    |
	(
		'gather_subset:'
		ruleEValuePassed
	)?
	    |
	(
		'gather_timeout:'
		ruleENumberPassed
	)?
	    |
	(
		'fact_path:'
		ruleEStringPassed
	)?
	)*
	RULE_END
;

// Rule EDelegation
ruleEDelegation:
	'delegation:'
	RULE_BEGIN
	((
		'delegate_to:'
		ruleEStringPassed
	)?
	    |
	(
		'delegate_facts:'
		ruleEBooleanPassed
	)?
	)*
	RULE_END
;

// Rule EAsynchronousSettings
ruleEAsynchronousSettings:
	'asynchronous_settings:'
	RULE_BEGIN
	((
		'async:'
		ruleENumberPassed
	)?
	    |
	(
		'poll:'
		ruleENumberPassed
	)?
	)*
	RULE_END
;

// Rule ENotifiable
ruleENotifiable:
	(
		ruleENotifiedHandler
		    |
		ruleENotifiedTopic
	)
;

// Rule ENotifiedHandler
ruleENotifiedHandler:
	RULE_STRING
;

// Rule ENotifiedTopic
ruleENotifiedTopic:
	'topic:'
	RULE_STRING
;

// Rule EJinjaOrString
ruleEJinjaOrString:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		RULE_STRING
	)
;

// Rule EJinjaAndString
ruleEJinjaAndString:
	ruleEJinjaOrString
	+
;

// Rule EMultiLineExpression
ruleEMultiLineExpression:
	(
		'>'
		    |
		'|'
	)
	RULE_BEGIN
	(
		'line_of_string:'
		ruleEJinjaAndString
	)+
	RULE_END
;

// Rule EJinjaOrStringWithoutQuotes
ruleEJinjaOrStringWithoutQuotes:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		RULE_ID
	)
;

// Rule EJinjaAndStringWithoutQuotes
ruleEJinjaAndStringWithoutQuotes:
	ruleEJinjaOrStringWithoutQuotes
	+
;

// Rule EStringWithoutQuotesPassed
ruleEStringWithoutQuotesPassed:
	(
		ruleEJinjaAndStringWithoutQuotes
		    |
		ruleEMultiLineExpression
	)
;

// Rule EValueWithString
ruleEValueWithString:
	(
		(
			(ruleEStringPassed)=>
			ruleEStringPassed
		)
		    |
		ruleEStringWithoutQuotesPassed
	)
;

// Rule EStringPassed
ruleEStringPassed:
	(
		ruleEJinjaAndString
		    |
		ruleEMultiLineExpression
	)
;

// Rule EValuePassed
ruleEValuePassed:
	(
		ruleEValueWithString
		    |
		ruleEValueWithoutString
	)
;

// Rule EValuePassedToJinjaExpression
ruleEValuePassedToJinjaExpression:
	(
		ruleEValueJinja
		    |
		ruleESpecialVariable
		    |
		ruleEVariableReference
		    |
		ruleEFunctionCallOrVariable
	)
;

// Rule EComposedValue
ruleEComposedValue:
	(
		ruleEDictionary
		    |
		ruleEList
	)
;

// Rule EComposedValueJinja
ruleEComposedValueJinja:
	(
		ruleEDictionaryJinja
		    |
		ruleEListJinja
	)
;

// Rule EValueJinja
ruleEValueJinja:
	(
		ruleEComposedValueJinja
		    |
		ruleESimpleValueJinja
	)
;

// Rule EValueWithoutString
ruleEValueWithoutString:
	(
		ruleEComposedValue
		    |
		ruleESimpleValueWithoutString
	)
;

// Rule ESimpleValueWithoutString
ruleESimpleValueWithoutString:
	(
		ruleEBooleanAnsible
		    |
		RULE_NULL
		    |
		ruleENumber
		    |
		RULE_NONE
	)
;

// Rule ESimpleValueJinja
ruleESimpleValueJinja:
	(
		RULE_STRING
		    |
		RULE_BOOLEAN
		    |
		RULE_NULL
		    |
		ruleENumber
		    |
		RULE_NONE
	)
;

// Rule EJinjaExpressionEvaluation
ruleEJinjaExpressionEvaluation:
	'{{'
	ruleEJinjaExpressionEvaluationWithoutBrackets
	'}}'
;

// Rule EJinjaExpressionEvaluationWithoutBrackets
ruleEJinjaExpressionEvaluationWithoutBrackets:
	ruleEFilteredExpression
	ruleEIfBlock
	*
;

// Rule EFunctionCallOrVariable
ruleEFunctionCallOrVariable:
	RULE_ID
	(
		'('
		ruleEFunctionInput
		(
			','
			ruleEFunctionInput
		)*
		')'
		    |
		'()'
	)?
;

// Rule EFunctionInput
ruleEFunctionInput:
	(
		RULE_ID
		'='
	)?
	ruleEJinjaExpressionEvaluationWithoutBrackets
;

// Rule EIfBlock
ruleEIfBlock:
	'if'
	ruleEFilteredExpression
	(
		'else'
		ruleEFilteredExpression
	)?
;

// Rule EFilteredExpression
ruleEFilteredExpression:
	ruleEOrExpression
	(
		'|'
		ruleEFilteredExpression
	)?
;

// Rule EOrExpression
ruleEOrExpression:
	ruleEAndExpression
	(
		'or'
		ruleEOrExpression
	)?
;

// Rule EAndExpression
ruleEAndExpression:
	ruleETruthExpression
	(
		'and'
		ruleEAndExpression
	)?
;

// Rule ETruthExpression
ruleETruthExpression:
	ruleEOperation
	(
		(
			'=='
			    |
			'!='
			    |
			'<'
			    |
			'>'
			    |
			'<='
			    |
			'>='
		)
		ruleETruthExpression
	)?
;

// Rule EOperation
ruleEOperation:
	ruleEIsExpression
	(
		(
			'+'
			    |
			'-'
			    |
			'/'
			    |
			'//'
			    |
			'%'
			    |
			'*'
			    |
			'**'
		)
		ruleEOperation
	)?
;

// Rule EIsExpression
ruleEIsExpression:
	'not'
	?
	ruleEParenthesisedExpression
	(
		'is'
		ruleEIsExpression
		    |
		'not'
		?
		'in'
		ruleEIsExpression
	)?
;

// Rule EParenthesisedExpression
ruleEParenthesisedExpression:
	(
		ruleEValuePassedToJinjaExpression
		    |
		'('
		ruleEJinjaExpressionEvaluationWithoutBrackets
		')'
	)
	ruleESquareBracketElement
	*
	(
		'.'
		ruleETailElement
	)*
;

// Rule EJinjaStatement
ruleEJinjaStatement:
	(
		ruleEIfStatement
		    |
		ruleEForStatement
	)
;

// Rule EIfStatement
ruleEIfStatement:
	'{%'
	(
		'+'
		    |
		'-'
	)?
	'if'
	ruleEFilteredExpression
	'%}'
	ruleEValuePassed
	ruleEElifBlock
	*
	(
		'{%'
		(
			'+'
			    |
			'-'
		)?
		'else'
		'%}'
		ruleEValuePassed
	)?
	'{%'
	(
		'+'
		    |
		'-'
	)?
	'endif'
	'%}'
;

// Rule EElifBlock
ruleEElifBlock:
	'{%'
	(
		'+'
		    |
		'-'
	)?
	'elif'
	ruleEFilteredExpression
	'%}'
	ruleEValuePassed
;

// Rule EForStatement
ruleEForStatement:
	'{%'
	(
		'+'
		    |
		'-'
	)?
	'for'
	RULE_ID
	(
		','
		RULE_ID
	)*
	'in'
	ruleEFilteredExpression
	(
		'if'
		ruleEFilteredExpression
	)?
	RULE_ID
	?
	'%}'
	ruleEValuePassed
	(
		'{%'
		(
			'+'
			    |
			'-'
		)?
		'else'
		'%}'
		ruleEValuePassed
	)?
	'{%'
	(
		'+'
		    |
		'-'
	)?
	'endfor'
	'%}'
;

// Rule EVariableDeclarationVariableReference
ruleEVariableDeclarationVariableReference:
	'declared_variable:'
	RULE_ID
;

// Rule ERegisterVariableReference
ruleERegisterVariableReference:
	'registered_variable:'
	RULE_ID
;

// Rule EVariableDeclaration
ruleEVariableDeclaration:
	RULE_ID
	':'
	ruleEValuePassed
;

// Rule EIndexOrLoopVariable
ruleEIndexOrLoopVariable:
	RULE_ID
;

// Rule EIndexOrLoopVariableReference
ruleEIndexOrLoopVariableReference:
	'index_or_loop_var:'
	RULE_ID
;

// Rule ERegisterVariable
ruleERegisterVariable:
	'register:'
	RULE_ID
;

// Rule EInputOperationVariableReference
ruleEInputOperationVariableReference:
	(
		ruleLocalEInputOperationVariableReference
		    |ruleKBEInputOperationVariableReference
	)
;

// Rule LocalEInputOperationVariableReference
ruleLocalEInputOperationVariableReference:
	'operation_input:'
	RULE_STRING
;

// Rule KBEInputOperationVariableReference
ruleKBEInputOperationVariableReference:
	'operation_input:'
	RULE_ID
;

// Rule EInputInterfaceVariableReference
ruleEInputInterfaceVariableReference:
	(
		ruleLocalEInputInterfaceVariableReference
		    |ruleKBEInputInterfaceVariableReference
	)
;

// Rule LocalEInputInterfaceVariableReference
ruleLocalEInputInterfaceVariableReference:
	'interface_input:'
	RULE_STRING
;

// Rule KBEInputInterfaceVariableReference
ruleKBEInputInterfaceVariableReference:
	'interface_input:'
	RULE_ID
;

// Rule ESetFactVariableReference
ruleESetFactVariableReference:
	'fact_set:'
	RULE_ID
;

// Rule EVariableReference
ruleEVariableReference:
	(
		ruleEVariableDeclarationVariableReference
		    |
		ruleERegisterVariableReference
		    |
		ruleEInputOperationVariableReference
		    |
		ruleEInputInterfaceVariableReference
		    |
		ruleEIndexOrLoopVariableReference
		    |
		ruleESetFactVariableReference
	)
;

// Rule ESpecialVariable
ruleESpecialVariable:
	'special_variable:'
	RULE_ID
;

// Rule ETailElement
ruleETailElement:
	ruleEFunctionCallOrVariable
	ruleESquareBracketElement
	*
;

// Rule ESquareBracketElement
ruleESquareBracketElement:
	'['
	(
		ruleEJinjaExpressionEvaluationWithoutBrackets
		    |
		ruleESliceNotation
	)
	']'
;

// Rule ESliceNotation
ruleESliceNotation:
	(
		ruleENumber
		?
		':'
		ruleENumber
		?
		    |
		ruleENumber
		?
		':'
		ruleENumber
		?
		':'
		ruleENumber
		?
	)
;

// Rule EDictionary
ruleEDictionary:
	(
		ruleEDictionaryInLine
		    |
		ruleEDictionaryIndented
	)
;

// Rule EDictionaryInLine
ruleEDictionaryInLine:
	'{'
	ruleEDictionaryPair
	(
		','
		ruleEDictionaryPair
	)*
	'_}'
;

// Rule EDictionaryIndented
ruleEDictionaryIndented:
	RULE_BEGIN
	ruleEDictionaryPair
	+
	RULE_END
;

// Rule EDictionaryPair
ruleEDictionaryPair:
	RULE_ID
	':'
	ruleEValuePassed
;

// Rule EDictionaryJinja
ruleEDictionaryJinja:
	'{'
	(
		ruleEDictionaryPairJinja
		(
			','
			ruleEDictionaryPairJinja
		)*
	)?
	'}'
;

// Rule EDictionaryPairJinja
ruleEDictionaryPairJinja:
	(
		RULE_ID
		    |
		RULE_STRING
	)
	':'
	ruleEJinjaExpressionEvaluationWithoutBrackets
;

// Rule ECollectionListPassed
ruleECollectionListPassed:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		ruleECollectionList
	)
;

// Rule ECollectionList
ruleECollectionList:
	(
		ruleECollectionListInLine
		    |
		ruleECollectionListIndented
	)
;

// Rule ECollectionListInLine
ruleECollectionListInLine:
	'['
	ruleECollectionFQN
	(
		','
		ruleECollectionFQN
	)*
	']'
;

// Rule ECollectionFQN
ruleECollectionFQN:
	ruleEStringWithoutQuotesPassed
	(
		'.'
		ruleEStringWithoutQuotesPassed
	)?
;

// Rule ECollectionListIndented
ruleECollectionListIndented:
	RULE_BEGIN
	(
		'-'
		ruleECollectionFQN
	)+
	RULE_END
;

// Rule EList
ruleEList:
	(
		ruleEListInLine
		    |
		ruleEListIndented
	)
;

// Rule EListInLine
ruleEListInLine:
	'['
	ruleEValuePassed
	(
		','
		ruleEValuePassed
	)*
	']'
;

// Rule EListIndented
ruleEListIndented:
	RULE_BEGIN
	(
		'-'
		ruleEElementOfListIndented
	)+
	RULE_END
;

// Rule EDictionaryOfListIndented
ruleEDictionaryOfListIndented:
	ruleEDictionaryPair
	+
;

// Rule EElementOfListIndented
ruleEElementOfListIndented:
	(
		ruleEStringPassed
		    |
		ruleESimpleValueWithoutString
		    |
		ruleEDictionaryInLine
		    |
		ruleEDictionaryOfListIndented
		    |
		ruleEList
	)
;

// Rule EListJinja
ruleEListJinja:
	'['
	(
		ruleEJinjaExpressionEvaluationWithoutBrackets
		(
			','
			ruleEJinjaExpressionEvaluationWithoutBrackets
		)*
	)?
	']'
;

// Rule ECondition
ruleECondition:
	(
		ruleEJinjaExpressionEvaluationWithoutBrackets
		    |
		ruleEListOfConditions
	)
;

// Rule EListOfConditions
ruleEListOfConditions:
	RULE_BEGIN
	(
		'when_condition:'
		ruleEJinjaExpressionEvaluationWithoutBrackets
	)+
	RULE_END
;

// Rule EDictionaryPassed
ruleEDictionaryPassed:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		ruleEDictionary
	)
;

// Rule EListPassed
ruleEListPassed:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		ruleEList
	)
;

// Rule ENumberPassed
ruleENumberPassed:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		ruleENumber
		    |
		RULE_NULL
	)
;

// Rule EBooleanPassed
ruleEBooleanPassed:
	(
		ruleEJinjaExpressionEvaluation
		    |
		ruleEJinjaStatement
		    |
		ruleEBooleanAnsible
		    |
		RULE_NULL
	)
;

// Rule EBooleanAnsible
ruleEBooleanAnsible:
	(
		RULE_BOOLEAN
		    |
		RULE_BOOLEAN_ONLY_ANSIBLE
	)
;

// Rule ENumber
ruleENumber:
	(
		RULE_OCTAL_NUMBER
		    |
		RULE_HEXADECIMAL_NUMBER
		    |
		RULE_SIMPLE_NUMBER
		    |
		RULE_EXPONENTIAL_NUMBER
		    |
		RULE_INTEGER
	)
;

// Rule QUALIFIED_NAME
ruleQUALIFIED_NAME:
	RULE_ID
	(
		'.'
		RULE_ID
	)+
;

RULE_BOOLEAN : ('True'|'False'|'true'|'false');

RULE_BOOLEAN_ONLY_ANSIBLE : ('yes'|'no');

RULE_NULL : 'null';

RULE_NONE : 'None';

RULE_OCTAL_NUMBER : ('0o'|'0') ('1'..'7' ('0'..'7')*|'0');

RULE_HEXADECIMAL_NUMBER : '0x' (('1'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')*|'0');

RULE_SIMPLE_NUMBER : ('+'|'-')? ('1'..'9' ('0'..'9')*|'0') ('.' ('0'..'9')+)?;

RULE_EXPONENTIAL_NUMBER : RULE_SIMPLE_NUMBER ('e'|'E') RULE_SIMPLE_NUMBER;

RULE_INTEGER : RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

fragment RULE_BEGIN : ;

fragment RULE_END : ;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
