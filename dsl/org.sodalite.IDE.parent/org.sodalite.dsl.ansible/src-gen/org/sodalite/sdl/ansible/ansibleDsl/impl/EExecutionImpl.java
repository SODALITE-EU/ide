/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.ECondition;
import org.sodalite.sdl.ansible.ansibleDsl.EDelegation;
import org.sodalite.sdl.ansible.ansibleDsl.EExecution;
import org.sodalite.sdl.ansible.ansibleDsl.EExecutionExeSettings;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EExecution</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExecutionImpl#getExe_settings <em>Exe settings</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExecutionImpl#getDelegation <em>Delegation</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExecutionImpl#getWhen_expression <em>When expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EExecutionImpl extends EBaseImpl implements EExecution
{
  /**
   * The cached value of the '{@link #getExe_settings() <em>Exe settings</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExe_settings()
   * @generated
   * @ordered
   */
  protected EExecutionExeSettings exe_settings;

  /**
   * The cached value of the '{@link #getDelegation() <em>Delegation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelegation()
   * @generated
   * @ordered
   */
  protected EDelegation delegation;

  /**
   * The cached value of the '{@link #getWhen_expression() <em>When expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhen_expression()
   * @generated
   * @ordered
   */
  protected ECondition when_expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EExecutionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EEXECUTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EExecutionExeSettings getExe_settings()
  {
    return exe_settings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExe_settings(EExecutionExeSettings newExe_settings, NotificationChain msgs)
  {
    EExecutionExeSettings oldExe_settings = exe_settings;
    exe_settings = newExe_settings;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXECUTION__EXE_SETTINGS, oldExe_settings, newExe_settings);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExe_settings(EExecutionExeSettings newExe_settings)
  {
    if (newExe_settings != exe_settings)
    {
      NotificationChain msgs = null;
      if (exe_settings != null)
        msgs = ((InternalEObject)exe_settings).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXECUTION__EXE_SETTINGS, null, msgs);
      if (newExe_settings != null)
        msgs = ((InternalEObject)newExe_settings).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXECUTION__EXE_SETTINGS, null, msgs);
      msgs = basicSetExe_settings(newExe_settings, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXECUTION__EXE_SETTINGS, newExe_settings, newExe_settings));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EDelegation getDelegation()
  {
    return delegation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDelegation(EDelegation newDelegation, NotificationChain msgs)
  {
    EDelegation oldDelegation = delegation;
    delegation = newDelegation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXECUTION__DELEGATION, oldDelegation, newDelegation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelegation(EDelegation newDelegation)
  {
    if (newDelegation != delegation)
    {
      NotificationChain msgs = null;
      if (delegation != null)
        msgs = ((InternalEObject)delegation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXECUTION__DELEGATION, null, msgs);
      if (newDelegation != null)
        msgs = ((InternalEObject)newDelegation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXECUTION__DELEGATION, null, msgs);
      msgs = basicSetDelegation(newDelegation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXECUTION__DELEGATION, newDelegation, newDelegation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECondition getWhen_expression()
  {
    return when_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhen_expression(ECondition newWhen_expression, NotificationChain msgs)
  {
    ECondition oldWhen_expression = when_expression;
    when_expression = newWhen_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION, oldWhen_expression, newWhen_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhen_expression(ECondition newWhen_expression)
  {
    if (newWhen_expression != when_expression)
    {
      NotificationChain msgs = null;
      if (when_expression != null)
        msgs = ((InternalEObject)when_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION, null, msgs);
      if (newWhen_expression != null)
        msgs = ((InternalEObject)newWhen_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION, null, msgs);
      msgs = basicSetWhen_expression(newWhen_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION, newWhen_expression, newWhen_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXECUTION__EXE_SETTINGS:
        return basicSetExe_settings(null, msgs);
      case AnsibleDslPackage.EEXECUTION__DELEGATION:
        return basicSetDelegation(null, msgs);
      case AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION:
        return basicSetWhen_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXECUTION__EXE_SETTINGS:
        return getExe_settings();
      case AnsibleDslPackage.EEXECUTION__DELEGATION:
        return getDelegation();
      case AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION:
        return getWhen_expression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXECUTION__EXE_SETTINGS:
        setExe_settings((EExecutionExeSettings)newValue);
        return;
      case AnsibleDslPackage.EEXECUTION__DELEGATION:
        setDelegation((EDelegation)newValue);
        return;
      case AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION:
        setWhen_expression((ECondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXECUTION__EXE_SETTINGS:
        setExe_settings((EExecutionExeSettings)null);
        return;
      case AnsibleDslPackage.EEXECUTION__DELEGATION:
        setDelegation((EDelegation)null);
        return;
      case AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION:
        setWhen_expression((ECondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXECUTION__EXE_SETTINGS:
        return exe_settings != null;
      case AnsibleDslPackage.EEXECUTION__DELEGATION:
        return delegation != null;
      case AnsibleDslPackage.EEXECUTION__WHEN_EXPRESSION:
        return when_expression != null;
    }
    return super.eIsSet(featureID);
  }

} //EExecutionImpl
