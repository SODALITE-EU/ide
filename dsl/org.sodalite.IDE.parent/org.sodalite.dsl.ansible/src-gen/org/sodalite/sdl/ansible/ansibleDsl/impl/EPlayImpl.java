/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EBlockTask;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EExternalFileInclusion;
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EHandler;
import org.sodalite.sdl.ansible.ansibleDsl.EListPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EPlay;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusions;
import org.sodalite.sdl.ansible.ansibleDsl.EStringPassed;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EPlay</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getHosts <em>Hosts</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getPlay_exe_settings <em>Play exe settings</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getError_handling <em>Error handling</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getFacts_settings <em>Facts settings</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getVars_files <em>Vars files</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getVars_prompt <em>Vars prompt</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getForce_handlers <em>Force handlers</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getExternal_file_inclusion <em>External file inclusion</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getPre_tasks_list <em>Pre tasks list</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getRoles_inclusions <em>Roles inclusions</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getTasks_list <em>Tasks list</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getPost_tasks_list <em>Post tasks list</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl#getHandlers <em>Handlers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EPlayImpl extends EBaseImpl implements EPlay
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected EStringPassed name;

  /**
   * The cached value of the '{@link #getHosts() <em>Hosts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHosts()
   * @generated
   * @ordered
   */
  protected EStringPassed hosts;

  /**
   * The cached value of the '{@link #getPlay_exe_settings() <em>Play exe settings</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlay_exe_settings()
   * @generated
   * @ordered
   */
  protected EPlayExeSettings play_exe_settings;

  /**
   * The cached value of the '{@link #getError_handling() <em>Error handling</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getError_handling()
   * @generated
   * @ordered
   */
  protected EPlayErrorHandling error_handling;

  /**
   * The cached value of the '{@link #getFacts_settings() <em>Facts settings</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFacts_settings()
   * @generated
   * @ordered
   */
  protected EFactsSettings facts_settings;

  /**
   * The cached value of the '{@link #getVars_files() <em>Vars files</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVars_files()
   * @generated
   * @ordered
   */
  protected EListPassed vars_files;

  /**
   * The cached value of the '{@link #getVars_prompt() <em>Vars prompt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVars_prompt()
   * @generated
   * @ordered
   */
  protected EListPassed vars_prompt;

  /**
   * The cached value of the '{@link #getForce_handlers() <em>Force handlers</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForce_handlers()
   * @generated
   * @ordered
   */
  protected EBooleanPassed force_handlers;

  /**
   * The cached value of the '{@link #getExternal_file_inclusion() <em>External file inclusion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternal_file_inclusion()
   * @generated
   * @ordered
   */
  protected EExternalFileInclusion external_file_inclusion;

  /**
   * The cached value of the '{@link #getPre_tasks_list() <em>Pre tasks list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPre_tasks_list()
   * @generated
   * @ordered
   */
  protected EList<EBlockTask> pre_tasks_list;

  /**
   * The cached value of the '{@link #getRoles_inclusions() <em>Roles inclusions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoles_inclusions()
   * @generated
   * @ordered
   */
  protected ERoleInclusions roles_inclusions;

  /**
   * The cached value of the '{@link #getTasks_list() <em>Tasks list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks_list()
   * @generated
   * @ordered
   */
  protected EList<EBlockTask> tasks_list;

  /**
   * The cached value of the '{@link #getPost_tasks_list() <em>Post tasks list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPost_tasks_list()
   * @generated
   * @ordered
   */
  protected EList<EBlockTask> post_tasks_list;

  /**
   * The cached value of the '{@link #getHandlers() <em>Handlers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandlers()
   * @generated
   * @ordered
   */
  protected EList<EHandler> handlers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EPlayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EPLAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EStringPassed getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(EStringPassed newName, NotificationChain msgs)
  {
    EStringPassed oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(EStringPassed newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EStringPassed getHosts()
  {
    return hosts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHosts(EStringPassed newHosts, NotificationChain msgs)
  {
    EStringPassed oldHosts = hosts;
    hosts = newHosts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__HOSTS, oldHosts, newHosts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHosts(EStringPassed newHosts)
  {
    if (newHosts != hosts)
    {
      NotificationChain msgs = null;
      if (hosts != null)
        msgs = ((InternalEObject)hosts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__HOSTS, null, msgs);
      if (newHosts != null)
        msgs = ((InternalEObject)newHosts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__HOSTS, null, msgs);
      msgs = basicSetHosts(newHosts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__HOSTS, newHosts, newHosts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EPlayExeSettings getPlay_exe_settings()
  {
    return play_exe_settings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPlay_exe_settings(EPlayExeSettings newPlay_exe_settings, NotificationChain msgs)
  {
    EPlayExeSettings oldPlay_exe_settings = play_exe_settings;
    play_exe_settings = newPlay_exe_settings;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS, oldPlay_exe_settings, newPlay_exe_settings);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlay_exe_settings(EPlayExeSettings newPlay_exe_settings)
  {
    if (newPlay_exe_settings != play_exe_settings)
    {
      NotificationChain msgs = null;
      if (play_exe_settings != null)
        msgs = ((InternalEObject)play_exe_settings).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS, null, msgs);
      if (newPlay_exe_settings != null)
        msgs = ((InternalEObject)newPlay_exe_settings).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS, null, msgs);
      msgs = basicSetPlay_exe_settings(newPlay_exe_settings, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS, newPlay_exe_settings, newPlay_exe_settings));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EPlayErrorHandling getError_handling()
  {
    return error_handling;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetError_handling(EPlayErrorHandling newError_handling, NotificationChain msgs)
  {
    EPlayErrorHandling oldError_handling = error_handling;
    error_handling = newError_handling;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__ERROR_HANDLING, oldError_handling, newError_handling);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setError_handling(EPlayErrorHandling newError_handling)
  {
    if (newError_handling != error_handling)
    {
      NotificationChain msgs = null;
      if (error_handling != null)
        msgs = ((InternalEObject)error_handling).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__ERROR_HANDLING, null, msgs);
      if (newError_handling != null)
        msgs = ((InternalEObject)newError_handling).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__ERROR_HANDLING, null, msgs);
      msgs = basicSetError_handling(newError_handling, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__ERROR_HANDLING, newError_handling, newError_handling));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EFactsSettings getFacts_settings()
  {
    return facts_settings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFacts_settings(EFactsSettings newFacts_settings, NotificationChain msgs)
  {
    EFactsSettings oldFacts_settings = facts_settings;
    facts_settings = newFacts_settings;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__FACTS_SETTINGS, oldFacts_settings, newFacts_settings);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFacts_settings(EFactsSettings newFacts_settings)
  {
    if (newFacts_settings != facts_settings)
    {
      NotificationChain msgs = null;
      if (facts_settings != null)
        msgs = ((InternalEObject)facts_settings).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__FACTS_SETTINGS, null, msgs);
      if (newFacts_settings != null)
        msgs = ((InternalEObject)newFacts_settings).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__FACTS_SETTINGS, null, msgs);
      msgs = basicSetFacts_settings(newFacts_settings, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__FACTS_SETTINGS, newFacts_settings, newFacts_settings));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EListPassed getVars_files()
  {
    return vars_files;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVars_files(EListPassed newVars_files, NotificationChain msgs)
  {
    EListPassed oldVars_files = vars_files;
    vars_files = newVars_files;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__VARS_FILES, oldVars_files, newVars_files);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVars_files(EListPassed newVars_files)
  {
    if (newVars_files != vars_files)
    {
      NotificationChain msgs = null;
      if (vars_files != null)
        msgs = ((InternalEObject)vars_files).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__VARS_FILES, null, msgs);
      if (newVars_files != null)
        msgs = ((InternalEObject)newVars_files).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__VARS_FILES, null, msgs);
      msgs = basicSetVars_files(newVars_files, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__VARS_FILES, newVars_files, newVars_files));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EListPassed getVars_prompt()
  {
    return vars_prompt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVars_prompt(EListPassed newVars_prompt, NotificationChain msgs)
  {
    EListPassed oldVars_prompt = vars_prompt;
    vars_prompt = newVars_prompt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__VARS_PROMPT, oldVars_prompt, newVars_prompt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVars_prompt(EListPassed newVars_prompt)
  {
    if (newVars_prompt != vars_prompt)
    {
      NotificationChain msgs = null;
      if (vars_prompt != null)
        msgs = ((InternalEObject)vars_prompt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__VARS_PROMPT, null, msgs);
      if (newVars_prompt != null)
        msgs = ((InternalEObject)newVars_prompt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__VARS_PROMPT, null, msgs);
      msgs = basicSetVars_prompt(newVars_prompt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__VARS_PROMPT, newVars_prompt, newVars_prompt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getForce_handlers()
  {
    return force_handlers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForce_handlers(EBooleanPassed newForce_handlers, NotificationChain msgs)
  {
    EBooleanPassed oldForce_handlers = force_handlers;
    force_handlers = newForce_handlers;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__FORCE_HANDLERS, oldForce_handlers, newForce_handlers);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForce_handlers(EBooleanPassed newForce_handlers)
  {
    if (newForce_handlers != force_handlers)
    {
      NotificationChain msgs = null;
      if (force_handlers != null)
        msgs = ((InternalEObject)force_handlers).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__FORCE_HANDLERS, null, msgs);
      if (newForce_handlers != null)
        msgs = ((InternalEObject)newForce_handlers).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__FORCE_HANDLERS, null, msgs);
      msgs = basicSetForce_handlers(newForce_handlers, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__FORCE_HANDLERS, newForce_handlers, newForce_handlers));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EExternalFileInclusion getExternal_file_inclusion()
  {
    return external_file_inclusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExternal_file_inclusion(EExternalFileInclusion newExternal_file_inclusion, NotificationChain msgs)
  {
    EExternalFileInclusion oldExternal_file_inclusion = external_file_inclusion;
    external_file_inclusion = newExternal_file_inclusion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION, oldExternal_file_inclusion, newExternal_file_inclusion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExternal_file_inclusion(EExternalFileInclusion newExternal_file_inclusion)
  {
    if (newExternal_file_inclusion != external_file_inclusion)
    {
      NotificationChain msgs = null;
      if (external_file_inclusion != null)
        msgs = ((InternalEObject)external_file_inclusion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION, null, msgs);
      if (newExternal_file_inclusion != null)
        msgs = ((InternalEObject)newExternal_file_inclusion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION, null, msgs);
      msgs = basicSetExternal_file_inclusion(newExternal_file_inclusion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION, newExternal_file_inclusion, newExternal_file_inclusion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EBlockTask> getPre_tasks_list()
  {
    if (pre_tasks_list == null)
    {
      pre_tasks_list = new EObjectContainmentEList<EBlockTask>(EBlockTask.class, this, AnsibleDslPackage.EPLAY__PRE_TASKS_LIST);
    }
    return pre_tasks_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ERoleInclusions getRoles_inclusions()
  {
    return roles_inclusions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoles_inclusions(ERoleInclusions newRoles_inclusions, NotificationChain msgs)
  {
    ERoleInclusions oldRoles_inclusions = roles_inclusions;
    roles_inclusions = newRoles_inclusions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS, oldRoles_inclusions, newRoles_inclusions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoles_inclusions(ERoleInclusions newRoles_inclusions)
  {
    if (newRoles_inclusions != roles_inclusions)
    {
      NotificationChain msgs = null;
      if (roles_inclusions != null)
        msgs = ((InternalEObject)roles_inclusions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS, null, msgs);
      if (newRoles_inclusions != null)
        msgs = ((InternalEObject)newRoles_inclusions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS, null, msgs);
      msgs = basicSetRoles_inclusions(newRoles_inclusions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS, newRoles_inclusions, newRoles_inclusions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EBlockTask> getTasks_list()
  {
    if (tasks_list == null)
    {
      tasks_list = new EObjectContainmentEList<EBlockTask>(EBlockTask.class, this, AnsibleDslPackage.EPLAY__TASKS_LIST);
    }
    return tasks_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EBlockTask> getPost_tasks_list()
  {
    if (post_tasks_list == null)
    {
      post_tasks_list = new EObjectContainmentEList<EBlockTask>(EBlockTask.class, this, AnsibleDslPackage.EPLAY__POST_TASKS_LIST);
    }
    return post_tasks_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EHandler> getHandlers()
  {
    if (handlers == null)
    {
      handlers = new EObjectContainmentEList<EHandler>(EHandler.class, this, AnsibleDslPackage.EPLAY__HANDLERS);
    }
    return handlers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAY__NAME:
        return basicSetName(null, msgs);
      case AnsibleDslPackage.EPLAY__HOSTS:
        return basicSetHosts(null, msgs);
      case AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS:
        return basicSetPlay_exe_settings(null, msgs);
      case AnsibleDslPackage.EPLAY__ERROR_HANDLING:
        return basicSetError_handling(null, msgs);
      case AnsibleDslPackage.EPLAY__FACTS_SETTINGS:
        return basicSetFacts_settings(null, msgs);
      case AnsibleDslPackage.EPLAY__VARS_FILES:
        return basicSetVars_files(null, msgs);
      case AnsibleDslPackage.EPLAY__VARS_PROMPT:
        return basicSetVars_prompt(null, msgs);
      case AnsibleDslPackage.EPLAY__FORCE_HANDLERS:
        return basicSetForce_handlers(null, msgs);
      case AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION:
        return basicSetExternal_file_inclusion(null, msgs);
      case AnsibleDslPackage.EPLAY__PRE_TASKS_LIST:
        return ((InternalEList<?>)getPre_tasks_list()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS:
        return basicSetRoles_inclusions(null, msgs);
      case AnsibleDslPackage.EPLAY__TASKS_LIST:
        return ((InternalEList<?>)getTasks_list()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.EPLAY__POST_TASKS_LIST:
        return ((InternalEList<?>)getPost_tasks_list()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.EPLAY__HANDLERS:
        return ((InternalEList<?>)getHandlers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAY__NAME:
        return getName();
      case AnsibleDslPackage.EPLAY__HOSTS:
        return getHosts();
      case AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS:
        return getPlay_exe_settings();
      case AnsibleDslPackage.EPLAY__ERROR_HANDLING:
        return getError_handling();
      case AnsibleDslPackage.EPLAY__FACTS_SETTINGS:
        return getFacts_settings();
      case AnsibleDslPackage.EPLAY__VARS_FILES:
        return getVars_files();
      case AnsibleDslPackage.EPLAY__VARS_PROMPT:
        return getVars_prompt();
      case AnsibleDslPackage.EPLAY__FORCE_HANDLERS:
        return getForce_handlers();
      case AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION:
        return getExternal_file_inclusion();
      case AnsibleDslPackage.EPLAY__PRE_TASKS_LIST:
        return getPre_tasks_list();
      case AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS:
        return getRoles_inclusions();
      case AnsibleDslPackage.EPLAY__TASKS_LIST:
        return getTasks_list();
      case AnsibleDslPackage.EPLAY__POST_TASKS_LIST:
        return getPost_tasks_list();
      case AnsibleDslPackage.EPLAY__HANDLERS:
        return getHandlers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAY__NAME:
        setName((EStringPassed)newValue);
        return;
      case AnsibleDslPackage.EPLAY__HOSTS:
        setHosts((EStringPassed)newValue);
        return;
      case AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS:
        setPlay_exe_settings((EPlayExeSettings)newValue);
        return;
      case AnsibleDslPackage.EPLAY__ERROR_HANDLING:
        setError_handling((EPlayErrorHandling)newValue);
        return;
      case AnsibleDslPackage.EPLAY__FACTS_SETTINGS:
        setFacts_settings((EFactsSettings)newValue);
        return;
      case AnsibleDslPackage.EPLAY__VARS_FILES:
        setVars_files((EListPassed)newValue);
        return;
      case AnsibleDslPackage.EPLAY__VARS_PROMPT:
        setVars_prompt((EListPassed)newValue);
        return;
      case AnsibleDslPackage.EPLAY__FORCE_HANDLERS:
        setForce_handlers((EBooleanPassed)newValue);
        return;
      case AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION:
        setExternal_file_inclusion((EExternalFileInclusion)newValue);
        return;
      case AnsibleDslPackage.EPLAY__PRE_TASKS_LIST:
        getPre_tasks_list().clear();
        getPre_tasks_list().addAll((Collection<? extends EBlockTask>)newValue);
        return;
      case AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS:
        setRoles_inclusions((ERoleInclusions)newValue);
        return;
      case AnsibleDslPackage.EPLAY__TASKS_LIST:
        getTasks_list().clear();
        getTasks_list().addAll((Collection<? extends EBlockTask>)newValue);
        return;
      case AnsibleDslPackage.EPLAY__POST_TASKS_LIST:
        getPost_tasks_list().clear();
        getPost_tasks_list().addAll((Collection<? extends EBlockTask>)newValue);
        return;
      case AnsibleDslPackage.EPLAY__HANDLERS:
        getHandlers().clear();
        getHandlers().addAll((Collection<? extends EHandler>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAY__NAME:
        setName((EStringPassed)null);
        return;
      case AnsibleDslPackage.EPLAY__HOSTS:
        setHosts((EStringPassed)null);
        return;
      case AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS:
        setPlay_exe_settings((EPlayExeSettings)null);
        return;
      case AnsibleDslPackage.EPLAY__ERROR_HANDLING:
        setError_handling((EPlayErrorHandling)null);
        return;
      case AnsibleDslPackage.EPLAY__FACTS_SETTINGS:
        setFacts_settings((EFactsSettings)null);
        return;
      case AnsibleDslPackage.EPLAY__VARS_FILES:
        setVars_files((EListPassed)null);
        return;
      case AnsibleDslPackage.EPLAY__VARS_PROMPT:
        setVars_prompt((EListPassed)null);
        return;
      case AnsibleDslPackage.EPLAY__FORCE_HANDLERS:
        setForce_handlers((EBooleanPassed)null);
        return;
      case AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION:
        setExternal_file_inclusion((EExternalFileInclusion)null);
        return;
      case AnsibleDslPackage.EPLAY__PRE_TASKS_LIST:
        getPre_tasks_list().clear();
        return;
      case AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS:
        setRoles_inclusions((ERoleInclusions)null);
        return;
      case AnsibleDslPackage.EPLAY__TASKS_LIST:
        getTasks_list().clear();
        return;
      case AnsibleDslPackage.EPLAY__POST_TASKS_LIST:
        getPost_tasks_list().clear();
        return;
      case AnsibleDslPackage.EPLAY__HANDLERS:
        getHandlers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAY__NAME:
        return name != null;
      case AnsibleDslPackage.EPLAY__HOSTS:
        return hosts != null;
      case AnsibleDslPackage.EPLAY__PLAY_EXE_SETTINGS:
        return play_exe_settings != null;
      case AnsibleDslPackage.EPLAY__ERROR_HANDLING:
        return error_handling != null;
      case AnsibleDslPackage.EPLAY__FACTS_SETTINGS:
        return facts_settings != null;
      case AnsibleDslPackage.EPLAY__VARS_FILES:
        return vars_files != null;
      case AnsibleDslPackage.EPLAY__VARS_PROMPT:
        return vars_prompt != null;
      case AnsibleDslPackage.EPLAY__FORCE_HANDLERS:
        return force_handlers != null;
      case AnsibleDslPackage.EPLAY__EXTERNAL_FILE_INCLUSION:
        return external_file_inclusion != null;
      case AnsibleDslPackage.EPLAY__PRE_TASKS_LIST:
        return pre_tasks_list != null && !pre_tasks_list.isEmpty();
      case AnsibleDslPackage.EPLAY__ROLES_INCLUSIONS:
        return roles_inclusions != null;
      case AnsibleDslPackage.EPLAY__TASKS_LIST:
        return tasks_list != null && !tasks_list.isEmpty();
      case AnsibleDslPackage.EPLAY__POST_TASKS_LIST:
        return post_tasks_list != null && !post_tasks_list.isEmpty();
      case AnsibleDslPackage.EPLAY__HANDLERS:
        return handlers != null && !handlers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EPlayImpl
