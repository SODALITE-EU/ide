/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.ECondition;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandlerErrorHandling;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ETask Handler Error Handling</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskHandlerErrorHandlingImpl#getChanged_when <em>Changed when</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskHandlerErrorHandlingImpl#getFailed_when <em>Failed when</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ETaskHandlerErrorHandlingImpl extends EErrorHandlingImpl implements ETaskHandlerErrorHandling
{
  /**
   * The cached value of the '{@link #getChanged_when() <em>Changed when</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChanged_when()
   * @generated
   * @ordered
   */
  protected ECondition changed_when;

  /**
   * The cached value of the '{@link #getFailed_when() <em>Failed when</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFailed_when()
   * @generated
   * @ordered
   */
  protected ECondition failed_when;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ETaskHandlerErrorHandlingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ETASK_HANDLER_ERROR_HANDLING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECondition getChanged_when()
  {
    return changed_when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChanged_when(ECondition newChanged_when, NotificationChain msgs)
  {
    ECondition oldChanged_when = changed_when;
    changed_when = newChanged_when;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN, oldChanged_when, newChanged_when);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChanged_when(ECondition newChanged_when)
  {
    if (newChanged_when != changed_when)
    {
      NotificationChain msgs = null;
      if (changed_when != null)
        msgs = ((InternalEObject)changed_when).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN, null, msgs);
      if (newChanged_when != null)
        msgs = ((InternalEObject)newChanged_when).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN, null, msgs);
      msgs = basicSetChanged_when(newChanged_when, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN, newChanged_when, newChanged_when));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECondition getFailed_when()
  {
    return failed_when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFailed_when(ECondition newFailed_when, NotificationChain msgs)
  {
    ECondition oldFailed_when = failed_when;
    failed_when = newFailed_when;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN, oldFailed_when, newFailed_when);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFailed_when(ECondition newFailed_when)
  {
    if (newFailed_when != failed_when)
    {
      NotificationChain msgs = null;
      if (failed_when != null)
        msgs = ((InternalEObject)failed_when).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN, null, msgs);
      if (newFailed_when != null)
        msgs = ((InternalEObject)newFailed_when).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN, null, msgs);
      msgs = basicSetFailed_when(newFailed_when, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN, newFailed_when, newFailed_when));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN:
        return basicSetChanged_when(null, msgs);
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN:
        return basicSetFailed_when(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN:
        return getChanged_when();
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN:
        return getFailed_when();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN:
        setChanged_when((ECondition)newValue);
        return;
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN:
        setFailed_when((ECondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN:
        setChanged_when((ECondition)null);
        return;
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN:
        setFailed_when((ECondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__CHANGED_WHEN:
        return changed_when != null;
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING__FAILED_WHEN:
        return failed_when != null;
    }
    return super.eIsSet(featureID);
  }

} //ETaskHandlerErrorHandlingImpl
