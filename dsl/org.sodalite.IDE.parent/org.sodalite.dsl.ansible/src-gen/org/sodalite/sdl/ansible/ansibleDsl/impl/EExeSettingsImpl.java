/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EExe Settings</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExeSettingsImpl#getThrottle <em>Throttle</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExeSettingsImpl#getRun_once <em>Run once</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EExeSettingsImpl extends MinimalEObjectImpl.Container implements EExeSettings
{
  /**
   * The cached value of the '{@link #getThrottle() <em>Throttle</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrottle()
   * @generated
   * @ordered
   */
  protected ENumberPassed throttle;

  /**
   * The cached value of the '{@link #getRun_once() <em>Run once</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRun_once()
   * @generated
   * @ordered
   */
  protected EBooleanPassed run_once;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EExeSettingsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EEXE_SETTINGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumberPassed getThrottle()
  {
    return throttle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThrottle(ENumberPassed newThrottle, NotificationChain msgs)
  {
    ENumberPassed oldThrottle = throttle;
    throttle = newThrottle;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXE_SETTINGS__THROTTLE, oldThrottle, newThrottle);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThrottle(ENumberPassed newThrottle)
  {
    if (newThrottle != throttle)
    {
      NotificationChain msgs = null;
      if (throttle != null)
        msgs = ((InternalEObject)throttle).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXE_SETTINGS__THROTTLE, null, msgs);
      if (newThrottle != null)
        msgs = ((InternalEObject)newThrottle).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXE_SETTINGS__THROTTLE, null, msgs);
      msgs = basicSetThrottle(newThrottle, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXE_SETTINGS__THROTTLE, newThrottle, newThrottle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EBooleanPassed getRun_once()
  {
    return run_once;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRun_once(EBooleanPassed newRun_once, NotificationChain msgs)
  {
    EBooleanPassed oldRun_once = run_once;
    run_once = newRun_once;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE, oldRun_once, newRun_once);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRun_once(EBooleanPassed newRun_once)
  {
    if (newRun_once != run_once)
    {
      NotificationChain msgs = null;
      if (run_once != null)
        msgs = ((InternalEObject)run_once).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE, null, msgs);
      if (newRun_once != null)
        msgs = ((InternalEObject)newRun_once).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE, null, msgs);
      msgs = basicSetRun_once(newRun_once, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE, newRun_once, newRun_once));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        return basicSetThrottle(null, msgs);
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        return basicSetRun_once(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        return getThrottle();
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        return getRun_once();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        setThrottle((ENumberPassed)newValue);
        return;
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        setRun_once((EBooleanPassed)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        setThrottle((ENumberPassed)null);
        return;
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        setRun_once((EBooleanPassed)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        return throttle != null;
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        return run_once != null;
    }
    return super.eIsSet(featureID);
  }

} //EExeSettingsImpl
