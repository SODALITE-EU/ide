/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EForStatement;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EFor Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getFor_block_sign <em>For block sign</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getIdentifiers <em>Identifiers</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getList <em>List</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getRecursive <em>Recursive</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getFor_body <em>For body</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EForStatementImpl#getEndfor_block_sign <em>Endfor block sign</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EForStatementImpl extends EJinjaStatementImpl implements EForStatement
{
  /**
   * The default value of the '{@link #getFor_block_sign() <em>For block sign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFor_block_sign()
   * @generated
   * @ordered
   */
  protected static final String FOR_BLOCK_SIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFor_block_sign() <em>For block sign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFor_block_sign()
   * @generated
   * @ordered
   */
  protected String for_block_sign = FOR_BLOCK_SIGN_EDEFAULT;

  /**
   * The cached value of the '{@link #getIdentifiers() <em>Identifiers</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifiers()
   * @generated
   * @ordered
   */
  protected EList<String> identifiers;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected EFilteredExpression list;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EFilteredExpression condition;

  /**
   * The default value of the '{@link #getRecursive() <em>Recursive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursive()
   * @generated
   * @ordered
   */
  protected static final String RECURSIVE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRecursive() <em>Recursive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursive()
   * @generated
   * @ordered
   */
  protected String recursive = RECURSIVE_EDEFAULT;

  /**
   * The cached value of the '{@link #getFor_body() <em>For body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFor_body()
   * @generated
   * @ordered
   */
  protected EValuePassed for_body;

  /**
   * The default value of the '{@link #getEndfor_block_sign() <em>Endfor block sign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndfor_block_sign()
   * @generated
   * @ordered
   */
  protected static final String ENDFOR_BLOCK_SIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEndfor_block_sign() <em>Endfor block sign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndfor_block_sign()
   * @generated
   * @ordered
   */
  protected String endfor_block_sign = ENDFOR_BLOCK_SIGN_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EForStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EFOR_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFor_block_sign()
  {
    return for_block_sign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFor_block_sign(String newFor_block_sign)
  {
    String oldFor_block_sign = for_block_sign;
    for_block_sign = newFor_block_sign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__FOR_BLOCK_SIGN, oldFor_block_sign, for_block_sign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getIdentifiers()
  {
    if (identifiers == null)
    {
      identifiers = new EDataTypeEList<String>(String.class, this, AnsibleDslPackage.EFOR_STATEMENT__IDENTIFIERS);
    }
    return identifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EFilteredExpression getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(EFilteredExpression newList, NotificationChain msgs)
  {
    EFilteredExpression oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setList(EFilteredExpression newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFOR_STATEMENT__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFOR_STATEMENT__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EFilteredExpression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(EFilteredExpression newCondition, NotificationChain msgs)
  {
    EFilteredExpression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(EFilteredExpression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFOR_STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFOR_STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRecursive()
  {
    return recursive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRecursive(String newRecursive)
  {
    String oldRecursive = recursive;
    recursive = newRecursive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__RECURSIVE, oldRecursive, recursive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValuePassed getFor_body()
  {
    return for_body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFor_body(EValuePassed newFor_body, NotificationChain msgs)
  {
    EValuePassed oldFor_body = for_body;
    for_body = newFor_body;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY, oldFor_body, newFor_body);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFor_body(EValuePassed newFor_body)
  {
    if (newFor_body != for_body)
    {
      NotificationChain msgs = null;
      if (for_body != null)
        msgs = ((InternalEObject)for_body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY, null, msgs);
      if (newFor_body != null)
        msgs = ((InternalEObject)newFor_body).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY, null, msgs);
      msgs = basicSetFor_body(newFor_body, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY, newFor_body, newFor_body));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEndfor_block_sign()
  {
    return endfor_block_sign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndfor_block_sign(String newEndfor_block_sign)
  {
    String oldEndfor_block_sign = endfor_block_sign;
    endfor_block_sign = newEndfor_block_sign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EFOR_STATEMENT__ENDFOR_BLOCK_SIGN, oldEndfor_block_sign, endfor_block_sign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFOR_STATEMENT__LIST:
        return basicSetList(null, msgs);
      case AnsibleDslPackage.EFOR_STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY:
        return basicSetFor_body(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BLOCK_SIGN:
        return getFor_block_sign();
      case AnsibleDslPackage.EFOR_STATEMENT__IDENTIFIERS:
        return getIdentifiers();
      case AnsibleDslPackage.EFOR_STATEMENT__LIST:
        return getList();
      case AnsibleDslPackage.EFOR_STATEMENT__CONDITION:
        return getCondition();
      case AnsibleDslPackage.EFOR_STATEMENT__RECURSIVE:
        return getRecursive();
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY:
        return getFor_body();
      case AnsibleDslPackage.EFOR_STATEMENT__ENDFOR_BLOCK_SIGN:
        return getEndfor_block_sign();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BLOCK_SIGN:
        setFor_block_sign((String)newValue);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__IDENTIFIERS:
        getIdentifiers().clear();
        getIdentifiers().addAll((Collection<? extends String>)newValue);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__LIST:
        setList((EFilteredExpression)newValue);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__CONDITION:
        setCondition((EFilteredExpression)newValue);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__RECURSIVE:
        setRecursive((String)newValue);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY:
        setFor_body((EValuePassed)newValue);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__ENDFOR_BLOCK_SIGN:
        setEndfor_block_sign((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BLOCK_SIGN:
        setFor_block_sign(FOR_BLOCK_SIGN_EDEFAULT);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__IDENTIFIERS:
        getIdentifiers().clear();
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__LIST:
        setList((EFilteredExpression)null);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__CONDITION:
        setCondition((EFilteredExpression)null);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__RECURSIVE:
        setRecursive(RECURSIVE_EDEFAULT);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY:
        setFor_body((EValuePassed)null);
        return;
      case AnsibleDslPackage.EFOR_STATEMENT__ENDFOR_BLOCK_SIGN:
        setEndfor_block_sign(ENDFOR_BLOCK_SIGN_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BLOCK_SIGN:
        return FOR_BLOCK_SIGN_EDEFAULT == null ? for_block_sign != null : !FOR_BLOCK_SIGN_EDEFAULT.equals(for_block_sign);
      case AnsibleDslPackage.EFOR_STATEMENT__IDENTIFIERS:
        return identifiers != null && !identifiers.isEmpty();
      case AnsibleDslPackage.EFOR_STATEMENT__LIST:
        return list != null;
      case AnsibleDslPackage.EFOR_STATEMENT__CONDITION:
        return condition != null;
      case AnsibleDslPackage.EFOR_STATEMENT__RECURSIVE:
        return RECURSIVE_EDEFAULT == null ? recursive != null : !RECURSIVE_EDEFAULT.equals(recursive);
      case AnsibleDslPackage.EFOR_STATEMENT__FOR_BODY:
        return for_body != null;
      case AnsibleDslPackage.EFOR_STATEMENT__ENDFOR_BLOCK_SIGN:
        return ENDFOR_BLOCK_SIGN_EDEFAULT == null ? endfor_block_sign != null : !ENDFOR_BLOCK_SIGN_EDEFAULT.equals(endfor_block_sign);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (for_block_sign: ");
    result.append(for_block_sign);
    result.append(", identifiers: ");
    result.append(identifiers);
    result.append(", recursive: ");
    result.append(recursive);
    result.append(", endfor_block_sign: ");
    result.append(endfor_block_sign);
    result.append(')');
    return result.toString();
  }

} //EForStatementImpl
