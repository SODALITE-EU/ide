/*
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference
import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.EVariableDeclarationImpl
import java.util.ArrayList
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlaybookImpl
import org.sodalite.dsl.rM.impl.EParameterDefinitionImpl
import org.sodalite.dsl.rM.impl.EOperationDefinitionImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.EVariableDeclarationVariableReferenceImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERegisterVariableReferenceImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERegisterVariableImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.ENotifiedHandlerImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.EHandlerImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.ENotifiedTopicImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.ESetFactVariableReferenceImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.EParameterImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.EModuleCallImpl
import org.sodalite.sdl.ansible.ansibleDsl.EParameter
import org.sodalite.sdl.ansible.ansibleDsl.impl.LocalNodeImpl
import org.sodalite.dsl.rM.impl.EInterfaceDefinitionImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.LocalEInputOperationVariableReferenceImpl
import org.sodalite.sdl.ansible.ansibleDsl.impl.LocalEInputInterfaceVariableReferenceImpl
import org.sodalite.dsl.rM.impl.EPropertiesImpl

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AnsibleDslScopeProvider extends AbstractAnsibleDslScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		//scope for variables declared only in this specific play
		if (context instanceof EVariableDeclarationVariableReferenceImpl && reference == AnsibleDslPackage.Literals.EVARIABLE_DECLARATION_VARIABLE_REFERENCE__VARIABLE_DECLARATION_VARIABLE_REFERENCE){
			val rootPlay = EcoreUtil2.getContainerOfType(context, EPlayImpl)
			if (rootPlay !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(rootPlay, EVariableDeclarationImpl)
				return Scopes.scopeFor(candidates)
			}
		}
		
		//scope for variables registered only in this specific play
		if (context instanceof ERegisterVariableReferenceImpl && reference == AnsibleDslPackage.Literals.EREGISTER_VARIABLE_REFERENCE__REGISTER_VARIABLE_REFERENCE){
			val rootPlay = EcoreUtil2.getContainerOfType(context, EPlayImpl)
			if (rootPlay !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(rootPlay, ERegisterVariableImpl)
				return Scopes.scopeFor(candidates)
			}
		}
		
		//scope for facts set, with the "set_facts" module, in this specific playbook
		if (context instanceof ESetFactVariableReferenceImpl && reference == AnsibleDslPackage.Literals.ESET_FACT_VARIABLE_REFERENCE__NAME){
			val rootPlaybook = EcoreUtil2.getContainerOfType(context, EPlaybookImpl)
			if (rootPlaybook !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(rootPlaybook, EParameterImpl)
				//the parameters candidates should be only the ones set in a "set_fact" module
				var legitCandidates = new ArrayList<EParameter>
				for (parameter: candidates){
					val moduleCall = EcoreUtil2.getContainerOfType(parameter, EModuleCallImpl)
					if (moduleCall !== null){
						if (moduleCall.firstPart == "set_fact") legitCandidates.add(parameter)
					}
				}
				return Scopes.scopeFor(legitCandidates)
			}
		}
		
		//scope for handlers defined only in this specific play
		if (context instanceof ENotifiedHandlerImpl && reference == AnsibleDslPackage.Literals.ENOTIFIED_HANDLER__NAME){
			val rootPlay = EcoreUtil2.getContainerOfType(context, EPlayImpl)
			if (rootPlay !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(rootPlay, EHandlerImpl)
				return Scopes.scopeFor(candidates)
			}
		}
		
		
		if(context instanceof LocalNodeImpl && reference == AnsibleDslPackage.Literals.LOCAL_NODE__INTERFACE){
			val nodeType = (context as LocalNodeImpl).node_type
			if(nodeType !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(nodeType, EInterfaceDefinitionImpl)
				return Scopes.scopeFor(candidates)
			}
		}
		
  		if(context instanceof LocalNodeImpl && reference == AnsibleDslPackage.Literals.LOCAL_NODE__OPERATION){
			val nodeType = (context as LocalNodeImpl).node_type
			val interface = (context as LocalNodeImpl).interface
			if(nodeType !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(interface, EOperationDefinitionImpl)
				return Scopes.scopeFor(candidates)
			}
		}	

		
		if (context instanceof LocalEInputOperationVariableReferenceImpl && reference == AnsibleDslPackage.Literals.LOCAL_EINPUT_OPERATION_VARIABLE_REFERENCE__NAME){
			val rootPlaybook = EcoreUtil2.getContainerOfType(context, EPlaybookImpl)
			val usedByBody = rootPlaybook.used_by
			if (usedByBody !== null){
				if(usedByBody.node instanceof LocalNodeImpl){
					val operation = (usedByBody.node as LocalNodeImpl).operation
					if (operation !== null){
						//the variables to scope for are the inputs of the specific operation in the RM
						val candidates = EcoreUtil2.getAllContentsOfType(operation, EParameterDefinitionImpl)
						return Scopes.scopeFor(candidates)
					}
				}
			}
		}
		
		if (context instanceof LocalEInputInterfaceVariableReferenceImpl && reference == AnsibleDslPackage.Literals.LOCAL_EINPUT_INTERFACE_VARIABLE_REFERENCE__NAME){
			val rootPlaybook = EcoreUtil2.getContainerOfType(context, EPlaybookImpl)
			//val candidates = new ArrayList<EPropertyDefinition>
			val usedByBody = rootPlaybook.used_by
			if (usedByBody !== null){
				if(usedByBody.node instanceof LocalNodeImpl){
					val interface = (usedByBody.node as LocalNodeImpl).interface
					if (interface !== null){
					//the variables to scope for are the inputs defined in the specific interface in the RM
						//val interfaceDefinitionBody = interface.interface
						//val inputsProperties = interfaceDefinitionBody.inputs
						//for (input : inputsProperties.properties){
						//	candidates.add(input)
						//}
						val candidates = EcoreUtil2.getAllContentsOfType(interface,EPropertiesImpl)
						return Scopes.scopeFor(candidates)
					}
				}
								
			}
		} 
		
		//the topics to scope for are only the once defined in the current play
		if (context instanceof EHandlerImpl && reference == AnsibleDslPackage.Literals.EHANDLER__LISTEN_TO){
			val rootPlay = EcoreUtil2.getContainerOfType(context, EPlayImpl)
			if (rootPlay !== null){
				val candidates = EcoreUtil2.getAllContentsOfType(rootPlay, ENotifiedTopicImpl)
				return Scopes.scopeFor(candidates)
			}
		}
		
		
		
		return super.getScope(context, reference);
	}
}