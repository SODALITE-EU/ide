grammar org.sodalite.sdl.ansible.AnsibleDsl with org.eclipse.xtext.common.Terminals

generate ansibleDsl "http://www.sodalite.org/dsl/AnsibleDsl"
import "http://www.sodalite.org/dsl/RM" as rm
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	EPlaybook
;

EPlaybook:
	'playbook_name:' name=STRING
	(used_by=EUsedByBody)?
	'plays:'
	BEGIN
		(plays+=EPlay+)
	END
;

EUsedByBody:
	'used_by:'
	BEGIN
	(
		node = Node
		
	)
	END
;

Node:
	LocalNode | KBNode
;
 LocalNode:
 	'node_type:' node_type= [rm::ENodeType|STRING]
 	'interface:' interface= [rm::EInterfaceDefinition|STRING]
	'operation:' operation= [rm::EOperationDefinition|STRING]
 ;
 
 KBNode:
 	'node_type:' node_type= EPREFIX_TYPE
 	'interface:' interface= ID
 	'operation:' operation= ID
 ;

EPREFIX_TYPE:
	(module=ID '/')? type=QUALIFIED_NAME
;


EBase:
	EPlay | EExecution
;

EExecution:
	EBlock | ETaskHandler | ERoleInclusion
;

EBlockTaskRole:
	EBlockTask 
;

EBlockTask:
	EBlock | ETask
;

ETaskHandler:
	ETask | EHandler
;

EPlay:
	{EPlay}
	'play:'
	BEGIN
	(
		('play_name:' name=EStringPassed)? &
		('hosts:' hosts=EStringPassed)? &
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EStringPassed)? &
		('module_defaults:' module_defaults=EValuePassed)? &
		('environment:' environment=EValuePassed)? &
		('collections:' collections=ECollectionListPassed)? &
		('tags_attribute:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(play_exe_settings=EPlayExeSettings)? &
		(error_handling=EPlayErrorHandling)? &
		(facts_settings=EFactsSettings)? &
		('vars_files:' vars_files=EListPassed)? &
		('vars_prompt:' vars_prompt=EListPassed)? &
		('force_handlers:' force_handlers=EBooleanPassed)? &
		(external_file_inclusion=EExternalFileInclusion)? &
		('pre_tasks:'
		BEGIN
			(pre_tasks_list+=EBlockTask)+
		END)? &
		(roles_inclusions=ERoleInclusions)? &
		('tasks_list:'
		BEGIN
			(tasks_list+=EBlockTask)+
		END)? &
		('post_tasks:'
		BEGIN
			(post_tasks_list+=EBlockTask)+
		END)? &
		('handlers:'
		BEGIN
			(handlers+=EHandler)+
		END)?
	)
	END
;

EBlock:
	'block_to_execute:'
	BEGIN
	(
		('block_name:' name=EStringPassed)? &
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EStringPassed)? &
		('module_defaults:' module_defaults=EValuePassed)? &
		('environment:' environment=EValuePassed)? &
		('collections:' collections=ECollectionListPassed)? &
		('tags_attribute:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(exe_settings=EExecutionExeSettings)? &
		(delegation=EDelegation)? &
		('when:' when_expression=ECondition)? &
		(error_handling=EBlockAndRoleErrorHandling)? &
		('tasks:'
		BEGIN
			(tasks+=ETask)+
		END) &
		('rescue_tasks:'
		BEGIN
			(rescue_tasks+=ETask)+
		END)? &
		('always_tasks:'
		BEGIN
			(always_tasks+=ETask)+
		END)?
	)
	END
;

ETask:
	{ETask}
	'task_to_execute:'
	BEGIN
	(
		('task_name:' name=EStringPassed)? &
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EStringPassed)? &
		('module_defaults:' module_defaults=EValuePassed)? &
		('environment:' environment=EValuePassed)? &
		('collections:' collections=ECollectionListPassed)? &
		('tags_attribute:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(exe_settings=EExecutionExeSettings)? &
		(delegation=EDelegation)? &
		('when:' when_expression=ECondition)? &
		(error_handling=ETaskHandlerErrorHandling)? &
		('action:' action=EStringPassed)? &
		(asynchronous_settings=EAsynchronousSettings)? &
		('args:' args=EDictionaryPassed)? &
		(module=EModuleCall) &
		('notify:' (notifiables+=ENotifiable) (',' notifiables+=ENotifiable)*)? &
		(loop=ELoop)? &
		(register=ERegisterVariable)?
	)
	END
;

EHandler:
	{EHandler}
	'handler:'
	BEGIN
	(
		('handler_name:' name=STRING)? & //could not use EStringPassed because if so the scoping doesn't work
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EStringPassed)? &
		('module_defaults:' module_defaults=EValuePassed)? &
		('environment:' environment=EValuePassed)? &
		('collections:' collections=ECollectionListPassed)? &
		('tags_attribute:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(exe_settings=EExecutionExeSettings)? &
		(delegation=EDelegation)? &
		('when:' when_expression=ECondition)? &
		(error_handling=ETaskHandlerErrorHandling)? &
		('action:' action=EStringPassed)? &
		(asynchronous_settings=EAsynchronousSettings)? &
		('args:' args=EDictionaryPassed)? &
		(module=EModuleCall) &
		('notify:' (notifiables+=ENotifiable) (',' notifiables+=ENotifiable)*)? &
		(loop=ELoop)? &
		(register=ERegisterVariable)? &
		('listen:' (listen_to+=[ENotifiedTopic|STRING]) (',' listen_to+=[ENotifiedTopic|STRING])*)?
	)
	END
;

//
EModuleCall:
	'module:' firstPart = EStringWithoutQuotesPassed ('.' secondPart = EStringWithoutQuotesPassed ('.' thirdPart = EStringWithoutQuotesPassed)? )? 
	(
		BEGIN
		(
			('direct_parameter:' direct_parameter=EValuePassed)? &
			('parameters:'
			BEGIN
				(parameters+=EParameter)+
			END)?
		)
		END
	)?
;

EParameter:
	name=ID ':' value = EValuePassed
;

ERoleInclusion:
	'role:'
	BEGIN
	(
		'role_name:' name=ERoleName
		(
			(privilege_escalation=EPrivilegeEscalation)? &
			(validation_mode=EValidationMode)? &
			(connection=EConnection)? &
			('no_log:' no_log=EBooleanPassed)? &
			('debugger:' debugger=EStringPassed)? &
			('module_defaults:' module_defaults=EValuePassed)? &
			('environment:' environment=EValuePassed)? &
			('collections:' collections=ECollectionListPassed)? &
			('tags_attribute:' tags=EListPassed)? &
			('vars:'
			BEGIN
				(variable_declarations+=EVariableDeclaration)+
			END)? &
			(exe_settings=EExecutionExeSettings)? &
			(delegation=EDelegation)? &
			('when:' when_expression=ECondition)? &
			(error_handling=EBlockAndRoleErrorHandling)?
		)
	)
	END
;

ERoleName:
	firstPart = ENumberOrStringWithoutQuotesPassed  ("." secondPart = EStringWithoutQuotesPassed ("." thirdPart = EStringWithoutQuotesPassed)? )?
;

ENumberOrStringWithoutQuotesPassed:
	EStringWithoutQuotesPassed | ENumber
;


ERoleInclusions:
	'roles_inclusions:'
	BEGIN
		(roles+=ERoleInclusion)+
	END
;

EExternalFileInclusion:
	'external_file_inclusion:'
	BEGIN
	(
		(
			('import_playbook:' import_playbook=STRING) |
			('include:' include=STRING)
		)
		('when:' when_expression=ECondition)?
	)
	END
;

ELoop:
	'loop:'
	BEGIN
		(ELoopOverList | EWithLookup | EUntil)
	END
;

ELoopOverList:
	'loop_over:' loop_list=EValuePassed
	(loop_control=ELoopControl)?
;

ELoopControl:
	'loop_control:'
	BEGIN
	(
		('label:' label=EValuePassed)? &
		('pause:' pause=ENumberPassed)? & //number of seconds
		('index_var:' index_var=EIndexOrLoopVariable)? &
		('loop_var:' loop_var=EIndexOrLoopVariable)? &
		('extended:' extended=EBooleanPassed)?
	)
	END
;

EWithLookup:
	'with' lookup=ID ':' with_list=EValuePassed
;

EUntil:
	'until:'
	BEGIN
	(
		('until_condition:' until=EJinjaExpressionEvaluationWithoutBrackets)? &
		('retries:' retries=ENumberPassed)? &
		('delay_attribute:' delay=ENumberPassed)? //number of seconds
	)
	END
;

EPrivilegeEscalation:
	'privilege_escalation:'
	BEGIN
	(	
		('become:' become=EBooleanPassed)? &
		('become_exe:' become_exe=EStringPassed)? &
		('become_flags:' become_flags=EStringPassed)? &
		('become_method:' become_method=EStringPassed)? &
		('become_user:' become_user=EStringPassed)?
	)
	END
;

EValidationMode:
	'validation_mode:'
	BEGIN
	(
		('check_mode:' check_mode=EBooleanPassed)? &
		('diff:' diff=EBooleanPassed)?
	)
	END
;

EConnection:
	'connection_info:'
	BEGIN
	(
		('connection:' connection=EStringPassed)? &
		('port_attribute:' port=ENumberPassed)? &
		('remote_user:' remote_user=EStringPassed)?
	)
	END
;

EExeSettings:
	EExecutionExeSettings | EPlayExeSettings
;

EPlayExeSettings:
	'play_exe_settings:'
	BEGIN
	(
		('strategy:' strategy=EStringPassed)? &
		('serial:' serial_list=EValuePassed)? &
		('order:' order=EStringPassed)? &
		('throttle:' throttle=ENumberPassed)? &
		('run_once:' run_once=EBooleanPassed)?
	)
	END
;

EExecutionExeSettings:
	'exe_settings:'
	BEGIN
	(
		('throttle:' throttle=ENumberPassed)? &
		('run_once:' run_once=EBooleanPassed)?
	)
	END
;

EErrorHandling:
	EBlockAndRoleErrorHandling | EPlayErrorHandling | ETaskHandlerErrorHandling
;

EBlockAndRoleErrorHandling:
	'error_handling:'
	BEGIN
	(
		('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
		('ignore_errors:' ignore_errors=EBooleanPassed)? &
		('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
	END
;

EPlayErrorHandling:
	'error_handling:'
	BEGIN
	(
		('max_fail_percentage:' max_fail_percentage=ENumberPassed)? &
		('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
		('ignore_errors:' ignore_errors=EBooleanPassed)? &
		('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
	END
;

ETaskHandlerErrorHandling:
	'error_handling:'
	BEGIN
	(
		('changed_when:' changed_when=ECondition)? &
		('failed_when:' failed_when=ECondition)? &
		('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
		('ignore_errors:' ignore_errors=EBooleanPassed)? &
		('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
	END
;

EFactsSettings:
	'facts_settings:'
	BEGIN
	(
		('gather_facts:' gather_facts=EBooleanPassed)? &
		('gather_subset:' gather_subset=EValuePassed)? &
		('gather_timeout:'gather_timeout=ENumberPassed)? &
		('fact_path:' fact_path=EStringPassed)?
	)
	END
;

EDelegation:
	'delegation:'
	BEGIN
	(
		('delegate_to:' delegate_to=EStringPassed)? &
		('delegate_facts:' delegate_facts=EBooleanPassed)?
	)
	END
;

EAsynchronousSettings:
	'asynchronous_settings:'
	BEGIN
	(
		('async:' async=ENumberPassed)? &
		('poll:' poll=ENumberPassed)?
	)
	END
;

ENotifiable:
	ENotifiedHandler | ENotifiedTopic
;

ENotifiedHandler:
	name=[EHandler|STRING]
;

ENotifiedTopic:
	'topic:' name=STRING
;

EJinjaOrString:
	EJinjaExpressionEvaluation | EJinjaStatement | string = STRING 
;

EJinjaAndString:
 	(jinja_expression_and_string+=EJinjaOrString)+ 
;

EMultiLineExpression:
	new_line_command=('>' | '|')
	BEGIN
		('line_of_string:' expressions+=EJinjaAndString)+
	END
;

EJinjaOrStringWithoutQuotes:
	 EJinjaExpressionEvaluation | EJinjaStatement | stringWithoutQuotes = ID 
;

EJinjaAndStringWithoutQuotes:
	(jinja_expression_and_stringWithout+=EJinjaOrStringWithoutQuotes)+
;

EStringWithoutQuotesPassed:
	EJinjaAndStringWithoutQuotes | EMultiLineExpression
;

EValueWithString:
	=> EStringPassed | EStringWithoutQuotesPassed 
;

//EValueWithString:
//	EStringPassed  
//;

EStringPassed:
	EJinjaAndString | EMultiLineExpression
;

EValuePassed:
	EValueWithString | EValueWithoutString 
;

EValuePassedToJinjaExpression:
	EValueJinja | ESpecialVariable | EVariableReference | EFunctionCallOrVariable
;

EComposedValue:
	EDictionary | EList
;

EComposedValueJinja:
	EDictionaryJinja | EListJinja
;

EValueJinja:
	EComposedValueJinja | ESimpleValueJinja
;

EValueWithoutString:
	EComposedValue | ESimpleValueWithoutString
;

ESimpleValueWithoutString:
	simple_value_boolean=EBooleanAnsible | simple_value=NULL | simple_value_number=ENumber | simple_value=NONE
;
ESimpleValueJinja:
	simple_value_string=STRING | simple_value=BOOLEAN | simple_value=NULL | simple_value_number=ENumber | simple_value=NONE
;

EJinjaExpressionEvaluation:
	'{{' jinja_expression=EJinjaExpressionEvaluationWithoutBrackets '}}'
;

EJinjaExpressionEvaluationWithoutBrackets:
	expression_to_evaluate=EFilteredExpression (if_chain+=EIfBlock)*
;

EFunctionCallOrVariable:
	name=ID ('(' parameters+=EFunctionInput (',' parameters+=EFunctionInput)* ')' | empty_brackets='()')?
;

EFunctionInput:
	(parameter_name=ID '=')? value=EJinjaExpressionEvaluationWithoutBrackets
;

EIfBlock:
	'if' if_condition=EFilteredExpression ('else' else_expression=EFilteredExpression)? 
;

EFilteredExpression:
	to_filter=EOrExpression ('|' filter=EFilteredExpression)?
;

EOrExpression:
	left_or=EAndExpression ('or' right_or=EOrExpression)?
;

EAndExpression:
	left_and=ETruthExpression ('and' right_and=EAndExpression)?
;

ETruthExpression:
	left_value=EOperation (equality_sign=('==' | '!=' | '<' | '>' | '<=' | '>=') right_value=ETruthExpression)?
;

EOperation:
	left_operand=EIsExpression (operator=('+' | '-' | '/' | '//' | '%' | '*' | '**') right_operand=EOperation)?
;

EIsExpression:
	(not='not')? parenthesised_expression=EParenthesisedExpression ('is' status=EIsExpression | (not_in='not')? 'in' container_expression=EIsExpression)?
;

EParenthesisedExpression:
	(basic_value=EValuePassedToJinjaExpression | '(' parenthesised_term=EJinjaExpressionEvaluationWithoutBrackets ')') (square_bracket_elements+=ESquareBracketElement)* ('.' tail+=ETailElement)*
;

EJinjaStatement:
	EIfStatement | EForStatement
;

EIfStatement:
	'{%' (if_block_sign=('+' | '-'))? 'if' if_condition=EFilteredExpression '%}'
	if_body=EValuePassed
	(elif_blocks+=EElifBlock)*
	('{%' (else_block_sign=('+' | '-'))? 'else' '%}' else_body=EValuePassed)?
	'{%' (endif_block_sign=('+' | '-'))? 'endif' '%}'
;

EElifBlock:
	'{%' (elif_block_sign=('+' | '-'))? 'elif' elif_condition=EFilteredExpression '%}' elif_body=EValuePassed
;

EForStatement:
	'{%' (for_block_sign=('+' | '-'))? 'for' identifiers+=ID (',' identifiers+=ID)* 'in' list=EFilteredExpression ('if' condition=EFilteredExpression)? (recursive=ID)? '%}'
	for_body=EValuePassed
	('{%' (else_block_sign=('+' | '-'))? 'else' '%}' else_body=EValuePassed)?
	'{%' (endfor_block_sign=('+' | '-'))? 'endfor' '%}'
;

EVariableDeclarationVariableReference:
	'declared_variable:' variable_declaration_variable_reference=[EVariableDeclaration|ID]
;

ERegisterVariableReference:
	'registered_variable:' register_variable_reference=[ERegisterVariable|ID]
;

EVariableDeclaration:
	name=ID ':' value_passed=EValuePassed
;

EIndexOrLoopVariable:
	name=ID
;

EIndexOrLoopVariableReference:
	'index_or_loop_var:' index_or_loop_variable_reference=[EIndexOrLoopVariable|ID]
;

ERegisterVariable:
	'register:' name=ID
;

EInputOperationVariableReference:
	reference = (LocalEInputOperationVariableReference | KBEInputOperationVariableReference)
;

LocalEInputOperationVariableReference:
	'operation_input:' name= [rm::EParameterDefinition|STRING]
;

KBEInputOperationVariableReference:
	'operation_input:' name= ID
;

EInputInterfaceVariableReference:
	reference = (LocalEInputInterfaceVariableReference | KBEInputInterfaceVariableReference)
;

LocalEInputInterfaceVariableReference:
	'interface_input:' name=[rm::EPropertyDefinition|STRING]
;

KBEInputInterfaceVariableReference:
	'interface_input:' name=ID
;

ESetFactVariableReference:
	'fact_set:' name=[EParameter]
;

EVariableReference:
	EVariableDeclarationVariableReference | ERegisterVariableReference | EInputOperationVariableReference | EInputInterfaceVariableReference | EIndexOrLoopVariableReference | ESetFactVariableReference
;

ESpecialVariable: //https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html
	{ESpecialVariable}
	'special_variable:' name=ID
;

ETailElement:
	(function_call=EFunctionCallOrVariable) (square_bracket_elements+=ESquareBracketElement)*
;

ESquareBracketElement:
	'[' (expression=EJinjaExpressionEvaluationWithoutBrackets | slice_notation=ESliceNotation) ']'
;

//https://stackoverflow.com/questions/509211/understanding-slice-notation
ESliceNotation:
	(start=ENumber)? colon=':' (stop=ENumber)? | (start=ENumber)? first_colon=':' (step=ENumber)? second_colon=':' (stop=ENumber)?
;

EDictionary:
	EDictionaryInLine | EDictionaryIndented
;

EDictionaryInLine:
	'{' dictionary_pairs+=EDictionaryPair (',' dictionary_pairs+=EDictionaryPair)* '_}'
;

EDictionaryIndented:
	BEGIN
		(dictionary_pairs+=EDictionaryPair)+
	END	
;

EDictionaryPair:
	name=ID  ':' value=EValuePassed
;

EDictionaryJinja:
	{EDictionaryJinja}
	'{' (dictionary_pairs+=EDictionaryPairJinja (',' dictionary_pairs+=EDictionaryPairJinja)*)? '}'
;

EDictionaryPairJinja:
	(name=ID | name=STRING) ':' value=EJinjaExpressionEvaluationWithoutBrackets
;

ECollectionListPassed:
	EJinjaExpressionEvaluation | EJinjaStatement | ECollectionList
;

ECollectionList:
	ECollectionListInLine | ECollectionListIndented
;

ECollectionListInLine:
	'[' elements+=ECollectionFQN (',' elements+=ECollectionFQN)* ']'
;
//FQN = Fully Qualified Name
ECollectionFQN:
	 namespaceOrFqn = EStringWithoutQuotesPassed ('.' collectionName = EStringWithoutQuotesPassed)?
;


ECollectionListIndented:
	BEGIN
		( '-' elements+=ECollectionFQN)+
	END
;

EList:
	EListInLine | EListIndented
;

EListInLine:
	'[' elements+=EValuePassed (',' elements+=EValuePassed)* ']'
;

EListIndented:
	BEGIN
		( '-' elements+=EElementOfListIndented)+
	END
;

EDictionaryOfListIndented:
	(dictionary_pairs+=EDictionaryPair)+
;

EElementOfListIndented:
	EStringPassed | ESimpleValueWithoutString | EDictionaryInLine | EDictionaryOfListIndented | EList
;

EListJinja:
	{EListJinja}
	'[' (elements+=EJinjaExpressionEvaluationWithoutBrackets (',' elements+=EJinjaExpressionEvaluationWithoutBrackets)*)? ']'
;

ECondition:
	EJinjaExpressionEvaluationWithoutBrackets | EListOfConditions
;

EListOfConditions:
	BEGIN
		('when_condition:' conditions+=EJinjaExpressionEvaluationWithoutBrackets)+
	END
;

EDictionaryPassed:
	EJinjaExpressionEvaluation | EJinjaStatement | EDictionary
;

EListPassed:
	EJinjaExpressionEvaluation | EJinjaStatement | EList
;

ENumberPassed:
	EJinjaExpressionEvaluation | EJinjaStatement | number_passed=ENumber | number_passed_null=NULL 
;

EBooleanPassed:
	EJinjaExpressionEvaluation | EJinjaStatement | boolean_passed=EBooleanAnsible | boolean_passed_null=NULL
;

EBooleanAnsible:
	boolean_ansible=BOOLEAN | boolean_ansible=BOOLEAN_ONLY_ANSIBLE
;

ENumber:
	number=OCTAL_NUMBER | number=HEXADECIMAL_NUMBER | number=SIMPLE_NUMBER | number=EXPONENTIAL_NUMBER | number = INTEGER
;

QUALIFIED_NAME: 
	ID ('.' ID)+;

terminal BOOLEAN:
	'True' |'False' | 'true' | 'false'
;

//boolean accepted in Ansible but not in jinja
terminal BOOLEAN_ONLY_ANSIBLE:
	'yes' | 'no'
;

terminal NULL:
	'null'
;

terminal NONE:
	'None'
;

terminal OCTAL_NUMBER:
	('0o'|'0')(('1'..'7')('0'..'7')* | '0')
;

terminal HEXADECIMAL_NUMBER:
	'0x'(('1'..'9' | 'a'..'f' | 'A'..'F') ('0'..'9' | 'a'..'f' | 'A'..'F')* | '0')
;


terminal SIMPLE_NUMBER:
	('+'|'-')?(('1'..'9')('0'..'9')* | '0') ('.'('0'..'9')+)?
;

terminal EXPONENTIAL_NUMBER:
	SIMPLE_NUMBER('e'|'E')SIMPLE_NUMBER
;

terminal INTEGER:
	INT
;


@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_' | '0'..'9') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;

//Positional blocks delimited with indentation
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';












