/*
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.common.util.URI
import org.sodalite.dsl.rM.ENodeType
import org.sodalite.dsl.rM.EPropertyDefinition
import org.sodalite.dsl.rM.EAttributeDefinition
import org.sodalite.dsl.rM.ERequirementDefinition
import org.sodalite.dsl.rM.ECapabilityDefinition
import java.util.Map
import java.util.HashMap
import org.sodalite.dsl.rM.EInterfaceDefinition
import org.sodalite.dsl.rM.EValueExpression
import org.sodalite.dsl.rM.ESTRING
import org.eclipse.emf.ecore.util.EObjectContainmentEList
import org.sodalite.dsl.rM.EValidSourceType
import org.sodalite.dsl.rM.EOperationDefinition
import org.sodalite.dsl.rM.EParameterDefinition
import org.sodalite.dsl.rM.EFunction
import org.sodalite.dsl.rM.GetProperty
import org.sodalite.dsl.rM.GetAttribute
import org.sodalite.dsl.rM.EDataType
import org.sodalite.dsl.rM.EConstraint
import org.sodalite.dsl.rM.EValid_Values
import org.sodalite.dsl.rM.EMinLength
import java.nio.file.Files
import java.nio.file.Paths
import org.sodalite.dsl.rM.EGreaterThan
import org.sodalite.dsl.rM.EEqual
import org.sodalite.dsl.rM.EGreaterOrEqual
import org.sodalite.dsl.rM.ELessThan
import org.sodalite.dsl.rM.ELessOrEqual
import org.sodalite.dsl.rM.ELength
import org.sodalite.dsl.rM.EMaxLength
import org.sodalite.dsl.rM.ECapabilityType
import org.sodalite.dsl.rM.ERelationshipType
import org.sodalite.dsl.rM.EValidTargetTypes

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RMGenerator extends AbstractGenerator {
	var int data_type_counter = 1
	var int node_counter = 1
	var int property_counter = 1
	var int attribute_counter = 1
	var int requirement_counter = 1
	var int capability_counter = 1
	var int capabilitytype_counter = 1
	var int relationship_counter = 1
	var int parameter_counter = 1
	var int interface_counter = 1
	var Map<EPropertyDefinition, Integer> property_numbers
	var Map<EAttributeDefinition, Integer> attribute_numbers
	var Map<ERequirementDefinition, Integer> requirement_numbers
	var Map<ECapabilityDefinition, Integer> capability_numbers
	var Map<EInterfaceDefinition, Integer> interface_numbers
	var Map<Object, Map<String,Integer>> parameter_numbers
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		data_type_counter = 1
		node_counter = 1
		property_counter = 1
		attribute_counter = 1
		requirement_counter = 1
		capability_counter = 1
		capabilitytype_counter = 1
		relationship_counter = 1
		parameter_counter = 1
		interface_counter = 1
		property_numbers = new HashMap<EPropertyDefinition, Integer>()
		attribute_numbers = new HashMap<EAttributeDefinition, Integer>()
		requirement_numbers = new HashMap<ERequirementDefinition, Integer>()
		capability_numbers = new HashMap<ECapabilityDefinition, Integer>()
		parameter_numbers = new HashMap<Object, Map<String, Integer>>()
		interface_numbers = new HashMap<EInterfaceDefinition, Integer>()
		
		val filename = getFilename(resource.URI)
		fsa.generateFile(filename,  compileRM (resource))
	}
	
	
	def compileRM(Resource r) '''
	# baseURI: https://www.sodalite.eu/ontologies/exchange/rm/
	# imports: https://www.sodalite.eu/ontologies/exchange/
	
	@prefix : <https://www.sodalite.eu/ontologies/exchange/rm/> .
	@prefix exchange: <https://www.sodalite.eu/ontologies/exchange/> .
	@prefix owl: <http://www.w3.org/2002/07/owl#> .
	@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
	@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
	@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
	
	:
	  rdf:type owl:Ontology ;
	  owl:imports exchange: ;
	  owl:versionInfo "Created by the SODALITE IDE" ;
	.
	
	:RM_1
	  rdf:type exchange:RM ;
	  exchange:userId "27827d44-0f6c-11ea-8d71-362b9e155667" ;
	.

	«FOR c:r.allContents.toIterable.filter(EConstraint)»
	«c.compile»
	«ENDFOR»
		
	«FOR p:r.allContents.toIterable.filter(GetProperty)»
	«p.compile»
	«ENDFOR»
	
	«FOR a:r.allContents.toIterable.filter(GetAttribute)»
	«a.compile»
	«ENDFOR»
	
	«FOR p:r.allContents.toIterable.filter(EParameterDefinition)»
	«p.compile»
	«ENDFOR»

	«FOR o:r.allContents.toIterable.filter(EOperationDefinition)»
	«o.compile»
	«ENDFOR»

 	«FOR p:r.allContents.toIterable.filter(EPropertyDefinition)»
	«p.compile»
	«ENDFOR»
	
 	«FOR p:r.allContents.toIterable.filter(EAttributeDefinition)»
	«p.compile»
	«ENDFOR»
	
 	«FOR i:r.allContents.toIterable.filter(EInterfaceDefinition)»
	«i.compile»
	«ENDFOR»
	
	«FOR cap:r.allContents.toIterable.filter(ECapabilityDefinition)»
	«cap.compile»
	«ENDFOR»
	
	«FOR req:r.allContents.toIterable.filter(ERequirementDefinition)»
	«req.compile»
	«ENDFOR»
	
	«FOR n:r.allContents.toIterable.filter(ENodeType)»
	«n.compile»
	«ENDFOR»
	
	«FOR d:r.allContents.toIterable.filter(EDataType)»
	«d.compile»
	«ENDFOR»
	
	«FOR c:r.allContents.toIterable.filter(ECapabilityType)»
	«c.compile»
	«ENDFOR»
	
	«FOR rt:r.allContents.toIterable.filter(ERelationshipType)»
	«rt.compile»
	«ENDFOR»
	'''
	
	def compile (EConstraint c) '''
	«IF c instanceof EValid_Values»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "valid_values" ;
	  «FOR v:(c.^val.list)»
	  exchange:listValue "«v»" ;
	  «ENDFOR»
	.		
	«ENDIF»
	«IF c instanceof EMinLength»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "min_length" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof EGreaterThan»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "greater_than" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof EEqual»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "equal" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof EGreaterOrEqual»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "greater_or_equal" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof ELessThan»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "less_than" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof ELessOrEqual»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "less_or_equal" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof ELength»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "length" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	«IF c instanceof EMaxLength»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "max_length" ;
	  exchange:value "«c.^val»" ;
	.		
	«ENDIF»
	'''
	
	def compile (ERequirementDefinition r) '''
	«IF r.requirement.capability !== null»
	«putParameterNumber(r, "capability", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "capability" ;
	  exchange:value '«r.requirement.capability.name»' ;
	.
	«ENDIF»
	
	«IF r.requirement.node !== null»
	«putParameterNumber(r, "node", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "node" ;
	  exchange:value '«r.requirement.node.name»' ;
	.
	«ENDIF»
	
	«IF r.requirement.relationship !== null»
	«putParameterNumber(r, "relationship", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "relationship" ;	  
	  exchange:value '«r.requirement.relationship.name»' ;
	.
	«ENDIF»
	
	«requirement_numbers.put(r, requirement_counter)»
	:Requirement_«requirement_counter++»
	  rdf:type exchange:Requirement ;
	  exchange:name "«r.name»" ;
	  «IF r.requirement.capability !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "capability")» ;
	  «ENDIF»
	  «IF r.requirement.node !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "node")» ;
	  «ENDIF»
	  «IF r.requirement.relationship !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "relationship")» ;
	  «ENDIF»
	.		
	'''
	
	def compile (ECapabilityDefinition c) '''
	«IF c.capability.type !== null»
	«putParameterNumber(c, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«c.capability.type.name»' ;
	.
	«ENDIF»
	
	«IF c.capability.valid_source_types !== null»
	«putParameterNumber(c, "valid_source_types", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "valid_source_types" ;
	  «FOR entry:(c.capability.valid_source_types as EObjectContainmentEList<EValidSourceType>)»
	  «FOR s:(entry.sourceTypes)»
	  exchange:listValue "«s.name.name»" ;
	  «ENDFOR»
	  «ENDFOR»
	.
	«ENDIF»
		
	«capability_numbers.put(c, capability_counter)»
	:Capability_«capability_counter++»
	  rdf:type exchange:Capability ;
	  exchange:name "«c.name»" ;
	  «IF c.capability.description !== null»
	  exchange:description '«processDescription(c.capability.description)»' ;
	  «ENDIF»
	  «IF c.capability.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(c, "type")» ;
	  «ENDIF»
	  «IF c.capability.valid_source_types !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(c, "valid_source_types")» ;
	  «ENDIF»
	.
	'''
	
	def compile(EInterfaceDefinition i) '''
	«IF i.interface.type !== null»
	«putParameterNumber(i, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«i.interface.type.name»' ;
	.
	«ENDIF»
	
	«IF i.interface.operations !== null»
	«putParameterNumber(i, "operations", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "operations" ;
	  «FOR op:(i.interface.operations.operations)»
	  exchange:hasParameter :Parameter_«getParameterNumber(op, "name")» ;
	  «ENDFOR»	  
	.
	«ENDIF»	
	
	«interface_numbers.put(i, interface_counter)»
	:Interface_«interface_counter++»
	  rdf:type exchange:Interface ;
	  exchange:name "«i.name»" ;
	  «IF i.interface.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "type")» ;
	  «ENDIF»
	  «IF i.interface.operations !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "operations")» ;
	  «ENDIF»
	.
	'''
	
	def compile(EOperationDefinition o) '''
	«IF o.operation.inputs !== null»
	«putParameterNumber(o, "inputs", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "inputs" ;
	  «FOR in:(o.operation.inputs.inputs)»
	  exchange:hasParameter :Parameter_«getParameterNumber(in, "name")» ;
	  «ENDFOR»	  
	.
	«ENDIF»		
	
	«IF o.operation.implementation !== null»
	«putParameterNumber(o, "primary.path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "path" ;
	  exchange:value '«o.operation.implementation.primary.file»' ;
	.
	
	«putParameterNumber(o, "primary.content", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "content" ;
	  exchange:value '«readFileAsString(o.operation.implementation.primary.file)»' ;
	.
	
	«IF o.operation.implementation.primary.relative_path !== null»
	«putParameterNumber(o, "primary.relative_path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "relative_path" ;
	  exchange:value '«o.operation.implementation.primary.relative_path»' ;
	.
	«ENDIF»
	
	«putParameterNumber(o, "primary", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "primary" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary.path")» ;
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary.content")» ;
	  «IF o.operation.implementation.primary.relative_path !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary.relative_path")» ;
	  «ENDIF»
	.
	
	«IF (o.operation.implementation.dependencies !== null)»
	«FOR d:o.operation.implementation.dependencies.files.files»
	«putParameterNumber(d, "file.path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "path" ;
	  exchange:value '«d»' ; 
	 .
	
	«putParameterNumber(d, "file.content", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "content" ;
	  exchange:value '«readFileAsString(d)»' ;
	.

	«putParameterNumber(d, "file", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "file" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(d, "file.path")» ;
	  exchange:hasParameter :Parameter_«getParameterNumber(d, "file.content")» ;
	.
	«ENDFOR»
	
	«IF o.operation.implementation.dependencies.relative_path !== null»
	«putParameterNumber(o, "dependencies.relative_path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "relative_path" ;
	  exchange:value '«o.operation.implementation.dependencies.relative_path»' ;
	.
	«ENDIF»
	
	«putParameterNumber(o, "dependencies", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "dependencies" ;
	  «FOR d:o.operation.implementation.dependencies.files.files»
	  exchange:hasParameter :Parameter_«getParameterNumber(d, "file")» ; 
	  «ENDFOR»
	  «IF o.operation.implementation.dependencies.relative_path !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "dependencies.relative_path")» ;
	  «ENDIF»
	.
	«ENDIF»
	
	«putParameterNumber(o, "implementation", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "implementation" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary")» ;
	 «IF o.operation.implementation.dependencies !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "dependencies")» ;
	 «ENDIF»
	.
	«ENDIF»		
	
	«putParameterNumber(o, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«o.name»" ;
	  «IF o.operation.inputs !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "inputs")» ;
	  «ENDIF»
	  «IF o.operation.implementation !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "implementation")» ;
	  «ENDIF»  
	.
	'''
	
	def compile(EParameterDefinition p) '''
	«IF p.parameter.value !== null»
	«putParameterNumber(p, "value", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "value" ;  
	  exchange:hasParameter :Parameter_«getParameterNumber(p.parameter.value, "name")» ;
	.
	«ENDIF»		
	
	«IF p.parameter.^default !== null»
	«putParameterNumber(p, "default", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "default" ;  
	  exchange:hasParameter :Parameter_«getParameterNumber(p.parameter.^default, "name")» ; 
	.
	«ENDIF»	
	
	«putParameterNumber(p, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«p.name»" ;
	  «IF p.parameter.type !== null»
	  exchange:value '«p.parameter.type.name»' ;
	  «ENDIF»
	  «IF p.parameter.value !== null»
	  «IF p.parameter.value instanceof EFunction»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "value")» ;
	  «ELSE»
	  exchange:value '«p.parameter.value.compile»' ;	  
	  «ENDIF»
	  «ENDIF»
	  «IF p.parameter.^default !== null»
	  «IF p.parameter.^default instanceof EFunction»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "default")» ;
	  «ELSE»
	  exchange:value '«p.parameter.^default.compile»' ;	  
	  «ENDIF»	  
	  «ENDIF»  
	.	
	'''

	def compile(GetProperty p) '''
	«IF p.property.property !== null»
	«putParameterNumber(p, "property", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "property" ;  
	  exchange:value '«p.property.property.name»' ; 
	.
	«ENDIF»	
	
	«IF p.property.entity !== null»
	«putParameterNumber(p, "entity", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entity" ;  
	  exchange:value '«p.property.entity»' ; 
	.
	«ENDIF»	
	
	«IF p.property.req_cap !== null»
	«putParameterNumber(p, "req_cap", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "req_cap" ;  
	  exchange:value '«p.property.req_cap.name»' ; 
	.
	«ENDIF»		
	
	«putParameterNumber(p, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "get_property" ;
	  «IF p.property.property !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "property")» ;
	  «ENDIF»	
	  «IF p.property.entity !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "entity")» ;
	  «ENDIF»
	  «IF p.property.req_cap !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "req_cap")» ;
	  «ENDIF»
	.	
	'''
	
	def compile(GetAttribute a) '''
	«IF a.attribute.attribute !== null»
	«putParameterNumber(a, "attribute", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "attribute" ;  
	  exchange:value '«a.attribute.attribute.name»' ; 
	.
	«ENDIF»	
	
	«IF a.attribute.entity !== null»
	«putParameterNumber(a, "entity", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entity" ;  
	  exchange:value '«a.attribute.entity»' ; 
	.
	«ENDIF»	
	
	«IF a.attribute.req_cap !== null»
	«putParameterNumber(a, "req_cap", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "req_cap" ;  
	  exchange:value '«a.attribute.req_cap.name»' ; 
	.
	«ENDIF»		
	
	«putParameterNumber(a, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "get_attribute" ;
	  «IF a.attribute.attribute !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "attribute")» ;
	  «ENDIF»	
	  «IF a.attribute.entity !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "entity")» ;
	  «ENDIF»
	  «IF a.attribute.req_cap !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "req_cap")» ;
	  «ENDIF»
	.	
	'''

	def compile(ECapabilityType c) '''
	:CapabilityType_«capabilitytype_counter++»
	  rdf:type exchange:CapabilityType ;
	  exchange:name "«c.name»" ;
	  exchange:derivesFrom "«c.capability.superType.name»" ;
	«IF c.capability.description !== null»
	exchange:description '«processDescription(c.capability.description)»' ;
	«ENDIF»
	«IF c.capability.properties !== null»
	«FOR p:c.capability.properties.properties»
	exchange:properties :Property_«property_numbers.get(p)» ; 
	«ENDFOR»
	«ENDIF»
	«IF c.capability.atributes !== null»
	«FOR a:c.capability.atributes.attributes»
	exchange:attributes :Attribute_«attribute_numbers.get(a)» ; 
	«ENDFOR»
	«ENDIF»
	.
	'''
	
	def compile(ERelationshipType r) '''
	
	«IF r.relationship.valid_target_types !== null»
	«putParameterNumber(r, "valid_target_types", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "valid_target_types" ;
	  «FOR entry:(r.relationship.valid_target_types as EObjectContainmentEList<EValidTargetTypes>)»
	  «FOR s:(entry.targetTypes)»
	  exchange:listValue "«s.name.name»" ;
	  «ENDFOR»
	  «ENDFOR»
	.
	«ENDIF»
	
	:RelationshipType_«relationship_counter++»
	  rdf:type exchange:RelationshipType ;
	  exchange:name "«r.name»" ;
	  exchange:derivesFrom "«r.relationship.superType.name»" ;
	  «IF r.relationship.description !== null»
	  exchange:description '«processDescription(r.relationship.description)»' ;
	  «ENDIF»
	  «IF r.relationship.properties !== null»
	  «FOR p:r.relationship.properties.properties»
	  exchange:properties :Property_«property_numbers.get(p)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF r.relationship.atributes !== null»
	  «FOR a:r.relationship.atributes.attributes»
	  exchange:attributes :Attribute_«attribute_numbers.get(a)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF r.relationship.interfaces !== null»
	  «FOR i:r.relationship.interfaces.interfaces»
	  exchange:interfaces :Interface_«interface_numbers.get(i)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF r.relationship.valid_target_types !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "valid_target_types")» ;
	  «ENDIF»
	.
	'''

	def compile(ENodeType n) '''
	:NodeType_«node_counter++»
	  rdf:type exchange:NodeType ;
	  «IF n.node.description !== null»
	  exchange:description '«processDescription(n.node.description)»' ;
	  «ENDIF»
	  exchange:name "«n.name»" ;
	  exchange:derivesFrom "«n.node.superType.name»" ;
	  «IF n.node.properties !== null»
	  «FOR p:n.node.properties.properties»
	  exchange:properties :Property_«property_numbers.get(p)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.attributes !== null»
	  «FOR a:n.node.attributes.attributes»
	  exchange:attributes :Attribute_«attribute_numbers.get(a)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.requirements !== null»
	  «FOR r:n.node.requirements.requirements»
	  exchange:requirements :Requirement_«requirement_numbers.get(r)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.capabilities !== null»
	  «FOR c:n.node.capabilities.capabilities»
	  exchange:capabilities :Capability_«capability_numbers.get(c)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.interfaces !== null»
	  «FOR i:n.node.interfaces.interfaces»
	  exchange:interfaces :Interface_«interface_numbers.get(i)» ; 
	  «ENDFOR»
	  «ENDIF»
	.  
	'''
	
	def compile(EDataType d) '''
	:DataType_«data_type_counter++»
	  rdf:type exchange:DataType ;
	  exchange:name "«d.name»" ;
	  «IF d.data.superType !== null»
	  exchange:derivesFrom "«d.data.superType.name»" ;
	  «ENDIF»
	  «IF d.data.description !== null»
	  exchange:description '«processDescription(d.data.description)»' ;
	  «ENDIF»
	  «IF d.data.properties !== null»
	  «FOR p:d.data.properties.properties»
	  exchange:properties :Property_«property_numbers.get(p)» ; 
	  «ENDFOR»
	  «ENDIF»
	.  
	'''
	
	def compile (EPropertyDefinition p) '''
	«IF p.property.type !== null»
	«putParameterNumber(p, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«p.property.type.name»' ;
	.
	«ENDIF»
	
	«putParameterNumber(p, "required", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "required" ;
	  exchange:value '«p.property.required»' ;
	.
	
	«IF p.property.^default !== null»
	«putParameterNumber(p, "default", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "default" ;
	  «IF p.property.^default !== null»
	  «IF p.property.^default instanceof EFunction»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "default")» ;
	  «ELSE»
	  exchange:value '«p.property.^default.compile»' ;	  
	  «ENDIF»	  
	  «ENDIF» 
	.
	«ENDIF»
	
	«IF p.property.status !== null»
	«putParameterNumber(p, "status", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "status" ;
	  exchange:value '«p.property.status»' ; 
	.
	«ENDIF»
	
	««« Temporary patch for injecting type in entry_schema serialization FIX IT
	«IF p.property.entry_schema !== null»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«p.property.entry_schema.name»' ;
	.
	
	«putParameterNumber(p, "entry_schema", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entry_schema" ;
	  exchange:hasParameter :Parameter_«parameter_counter-2»
	.
	«ENDIF»
	
	«IF p.property.constraints !== null»
	«putParameterNumber(p, "constraints", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "constraints" ;
	  «FOR c:(p.property.constraints.constraints)»
	  exchange:hasParameter :Parameter_«getParameterNumber(c, "name")» ;
	  «ENDFOR»	
	.
	«ENDIF»
	
	
	«property_numbers.put(p, property_counter)»
	:Property_«property_counter++»
	  rdf:type exchange:Property ;
	  exchange:name "«p.name»" ;
	  «IF p.property.description !== null»
	  exchange:description '«processDescription(p.property.description)»' ;
	  «ENDIF»
	  «IF p.property.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "type")» ;
	  «ENDIF»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "required")» ;
	  «IF p.property.^default !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "default")» ;
	  «ENDIF»
	  «IF p.property.status !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "status")» ;
	  «ENDIF»
	  «IF p.property.entry_schema !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "entry_schema")» ;
	  «ENDIF»
	  «IF p.property.constraints !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "constraints")» ;
	  «ENDIF»
	.
	'''
	
	def compile (EAttributeDefinition a) '''
	«IF a.attribute.type !== null»
	«putParameterNumber(a, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«a.attribute.type.name»' ;
	.
	«ENDIF»
	
	«IF a.attribute.^default !== null»
	«putParameterNumber(a, "default", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "default" ;
	  «IF a.attribute.^default !== null»
	  «IF a.attribute.^default instanceof EFunction»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "default")» ;
	  «ELSE»
	  exchange:value '«a.attribute.^default.compile»' ;	  
	  «ENDIF»	  
	  «ENDIF» 
	.
	«ENDIF»
		
	«IF a.attribute.status !== null»
	«putParameterNumber(a, "status", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "status" ;
	  exchange:value '«a.attribute.status»' ; 
	.
	«ENDIF»
	
	«IF a.attribute.entry_schema !== null»
	«putParameterNumber(a, "entry_schema", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entry_schema" ;
	  exchange:value '«a.attribute.entry_schema.name»' ;
	.
	«ENDIF»
	
	«attribute_numbers.put(a, attribute_counter)»
	:Attribute_«attribute_counter++»
	  rdf:type exchange:Attribute ;
	  exchange:name "«a.name»" ;
	  «IF a.attribute.description !== null»
	  exchange:description '«processDescription(a.attribute.description)»' ;
	  «ENDIF»
	  «IF a.attribute.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "type")» ;
	  «ENDIF»
	  «IF a.attribute.^default !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "default")» ;
  	  «ENDIF»
  	  «IF a.attribute.status !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "status")» ;
  	  «ENDIF»
	  «IF a.attribute.entry_schema !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "entry_schema")» ;
	  «ENDIF»
	.
	'''
	
	def compile (EValueExpression ve) '''«(ve as ESTRING).string»'''
	
	def void putParameterNumber (Object entity, String parameterName, Integer number){
		if (parameter_numbers.get(entity) === null){
			parameter_numbers.put(entity, new HashMap<String, Integer>())
		}
		parameter_numbers.get(entity).put(parameterName, number)
	}
	
	def Integer getParameterNumber (Object entity, String parameterName){
		if (parameter_numbers.get(entity) === null)
			return null;
		return parameter_numbers.get(entity).get(parameterName)
	}
	
	def getFilename(URI uri) {
		var filename = uri.toString
		filename = filename.substring(filename.lastIndexOf('/')+1).concat('.ttl')
		return filename 
	}
		
	def String getName(Resource resource){
		return resource.URI.lastSegment.substring(0, resource.URI.lastSegment.lastIndexOf('.'))
	}
	
	def readFileAsString(String path){
		var String content = new String(Files.readAllBytes(Paths.get(path)));
		return content.replace("\\", "\\\\").replace("\'", "\\'").replaceAll("[\\n\\r]+","\\\\n")
	}
	
	def processDescription (String description){
		return description.replaceAll("'", "\\\\'").replaceAll("[\\n\\r]+","\\\\n")
	}
}
