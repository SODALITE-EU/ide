/*
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.common.util.URI
import org.sodalite.dsl.rM.ENodeType
import org.sodalite.dsl.rM.EPropertyDefinition
import org.sodalite.dsl.rM.EAttributeDefinition
import org.sodalite.dsl.rM.ERequirementDefinition
import org.sodalite.dsl.rM.ECapabilityDefinition
import java.util.Map
import java.util.HashMap
import org.sodalite.dsl.rM.EInterfaceDefinition
import org.sodalite.dsl.rM.EValueExpression
import org.sodalite.dsl.rM.ESTRING
import org.eclipse.emf.ecore.util.EObjectContainmentEList
import org.sodalite.dsl.rM.EValidSourceType
import org.sodalite.dsl.rM.EOperationDefinition
import org.sodalite.dsl.rM.EParameterDefinition
import org.sodalite.dsl.rM.EFunction
import org.sodalite.dsl.rM.GetProperty
import org.sodalite.dsl.rM.GetAttribute
import org.sodalite.dsl.rM.EDataType
import org.sodalite.dsl.rM.EConstraint
import org.sodalite.dsl.rM.EValid_Values
import org.sodalite.dsl.rM.EMinLength
import java.nio.file.Files
import java.nio.file.Paths
import org.sodalite.dsl.rM.EGreaterThan
import org.sodalite.dsl.rM.EEqual
import org.sodalite.dsl.rM.EGreaterOrEqual
import org.sodalite.dsl.rM.ELessThan
import org.sodalite.dsl.rM.ELessOrEqual
import org.sodalite.dsl.rM.ELength
import org.sodalite.dsl.rM.EMaxLength
import org.sodalite.dsl.rM.ECapabilityType
import org.sodalite.dsl.rM.ERelationshipType
import java.io.File
import org.sodalite.dsl.rM.ESingleValue
import org.sodalite.dsl.rM.EAlphaNumericValue
import org.sodalite.dsl.rM.EFLOAT
import org.sodalite.dsl.rM.ESIGNEDINT
import org.sodalite.dsl.rM.EBOOLEAN
import org.sodalite.dsl.rM.EPRIMITIVE_TYPE
import org.sodalite.dsl.rM.EPREFIX_TYPE
import org.sodalite.dsl.rM.EDataTypeName
import org.sodalite.dsl.rM.EEntityReference
import org.sodalite.dsl.rM.EEntity
import org.sodalite.dsl.rM.EPREFIX_ID
import org.sodalite.dsl.rM.EPolicyType
import org.sodalite.dsl.rM.ETriggerDefinition
import org.sodalite.dsl.rM.EEvenFilter
import org.sodalite.dsl.rM.EConditionClauseDefinition
import org.sodalite.dsl.rM.EActivityDefinition
import org.sodalite.dsl.rM.ECallOperationActivityDefinition
import org.sodalite.dsl.rM.EPropertyAssignment
import org.sodalite.dsl.rM.ELIST
import org.sodalite.dsl.rM.EMAP
import org.sodalite.dsl.rM.GetInput
import org.sodalite.dsl.rM.EConditionClauseDefinitionNOT
import org.sodalite.dsl.rM.EConditionClauseDefinitionAND
import org.sodalite.dsl.rM.EConditionClauseDefinitionOR
import org.sodalite.dsl.rM.EConditionClauseDefinitionAssert
import org.sodalite.dsl.rM.EAssertionDefinition
import org.sodalite.dsl.rM.ETargetType
import org.sodalite.dsl.rM.EPREFIX_REF
import org.sodalite.dsl.rM.EExtendedTriggerCondition
import org.sodalite.dsl.rM.EInterfaceType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RMGenerator extends AbstractGenerator {
	var int data_type_counter = 1
	var int node_counter = 1
	var int property_counter = 1
	var int attribute_counter = 1
	var int requirement_counter = 1
	var int capability_counter = 1
	var int capabilitytype_counter = 1
	var int relationship_counter = 1
	var int parameter_counter = 1
	var int interface_counter = 1
	var int interface_type_counter = 1
	var int policy_counter = 1
	var int trigger_counter = 1
	var int operation_counter = 1
	var Map<EPropertyDefinition, Integer> property_numbers
	var Map<EAttributeDefinition, Integer> attribute_numbers
	var Map<ERequirementDefinition, Integer> requirement_numbers
	var Map<ECapabilityDefinition, Integer> capability_numbers
	var Map<EInterfaceDefinition, Integer> interface_numbers
	var Map<Object, Map<String,Integer>> parameter_numbers
	var Map<ETriggerDefinition, Integer> trigger_numbers
	var Map<EOperationDefinition, Integer> operation_numbers
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		data_type_counter = 1
		node_counter = 1
		property_counter = 1
		attribute_counter = 1
		requirement_counter = 1
		capability_counter = 1
		capabilitytype_counter = 1
		relationship_counter = 1
		parameter_counter = 1
		interface_counter = 1
		interface_type_counter = 1
		policy_counter = 1
		trigger_counter = 1
		operation_counter = 1
		property_numbers = new HashMap<EPropertyDefinition, Integer>()
		attribute_numbers = new HashMap<EAttributeDefinition, Integer>()
		requirement_numbers = new HashMap<ERequirementDefinition, Integer>()
		capability_numbers = new HashMap<ECapabilityDefinition, Integer>()
		parameter_numbers = new HashMap<Object, Map<String, Integer>>()
		interface_numbers = new HashMap<EInterfaceDefinition, Integer>()
		trigger_numbers = new HashMap<ETriggerDefinition, Integer>()
		operation_numbers = new HashMap<EOperationDefinition, Integer>()
		
		val filename = getFilename(resource.URI)
		fsa.generateFile(filename,  compileRM (resource))
	}
	
	
	def compileRM(Resource r) '''
	# baseURI: https://www.sodalite.eu/ontologies/exchange/rm/
	# imports: https://www.sodalite.eu/ontologies/exchange/
	
	@prefix : <https://www.sodalite.eu/ontologies/exchange/rm/> .
	@prefix exchange: <https://www.sodalite.eu/ontologies/exchange/> .
	@prefix owl: <http://www.w3.org/2002/07/owl#> .
	@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
	@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
	@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
	
	:
	  rdf:type owl:Ontology ;
	  owl:imports exchange: ;
	  owl:versionInfo "Created by the SODALITE IDE" ;
	.
	
	:RM_1
	  rdf:type exchange:RM ;
	  exchange:userId "27827d44-0f6c-11ea-8d71-362b9e155667" ;
	.

	«FOR c:r.allContents.toIterable.filter(EConstraint)»
	«c.compile»
	«ENDFOR»
	
	«FOR p:r.allContents.toIterable.filter(GetProperty)»
	«p.compile»
	«ENDFOR»
	
	«FOR a:r.allContents.toIterable.filter(GetAttribute)»
	«a.compile»
	«ENDFOR»
	
	«FOR i:r.allContents.toIterable.filter(GetInput)»
	«i.compile»
	«ENDFOR»
	
	«FOR p:r.allContents.toIterable.filter(EParameterDefinition)»
	«p.compile»
	«ENDFOR»

	«FOR o:r.allContents.toIterable.filter(EOperationDefinition)»
	«o.compile»
	«ENDFOR»

 	«FOR p:r.allContents.toIterable.filter(EPropertyDefinition)»
	«p.compile»
	«ENDFOR»
	
 	«FOR p:r.allContents.toIterable.filter(EPropertyAssignment)»
	«p.compile»
	«ENDFOR»
	
	«FOR t:r.allContents.toIterable.filter(ETriggerDefinition)»
	«t.compile»
	«ENDFOR»
	
 	«FOR p:r.allContents.toIterable.filter(EAttributeDefinition)»
	«p.compile»
	«ENDFOR»
	
 	«FOR i:r.allContents.toIterable.filter(EInterfaceDefinition)»
	«i.compile»
	«ENDFOR»
	
	«FOR cap:r.allContents.toIterable.filter(ECapabilityDefinition)»
	«cap.compile»
	«ENDFOR»
	
	«FOR req:r.allContents.toIterable.filter(ERequirementDefinition)»
	«req.compile»
	«ENDFOR»
	
	«FOR n:r.allContents.toIterable.filter(ENodeType)»
	«n.compile»
	«ENDFOR»
	
	«FOR d:r.allContents.toIterable.filter(EDataType)»
	«d.compile»
	«ENDFOR»
	
	«FOR c:r.allContents.toIterable.filter(ECapabilityType)»
	«c.compile»
	«ENDFOR»
	
	«FOR rt:r.allContents.toIterable.filter(ERelationshipType)»
	«rt.compile»
	«ENDFOR»
	
	«FOR p:r.allContents.toIterable.filter(EPolicyType)»
	«p.compile»
	«ENDFOR»
	
	«FOR i:r.allContents.toIterable.filter(EInterfaceType)»
	«i.compile»
	«ENDFOR»
	'''
	
	def compile (EConstraint c) '''
	«IF c instanceof EValid_Values»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "valid_values" ;
	  «FOR v:(c.^val.list)»
	  exchange:listValue "«trim(v.compile)»" ;
	  «ENDFOR»
	.		
	«ENDIF»
	«IF c instanceof EMinLength»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "min_length" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof EGreaterThan»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "greater_than" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof EEqual»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "equal" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof EGreaterOrEqual»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "greater_or_equal" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof ELessThan»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "less_than" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof ELessOrEqual»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "less_or_equal" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof ELength»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "length" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	«IF c instanceof EMaxLength»
	«putParameterNumber(c, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "max_length" ;
	  exchange:value "«trim(c.^val.compile)»" ;
	.		
	«ENDIF»
	'''
	
	def compile (ERequirementDefinition r) '''
	«IF r.requirement.capability !== null»
	«putParameterNumber(r, "capability", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "capability" ;
	  «IF r.requirement.capability.module !== null»
	  exchange:value '«r.requirement.capability.module»/«r.requirement.capability.type»' ;  
	  «ELSE»
	  exchange:value '«r.requirement.capability.type»' ;  
	  «ENDIF»
	.
	«ENDIF»
	
	«IF r.requirement.node !== null»
	«putParameterNumber(r, "node", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "node" ;
	  «IF r.requirement.node.module !== null»
	  exchange:value '«r.requirement.node.module»/«r.requirement.node.type»' ;  
	  «ELSE»
	  exchange:value '«r.requirement.node.type»' ;  
	  «ENDIF»
	.
	«ENDIF»
	
	«IF r.requirement.relationship !== null»
	«putParameterNumber(r, "relationship", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "relationship" ;	  
	  «IF r.requirement.relationship.module !== null»
	  exchange:value '«r.requirement.relationship.module»/«r.requirement.relationship.type»' ;  
	  «ELSE»
	  exchange:value '«r.requirement.relationship.type»' ;  
	  «ENDIF»
	.
	«ENDIF»
	
	«requirement_numbers.put(r, requirement_counter)»
	:Requirement_«requirement_counter++»
	  rdf:type exchange:Requirement ;
	  exchange:name "«r.name»" ;
	  «IF r.requirement.capability !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "capability")» ;
	  «ENDIF»
	  «IF r.requirement.node !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "node")» ;
	  «ENDIF»
	  «IF r.requirement.relationship !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "relationship")» ;
	  «ENDIF»
	.		
	'''
	
	def compile (ECapabilityDefinition c) '''
	«IF c.capability.type !== null»
	«putParameterNumber(c, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«trim(c.capability.type.compile)»' ;
	.
	«ENDIF»
	
	«IF c.capability.valid_source_types !== null && !c.capability.valid_source_types.empty»
	«putParameterNumber(c, "valid_source_types", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "valid_source_types" ;
	  «FOR entry:(c.capability.valid_source_types as EObjectContainmentEList<EValidSourceType>)»
	  «FOR s:(entry.sourceTypes)»
	  «IF s.module !== null»
	  exchange:listValue "«s.module»/«s.type»" ;
	  «ELSE»
	  exchange:listValue "«s.type»" ;
	  «ENDIF»
	  «ENDFOR»
	  «ENDFOR»
	.
	«ENDIF»
		
	«capability_numbers.put(c, capability_counter)»
	:Capability_«capability_counter++»
	  rdf:type exchange:Capability ;
	  exchange:name "«c.name»" ;
	  «IF c.capability.description !== null»
	  exchange:description '«processDescription(c.capability.description)»' ;
	  «ENDIF»
	  «IF c.capability.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(c, "type")» ;
	  «ENDIF»
	  «IF c.capability.valid_source_types !== null && !c.capability.valid_source_types.empty»
	  exchange:hasParameter :Parameter_«getParameterNumber(c, "valid_source_types")» ;
	  «ENDIF»
	.
	'''
	
	def compile(EInterfaceDefinition i) '''
	
	«IF i.interface.type !== null»
	«putParameterNumber(i, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«trim(i.interface.type.compile)»' ;
	.
	«ENDIF»
	
	«IF i.interface.operations !== null»
	«putParameterNumber(i, "operations", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "operations" ;
	  «FOR op:(i.interface.operations.operations)»
	  exchange:hasParameter :Parameter_«getParameterNumber(op, "name")» ;
	  «ENDFOR»
	.
	«ENDIF»
	
	«IF i.interface.inputs !== null»
	«putParameterNumber(i, "inputs", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "inputs" ;
	  «FOR prop:(i.interface.inputs.properties)»
	  exchange:hasParameter :Parameter_«getParameterNumber(prop, "name")» ;
	  «ENDFOR»
	.
	«ENDIF»
	
	«interface_numbers.put(i, interface_counter)»
	:Interface_«interface_counter++»
	  rdf:type exchange:Interface ;
	  exchange:name "«i.name»" ;
	  «IF i.interface.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "type")» ;
	  «ENDIF»
	  «IF i.interface.inputs !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "inputs")» ;
	  «ENDIF»
	  «IF i.interface.operations !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "operations")» ;
	  «ENDIF»
	.
	'''
	
	def compile(EOperationDefinition o) '''

	«IF o.operation.implementation !== null»
	«putParameterNumber(o, "primary.path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "path" ;
	  exchange:value '«o.operation.implementation.primary.file»' ;
	.
	
	«putParameterNumber(o, "primary.content", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "content" ;
	  exchange:value '«readFileAsString(o.operation.implementation.primary.file)»' ;
	.
	
	«IF o.operation.implementation.primary.relative_path !== null»
	«putParameterNumber(o, "primary.relative_path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "relative_path" ;
	  exchange:value '«o.operation.implementation.primary.relative_path»' ;
	.
	«ENDIF»
	
	«putParameterNumber(o, "primary", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "primary" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary.path")» ;
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary.content")» ;
	  «IF o.operation.implementation.primary.relative_path !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary.relative_path")» ;
	  «ENDIF»
	.
	
	«IF (o.operation.implementation.dependencies !== null)»
	«FOR d:o.operation.implementation.dependencies.files.files»
	«putParameterNumber(d, "file.path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "path" ;
	  exchange:value '«d»' ; 
	 .
	
	«putParameterNumber(d, "file.content", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "content" ;
	  exchange:value '«readFileAsString(d)»' ;
	.

	«putParameterNumber(d, "file", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "file" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(d, "file.path")» ;
	  exchange:hasParameter :Parameter_«getParameterNumber(d, "file.content")» ;
	.
	«ENDFOR»
	
	«IF o.operation.implementation.dependencies.relative_path !== null»
	«putParameterNumber(o, "dependencies.relative_path", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "relative_path" ;
	  exchange:value '«o.operation.implementation.dependencies.relative_path»' ;
	.
	«ENDIF»
	
	«putParameterNumber(o, "dependencies", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "dependencies" ;
	  «FOR d:o.operation.implementation.dependencies.files.files»
	  exchange:hasParameter :Parameter_«getParameterNumber(d, "file")» ; 
	  «ENDFOR»
	  «IF o.operation.implementation.dependencies.relative_path !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "dependencies.relative_path")» ;
	  «ENDIF»
	.
	«ENDIF»
	
	«putParameterNumber(o, "implementation", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "implementation" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "primary")» ;
	 «IF o.operation.implementation.dependencies !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "dependencies")» ;
	 «ENDIF»
	.
	«ENDIF»		
	
	«IF o.operation.inputs !== null»
	«putParameterNumber(o, "inputs", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "inputs" ;
	  «FOR i:o.operation.inputs.inputs»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "name")» ;
  	  «ENDFOR»
	.
	«ENDIF»
	
	«IF o.eContainer.eContainer.eContainer instanceof EInterfaceDefinition»
	«putParameterNumber(o, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	«ELSEIF o.eContainer.eContainer.eContainer instanceof EInterfaceType»
	«operation_numbers.put(o, operation_counter)»
	:Operation_«operation_counter++»
	  rdf:type exchange:Operation ;
	«ENDIF»
	  exchange:name "«o.name»" ;
	  «IF o.operation.description !== null»
	  exchange:description '«processDescription(o.operation.description)»' ;
	  «ENDIF»
	  «IF o.operation.inputs !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "inputs")» ;
  	  «ENDIF»
	  «IF o.operation.implementation !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(o, "implementation")» ;
	  «ENDIF»
	.
	'''
	
	def compile(EParameterDefinition p) '''
	«IF p.parameter.type !== null»
	«putParameterNumber(p, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«trim(p.parameter.type.compile)»' ;  
	.
	«ENDIF»
	
	«IF p.parameter.value !== null»
	«putParameterNumber(p, "value", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "value" ;
	  «IF p.parameter.value instanceof EFunction»
	  «IF p.parameter.value instanceof GetInput»
	  exchange:hasParameter :Parameter_«getParameterNumber(p.parameter.value, "name")» ;
	  «ELSEIF p.parameter.value instanceof GetProperty || p.parameter.value instanceof GetAttribute»
	  exchange:hasParameter :Parameter_«getParameterNumber(p.parameter.value, "name")» ;
	  «ENDIF»
	  «ELSEIF p.parameter.value instanceof ESingleValue»
	  exchange:value "«trim((p.parameter.value as ESingleValue).compile().toString)»" ;
	  «ENDIF»
	.
	«ENDIF»
	
	«IF p.parameter.^default !== null»
	«putParameterNumber(p, "default", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "default" ;
	  «IF p.parameter.^default instanceof EFunction»
	  «IF p.parameter.^default instanceof GetInput»
	  exchange:hasParameter :Parameter_«getParameterNumber(p.parameter.^default, "name")» ;
	  «ELSEIF p.parameter.^default instanceof GetProperty || p.parameter.^default instanceof GetAttribute»
	  exchange:hasParameter :Parameter_«getParameterNumber(p.parameter.^default, "name")» ;
	  «ENDIF»
	  «ELSEIF p.parameter.^default instanceof ESingleValue»
	  exchange:value "«trim((p.parameter.^default as ESingleValue).compile().toString)»" ;
	  «ENDIF»
	.
	«ENDIF»
	
	«putParameterNumber(p, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«p.name»" ;
	  «IF p.parameter.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "type")» ; 
	  «ENDIF»
	  «IF p.parameter.value !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "value")» ;
	  «ENDIF»
	  «IF p.parameter.^default !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "default")» ;
	  «ENDIF»  
	.	
	'''
	
	def compile(EConditionClauseDefinition ccd) '''
	«IF ccd instanceof EConditionClauseDefinitionNOT»
	«(ccd as EConditionClauseDefinitionNOT).not.compile()»
	«ELSEIF ccd instanceof EConditionClauseDefinitionAND»
	«(ccd as EConditionClauseDefinitionAND).and.compile()»
	«ELSEIF ccd instanceof EConditionClauseDefinitionOR»
	«(ccd as EConditionClauseDefinitionOR).or.compile()»
	«ELSEIF ccd instanceof EConditionClauseDefinitionAssert»
	«FOR assertion:ccd.assertions»
	«assertion.compile()»
	«ENDFOR»
	«ENDIF»
	
	«IF getName(ccd) !== null»
	«putParameterNumber(ccd, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«getName(ccd)»" ;
	  «IF getChild(ccd) instanceof EConditionClauseDefinitionAssert»
	  «FOR assertion:(getChild(ccd) as EConditionClauseDefinitionAssert).assertions»
	  exchange:hasParameter :Parameter_«getParameterNumber(assertion, "name")» ;
	  «ENDFOR»
	  «ELSE»
	  exchange:hasParameter :Parameter_«getParameterNumber(getChild(ccd), "name")» ;
	  «ENDIF»
	.
	«ENDIF»
	'''
	
	def getName (EConditionClauseDefinition ccd){
		if (ccd instanceof EConditionClauseDefinitionNOT)
			return "not"
		else if (ccd instanceof EConditionClauseDefinitionAND)
			return "and"
		else if (ccd instanceof EConditionClauseDefinitionOR)
			return "or"
		else
			return null
	}
	
	def getChild (EConditionClauseDefinition ccd){
		if (ccd instanceof EConditionClauseDefinitionNOT)
			return (ccd as EConditionClauseDefinitionNOT).not
		else if (ccd instanceof EConditionClauseDefinitionAND)
			return (ccd as EConditionClauseDefinitionAND).and
		else if (ccd instanceof EConditionClauseDefinitionOR)
			return (ccd as EConditionClauseDefinitionOR).or
		else
			return null
	}
	
	def compile(EAssertionDefinition ad) '''
	«FOR constraint:ad.constraints.list»
	  «constraint.compile()»
	«ENDFOR»
	
	«putParameterNumber(ad, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«ad.attribute_name»" ;
	  «FOR constraint:ad.constraints.list»
	  exchange:hasParameter :Parameter_«getParameterNumber(constraint, "name")» ;
	  «ENDFOR»
	.
	'''
	
	def compile(EActivityDefinition ad, String name) '''
	
	«IF ad instanceof ECallOperationActivityDefinition»
	«(ad as ECallOperationActivityDefinition).compile()»
	«ENDIF»
	
	«putParameterNumber(ad, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«name»" ;
	  «IF ad instanceof ECallOperationActivityDefinition»
	  exchange:hasParameter :Parameter_«getParameterNumber(ad, "call_operation")» ;
	  «ENDIF»
	.
	'''
	
	def compile(ECallOperationActivityDefinition ad) '''
	«putParameterNumber(ad, "operation", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "operation" ;
	  exchange:value '«trim(ad.operation.operation.compile())»' ;
	.
	
	«putParameterNumber(ad, "inputs", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "inputs" ;
	  «IF ad.operation.inputs !== null»
	  «FOR i:ad.operation.inputs.properties»
	  exchange:hasParameter :Parameter_«getParameterNumber(i, "name")» ;
	  «ENDFOR»
	  «ENDIF»
	.
	
	«putParameterNumber(ad, "call_operation", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "call_operation" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(ad, "operation")» ;
	  «IF ad instanceof ECallOperationActivityDefinition»
	  exchange:hasParameter :Parameter_«getParameterNumber(ad, "inputs")» ;
	  «ENDIF»
	.
	'''
	
	def compile(EEvenFilter ef, String name) '''
	«putParameterNumber(ef, "node", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "node" ;  
	  exchange:value '«trim(ef.node.compile())»' ;
	.
	
	«putParameterNumber(ef, "requirement", parameter_counter)»
	«IF ef.requirement !== null»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "requirement" ;  
	  exchange:value '«trim(ef.requirement.compile())»' ;
	.
	«ENDIF»
	
	«putParameterNumber(ef, "capability", parameter_counter)»
	«IF ef.capability !== null»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "capability" ;  
	  exchange:value '«trim(ef.capability.compile())»' ;
	.
	«ENDIF»
	
	«putParameterNumber(ef, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«name»" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(ef, "node")» ;
	  «IF ef.requirement !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(ef, "requirement")» ;
	  «ENDIF»
	  «IF ef.capability !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(ef, "capability")» ;
	  «ENDIF»	  
	.
	'''

	def compile(GetProperty p) '''
	«IF p.property.property !== null»
	«putParameterNumber(p, "property", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "property" ;  
	  exchange:value '«lastSegment(p.property.property.type, ".")»' ; 
	.
	«ENDIF»	
	
	«IF p.property.entity !== null»
	«putParameterNumber(p, "entity", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entity" ;  
	  exchange:value '«trim(p.property.entity.compile())»' ; 
	.
	«ENDIF»	
	
	«IF p.property.req_cap !== null»
	«putParameterNumber(p, "req_cap", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "req_cap" ;  
	  exchange:value '«lastSegment(p.property.req_cap.type, '.')»' ; 
	.
	«ENDIF»		
	
	«putParameterNumber(p, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "get_property" ;
	  «IF p.property.property !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "property")» ;
	  «ENDIF»	
	  «IF p.property.entity !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "entity")» ;
	  «ENDIF»
	  «IF p.property.req_cap !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "req_cap")» ;
	  «ENDIF»
	.	
	'''
	
	def compile(GetAttribute a) '''
	«IF a.attribute.attribute !== null»
	«putParameterNumber(a, "attribute", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "attribute" ;  
	  exchange:value '«lastSegment(a.attribute.attribute.type, ".")»' ; 
	.
	«ENDIF»	
	
	«IF a.attribute.entity !== null»
	«putParameterNumber(a, "entity", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entity" ;  
	  exchange:value '«trim(a.attribute.entity.compile())»' ; 
	.
	«ENDIF»	
	
	«IF a.attribute.req_cap !== null»
	«putParameterNumber(a, "req_cap", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "req_cap" ;  
	  exchange:value '«lastSegment(a.attribute.req_cap.type, '.')»' ; 
	.
	«ENDIF»		
	
	«putParameterNumber(a, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "get_attribute" ;
	  «IF a.attribute.attribute !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "attribute")» ;
	  «ENDIF»	
	  «IF a.attribute.entity !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "entity")» ;
	  «ENDIF»
	  «IF a.attribute.req_cap !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "req_cap")» ;
	  «ENDIF»
	.	
	'''
	
	def compile (GetInput gi)'''
	«putParameterNumber(gi, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "get_input" ;
	  exchange:hasValue "«gi.input.name»";
	.
	'''

	def compile(ECapabilityType c) '''
	:CapabilityType_«capabilitytype_counter++»
	  rdf:type exchange:Type ;
	  exchange:name "«c.name»" ;
	  «IF c.capability.superType !== null»
	  «IF c.capability.superType.module !== null»
	  exchange:derivesFrom '«c.capability.superType.module»/«c.capability.superType.type»' ;  
	  «ELSE»
	  exchange:derivesFrom '«c.capability.superType.type»' ;  
	  «ENDIF»	  
	  «ENDIF»
	«IF c.capability.description !== null»
	exchange:description '«processDescription(c.capability.description)»' ;
	«ENDIF»
	«IF c.capability.properties !== null»
	«FOR p:c.capability.properties.properties»
	exchange:properties :Property_«property_numbers.get(p)» ; 
	«ENDFOR»
	«ENDIF»
	«IF c.capability.atributes !== null»
	«FOR a:c.capability.atributes.attributes»
	exchange:attributes :Attribute_«attribute_numbers.get(a)» ; 
	«ENDFOR»
	«ENDIF»
	.
	'''
	
	def compile(ERelationshipType r) '''
	
	«IF r.relationship.valid_target_types !== null»
	«putParameterNumber(r, "valid_target_types", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "valid_target_types" ;
	  «FOR entry:(r.relationship.valid_target_types.targetTypes as EObjectContainmentEList<ETargetType>)»
	  «IF entry.name.module !== null»
	  exchange:listValue '«entry.name.module»/«entry.name.type»' ; 
	  «ELSE»
	  exchange:listValue "«entry.name.type»" ; 
	  «ENDIF»
	  «ENDFOR»
	.
	«ENDIF»
	
	:RelationshipType_«relationship_counter++»
	  rdf:type exchange:Type ;
	  exchange:name "«r.name»" ;
	  «IF r.relationship.superType !== null»
	  «IF r.relationship.superType.module !== null»
	  exchange:derivesFrom '«r.relationship.superType.module»/«r.relationship.superType.type»' ;  
	  «ELSE»
	  exchange:derivesFrom '«r.relationship.superType.type»' ;  
	  «ENDIF»	  
	  «ENDIF»
	  «IF r.relationship.description !== null»
	  exchange:description '«processDescription(r.relationship.description)»' ;
	  «ENDIF»
	  «IF r.relationship.properties !== null»
	  «FOR p:r.relationship.properties.properties»
	  exchange:properties :Property_«property_numbers.get(p)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF r.relationship.atributes !== null»
	  «FOR a:r.relationship.atributes.attributes»
	  exchange:attributes :Attribute_«attribute_numbers.get(a)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF r.relationship.interfaces !== null»
	  «FOR i:r.relationship.interfaces.interfaces»
	  exchange:interfaces :Interface_«interface_numbers.get(i)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF r.relationship.valid_target_types !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(r, "valid_target_types")» ;
	  «ENDIF»
	.
	'''

	def compile(ENodeType n) '''
	:NodeType_«node_counter++»
	  rdf:type exchange:Type ;
	  «IF n.node.description !== null»
	  exchange:description '«processDescription(n.node.description)»' ;
	  «ENDIF»
	  exchange:name "«n.name»" ;
	  «IF n.node.superType !== null»
	  «IF n.node.superType.module !== null»
	  exchange:derivesFrom '«n.node.superType.module»/«n.node.superType.type»' ;  
	  «ELSE»
	  exchange:derivesFrom '«n.node.superType.type»' ;  
	  «ENDIF»
	  «ENDIF»
	  «IF n.node.properties !== null»
	  «FOR p:n.node.properties.properties»
	  exchange:properties :Property_«property_numbers.get(p)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.attributes !== null»
	  «FOR a:n.node.attributes.attributes»
	  exchange:attributes :Attribute_«attribute_numbers.get(a)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.requirements !== null»
	  «FOR r:n.node.requirements.requirements»
	  exchange:requirements :Requirement_«requirement_numbers.get(r)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.capabilities !== null»
	  «FOR c:n.node.capabilities.capabilities»
	  exchange:capabilities :Capability_«capability_numbers.get(c)» ; 
	  «ENDFOR»
	  «ENDIF»
	  «IF n.node.interfaces !== null»
	  «FOR i:n.node.interfaces.interfaces»
	  exchange:interfaces :Interface_«interface_numbers.get(i)» ; 
	  «ENDFOR»
	  «ENDIF»
	.  
	'''
	
	def compile(EDataType d) '''
	:DataType_«data_type_counter++»
	  rdf:type exchange:Type ;
	  exchange:name "«trim(d.name.compile)»" ;
	  «IF d.data.superType !== null»
	  exchange:derivesFrom '«trim(d.data.superType.compile)»' ;
	  «ENDIF»
	  «IF d.data.description !== null»
	  exchange:description '«processDescription(d.data.description)»' ;
	  «ENDIF»
	  «IF d.data.properties !== null»
	  «FOR p:d.data.properties.properties»
	  exchange:properties :Property_«property_numbers.get(p)» ; 
	  «ENDFOR»
	  «ENDIF»
	.  
	'''
	
	def compile (EPolicyType p) '''
	
	«IF p.policy.targets !== null»
	«putParameterNumber(p, "targets", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  «FOR entry:(p.policy.targets.targetTypes as EObjectContainmentEList<ETargetType>)»
	  «IF entry.name.module !== null»
	  exchange:listValue '«entry.name.module»/«entry.name.type»' ; 
	  «ELSE»
	  exchange:listValue "«entry.name.type»" ; 
	  «ENDIF»
	  «ENDFOR»
	.
	«ENDIF»
	
	:PolicyType_«policy_counter++»
	  rdf:type exchange:Type ;
	  exchange:name "«p.name»" ;
	  «IF p.policy.description !== null»
	  exchange:description '«processDescription(p.policy.description)»' ;
	  «ENDIF»
	  «IF p.policy.superType !== null»
	  «IF p.policy.superType.module !== null»
	  exchange:derivesFrom '«p.policy.superType.module»/«p.policy.superType.type»' ;
	  «ELSE»
	  exchange:derivesFrom '«p.policy.superType.type»' ;
	  «ENDIF»
	  «ENDIF»
	  «IF p.policy.properties !== null»
	  «FOR prop:p.policy.properties.properties»
	  exchange:properties :Property_«property_numbers.get(prop)» ;
	  «ENDFOR»
	  «ENDIF»
	  «IF p.policy.targets !== null»
	  exchange:targets :Parameter_«getParameterNumber(p, "targets")» ;
	  «ENDIF»
	  «IF p.policy.triggers !== null»
	  «FOR t:p.policy.triggers.triggers»
	  exchange:triggers :Trigger_«trigger_numbers.get(t)» ; 
	  «ENDFOR»
	  «ENDIF»
	.
  	'''
  	
	def compile (EInterfaceType i) '''
	:InterfaceType_«interface_type_counter++»
	  rdf:type exchange:Type ;
	  exchange:name "«i.name»" ;
	  «IF i.interface.description !== null»
	  exchange:description '«processDescription(i.interface.description)»' ;
	  «ENDIF»
	  «IF i.interface.superType !== null»
	  «IF i.interface.superType.module !== null»
	  exchange:derivesFrom '«i.interface.superType.module»/«i.interface.superType.type»' ;
	  «ELSE»
	  exchange:derivesFrom '«i.interface.superType.type»' ;
	  «ENDIF»
	  «ENDIF»
	  «IF i.interface.inputs !== null»
	  «FOR prop:(i.interface.inputs.properties)»
	  exchange:inputs :Property_«property_numbers.get(prop)» ;
	  «ENDFOR»
	  «ENDIF»
	  «IF i.interface.operations !== null»
	  «FOR op:(i.interface.operations.operations)»
	  exchange:operations :Operation_«operation_numbers.get(op)» ;
	  «ENDFOR»
	  «ENDIF»
	.
  	'''
	
	def compile (EPropertyDefinition p) '''
	«IF p.property.type !== null»
	«putParameterNumber(p, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«trim(p.property.type.compile)»' ;  
	.
	«ENDIF»
	
	«putParameterNumber(p, "required", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "required" ;
	  «IF p.property.required != null»
	  exchange:value '«p.property.required.value»' ;
	«ELSE»
	  exchange:value 'true' ;
	«ENDIF»
	.
	
	«IF p.property.^default !== null»
	«putParameterNumber(p, "default", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "default" ;
	  «IF p.property.^default !== null»
	  «IF p.property.^default instanceof EFunction»
	  «IF p.property.^default instanceof GetInput»
	  exchange:hasParameter :Parameter_«getParameterNumber(p.property.^default, "name")» ;
	   «ELSEIF p.property.^default instanceof GetProperty || p.property.^default instanceof GetAttribute»
	  exchange:hasParameter :Parameter_«getParameterNumber(p.property.^default, "name")» ;
	   «ENDIF»
	  «ELSEIF p.property.^default instanceof ESingleValue»
	  exchange:value "«trim((p.property.^default as ESingleValue).compile.toString)»" ;
	  «ENDIF»	  
	  «ENDIF» 
	.
	«ENDIF»
	
	«IF p.property.status !== null»
	«putParameterNumber(p, "status", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "status" ;
	  exchange:value '«p.property.status»' ; 
	.
	«ENDIF»
	
	««« Temporary patch for injecting type in entry_schema serialization FIX IT
	«IF p.property.entry_schema !== null»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«trim(p.property.entry_schema.compile)»' ;
	.
	
	«putParameterNumber(p, "entry_schema", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entry_schema" ;
	  exchange:hasParameter :Parameter_«parameter_counter-2»
	.
	«ENDIF»
	
	«IF p.property.constraints !== null»
	«putParameterNumber(p, "constraints", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "constraints" ;
	  «FOR c:(p.property.constraints.constraints)»
	  exchange:hasParameter :Parameter_«getParameterNumber(c, "name")» ;
	  «ENDFOR»	
	.
	«ENDIF»
	
	«IF p.eContainer.eContainer.eContainer instanceof EInterfaceDefinition»
	«putParameterNumber(p, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	«ELSE»
	«property_numbers.put(p, property_counter)»
	:Property_«property_counter++»
	  rdf:type exchange:Property ;
	«ENDIF»
	  exchange:name "«p.name»" ;
	  «IF p.property.description !== null»
	  exchange:description '«processDescription(p.property.description)»' ;
	  «ENDIF»
	  «IF p.property.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "type")» ;
	  «ENDIF»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "required")» ;
	  «IF p.property.^default !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "default")» ;
	  «ENDIF»
	  «IF p.property.status !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "status")» ;
	  «ENDIF»
	  «IF p.property.entry_schema !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "entry_schema")» ;
	  «ENDIF»
	  «IF p.property.constraints !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(p, "constraints")» ;
	  «ENDIF»
	.
	'''
	
	def compile (EPropertyAssignment p) '''
	«putParameterNumber(p, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«p.name»" ;
	  «IF p.value instanceof ELIST»
	  		«FOR entry:(p.value as ELIST).list»
	  		exchange:listValue "«trim(entry.compile().toString)»" ;
	  		«ENDFOR»
	  «ELSEIF p.value instanceof EMAP»
	    «FOR entry:(p.value as EMAP).map»
	    	exchange:hasParameter :Parameter_«getParameterNumber(entry, "map")» ;
	    «ENDFOR»	  
	  «ELSEIF p.value instanceof EFunction»
	  	«IF p.value instanceof GetInput»
	  	exchange:hasParameter :Parameter_«getParameterNumber(p.value, "name")» ;
	  	«ELSEIF p.value instanceof GetProperty || p.value instanceof GetAttribute»
	  	exchange:hasParameter :Parameter_«getParameterNumber(p.value, "name")» ;
	  	«ENDIF»
	  «ELSEIF p.value instanceof ESingleValue»
	  	exchange:value "«trim((p.value as ESingleValue).compile().toString)»" ;
	  «ENDIF»
	.
	'''
	
	def compile (ETriggerDefinition t) '''
	«putParameterNumber(t, "event", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "event" ;
	  exchange:value '«t.trigger.event»' ;
	.
	  «IF t.trigger.target_filter !== null»
	«t.trigger.target_filter.compile("target_filter")»
	  «ENDIF»
	  
	  «IF t.trigger.condition !== null»
	«t.trigger.condition.compile("condition")»  
	  «ENDIF»
	
	«FOR action: t.trigger.action.list»
	«action.compile("action")»
	«ENDFOR»
	
	«trigger_numbers.put(t, trigger_counter)»
	:Trigger_«trigger_counter++»
	  rdf:type exchange:Trigger ;
	  exchange:name "«t.name»" ;
	  «IF t.trigger.description !== null»
	  exchange:description '«processDescription(t.trigger.description)»' ;
	«ENDIF»
	  exchange:hasParameter :Parameter_«getParameterNumber(t, "event")» ;
	  «IF t.trigger.target_filter !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(t.trigger.target_filter, "name")» ;
	  «ENDIF»
	  «IF t.trigger.condition !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(t.trigger.condition, "name")» ;
	  «ENDIF»
	  «FOR action: t.trigger.action.list»
	  exchange:hasParameter :Parameter_«getParameterNumber(action, "name")» ;
	  «ENDFOR»
	  .
	'''
	
	def compile (EExtendedTriggerCondition etc, String name)'''
	
	  «IF etc.constraint !== null»
	«etc.constraint.compile()»
	  «ENDIF»
	
	  «IF etc.constraint !== null»
	  «putParameterNumber(etc, "constraint", parameter_counter)»
	  :Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "constraint" ;
	  exchange:hasParameter :Parameter_«getParameterNumber(etc.constraint, "name")» ;
	  .
	  «ENDIF»
	  «putParameterNumber(etc, "period", parameter_counter)»
	  «IF etc.period !== null»
	  :Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "period" ;
	  exchange:value «etc.period» ;
	  .
	  «ENDIF»
	  «IF etc.evaluations !== null»
	  «putParameterNumber(etc, "evaluations", parameter_counter)»
	  :Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "evaluations" ;
	  exchange:value «etc.evaluations.value» ;
	  .
	  «ENDIF»
	  «IF etc.method !== null»
	  «putParameterNumber(etc, "method", parameter_counter)»
	  :Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "method" ;
	  exchange:value «etc.method» ;
	  .
	  «ENDIF»
	
	«putParameterNumber(etc, "name", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "«name»" ;
	  «IF etc.constraint !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(etc, "constraint")» ;
  	  «ENDIF»
	  «IF etc.period !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(etc, "period")» ;
  	  «ENDIF»
	  «IF etc.evaluations !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(etc, "evaluations")» ;
  	  «ENDIF»
	  «IF etc.method !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(etc, "method")» ;
  	  «ENDIF»
	.
	'''
	
	def compile (EAttributeDefinition a) '''
	«IF a.attribute.type !== null»
	«putParameterNumber(a, "type", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "type" ;
	  exchange:value '«trim(a.attribute.type.compile)»' ;
	.
	«ENDIF»
	
	«IF a.attribute.^default !== null»
	«putParameterNumber(a, "default", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "default" ;
	  «IF a.attribute.^default !== null»
	  «IF a.attribute.^default instanceof EFunction»
	  	«IF a.attribute.^default instanceof GetInput»
	  	exchange:hasParameter :Parameter_«getParameterNumber(a.attribute.^default, "name")» ;
	  	«ELSEIF a.attribute.^default instanceof GetProperty || a.attribute.^default instanceof GetAttribute»
	  	exchange:hasParameter :Parameter_«getParameterNumber(a.attribute.^default, "name")» ;
	  	«ENDIF»
	  «ELSEIF a.attribute.^default instanceof ESingleValue»
	  	exchange:value "«trim((a.attribute.^default as ESingleValue).compile().toString)»" ;
	  «ENDIF»  
	  «ENDIF» 
	.
	«ENDIF»
		
	«IF a.attribute.status !== null»
	«putParameterNumber(a, "status", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "status" ;
	  exchange:value '«a.attribute.status»' ; 
	.
	«ENDIF»
	
	«IF a.attribute.entry_schema !== null»
	«putParameterNumber(a, "entry_schema", parameter_counter)»
	:Parameter_«parameter_counter++»
	  rdf:type exchange:Parameter ;
	  exchange:name "entry_schema" ;
	  exchange:value '«trim(a.attribute.entry_schema.compile)»' ;
	.
	«ENDIF»
	
	«attribute_numbers.put(a, attribute_counter)»
	:Attribute_«attribute_counter++»
	  rdf:type exchange:Attribute ;
	  exchange:name "«a.name»" ;
	  «IF a.attribute.description !== null»
	  exchange:description '«processDescription(a.attribute.description)»' ;
	  «ENDIF»
	  «IF a.attribute.type !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "type")» ;
	  «ENDIF»
	  «IF a.attribute.^default !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "default")» ;
	  «ENDIF»
	  «IF a.attribute.status !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "status")» ;
  	  «ENDIF»
	  «IF a.attribute.entry_schema !== null»
	  exchange:hasParameter :Parameter_«getParameterNumber(a, "entry_schema")» ;
	  «ENDIF»
	.
	'''
	
	def compile (EValueExpression ve) '''
		«(ve as ESTRING).value»
	'''
	
	def compile (ESingleValue v) '''
	«IF v instanceof ESTRING»
	  «processStringValue((v as ESTRING).value)»
	«ELSEIF v instanceof EBOOLEAN»
	  «(v as EBOOLEAN).value»
	«ELSEIF v instanceof EFLOAT»
	  «(v as EFLOAT).value»
	«ELSEIF v instanceof ESIGNEDINT»
	  «(v as ESIGNEDINT).value»
	«ELSE»
	  null
	«ENDIF»
	'''
	
	def compile (EAlphaNumericValue v) '''
	«IF v instanceof ESTRING»
	  «processStringValue((v as ESTRING).value)»
	«ELSEIF v instanceof EFLOAT»
	  «(v as EFLOAT).value»
	«ELSEIF v instanceof ESIGNEDINT»
	  «(v as ESIGNEDINT).value»
	«ELSE»
	  null
	«ENDIF»
	'''
	
	def compile (EDataTypeName t) '''
	«IF t instanceof EPREFIX_TYPE»
	  «(t as EPREFIX_TYPE).compile»  
	«ELSEIF t instanceof EPRIMITIVE_TYPE»
	  «(t as EPRIMITIVE_TYPE).compile»
	«ENDIF»
	'''
	
	def compile (EPREFIX_REF r) '''
	«IF r instanceof EPREFIX_TYPE»
	  «(r as EPREFIX_TYPE).compile»  
	«ELSEIF r instanceof EPREFIX_ID»
	  «(r as EPREFIX_ID).compile»
	«ENDIF»
	'''
	
	def compile (EEntityReference t) '''
	«IF t instanceof EPREFIX_TYPE»
	  «(t as EPREFIX_TYPE).compile»
	«ELSEIF t instanceof EPREFIX_ID»
	  «(t as EPREFIX_ID).id»
	«ELSEIF t instanceof EEntity»
	  «(t as EEntity).entity»
	«ENDIF»
	'''
	
	def compile (EPRIMITIVE_TYPE t) '''
	  «t.type»
	'''
	
	def compile (EPREFIX_TYPE t) '''
	«IF t.module !== null»
	  «t.module»/«t.type»  
	«ELSE»
	  «t.type»
	«ENDIF»
	'''
	
	def compile (EPREFIX_ID t) '''
	«IF t.module !== null»
	  «t.module»/«t.id»  
	«ELSE»
	  «t.id»
	«ENDIF»
	'''
	
	def processStringValue(String value) {
		val processed = value.replaceAll('"', '\\\\"')
		return processed
	}
	
	def void putParameterNumber (Object entity, String parameterName, Integer number){
		if (parameter_numbers.get(entity) === null){
			parameter_numbers.put(entity, new HashMap<String, Integer>())
		}
		parameter_numbers.get(entity).put(parameterName, number)
	}
	
	def Integer getParameterNumber (Object entity, String parameterName){
		if (parameter_numbers.get(entity) === null)
			return null;
		return parameter_numbers.get(entity).get(parameterName)
	}
	
	def getFilename(URI uri) {
		var filename = uri.toString
		filename = filename.replace("platform:/resource", "")
		filename = filename.substring(
				filename.indexOf(File.separator, 1) + 1).replaceFirst(File.separator, ".") + ".ttl";
		return filename 
	}
		
	def String getName(Resource resource){
		return resource.URI.lastSegment.substring(0, resource.URI.lastSegment.lastIndexOf('.'))
	}
	
	def readFileAsString(String path){
		var String content = new String(Files.readAllBytes(Paths.get(path)));
		return content.replace("\\", "\\\\").replace("\'", "\\'").replaceAll("[\\n\\r]+","\\\\n")
	}
	
	def processDescription (String description){
		return description.replaceAll("'", "\\\\'").replaceAll("[\\n\\r]+","\\\\n")
	}
	
	def trim (String value) {
		return value.trim
	}
	
	def trim (CharSequence value) {
		return value.toString.trim
	}
	
	def lastSegment(String string, String delimiter){
		return string.substring(string.lastIndexOf(delimiter) + 1)
	}
}
