/*******************************************************************************
 * Copyright (c) 2019 Atos Spain S.A.
 * This program and the accompanying materials
 * are made available under the terms of the Apache Public License 2.0 (APL2)
 * which accompanies this distribution, and is available at
 * https://apache.org/licenses/LICENSE-2.0
 *
 * Contributors:
 *     Jesús Gorroñogoitia - Design and implementation
 *******************************************************************************/
grammar org.sodalite.dsl.RM with org.eclipse.xtext.common.Terminals

generate rM "http://www.sodalite.org/dsl/RM"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RM_Model:
	('module:' module=ID)? &
	('import:' imports+=ID)* &
	('data_types:'
	BEGIN
	dataTypes=EDataTypes
	END)? &
	('artifact_types:'
	BEGIN
	artifactTypes=EArtifactTypes
	END)? &
	('capability_types:'
	BEGIN
	capabilityTypes=ECapabilityTypes
	END)? &
	('interface_types:'
	BEGIN
	interfaceTypes=EInterfaceTypes
	END)? &
	('relationship_types:'
	BEGIN
	relationshipTypes=ERelationshipTypes
	END)? &
	('node_types:'
	BEGIN
	nodeTypes=ENodeTypes
	END)? &
	('policy_types:'
	BEGIN
	policyTypes=EPolicyTypes
	END)?;

EDataTypes:
	{EDataTypes} (dataTypes+=EDataType)+;

EDataType:
	name=EDataTypeName ':'
	BEGIN
	data=EDataTypeBody
	END;

EDataTypeBody:
	{EDataTypeBody} (('derived_from:' superType=EDataTypeName)? &
	('description:' description=STRING)? &
	('constraints:'
	BEGIN
	constraints=EConstraints
	END)? &
	('properties:'
	BEGIN
	properties=EProperties
	END)?);

EDataTypeName:
	EPREFIX_TYPE | EPRIMITIVE_TYPE;

EArtifactTypes:
	{EArtifactTypes} (artifactTypes+=EArtifactType)+;

EArtifactType:
	name=QUALIFIED_NAME ':'
	BEGIN
	artifact=EArtifactTypeBody
	END;

EArtifactTypeBody:
	{EArtifactTypeBody} (('derived_from:' superType=EPREFIX_TYPE)? &
	('description:' description=STRING)? &
	('mime_type:' mime_type=STRING)? &
	('file_ext:'+ file_ext=STRING)?);

ECapabilityTypes:
	{ECapabilityTypes} (capabilityTypes+=ECapabilityType)+;

ECapabilityType:
	name=QUALIFIED_NAME ':'
	BEGIN
	capability=ECapabilityTypeBody
	END;

ECapabilityTypeBody:
	{ECapabilityTypeBody} (('derived_from:' superType=EPREFIX_TYPE)? &
	('description:' description=STRING)? &
	('properties:'
	BEGIN
	properties=EProperties
	END)? &
	('attributes:'
	BEGIN
	atributes=EAttributes
	END)?);

EInterfaceTypes:
	{EInterfaceTypes} (interfaceTypes+=EInterfaceType)+;

EInterfaceType:
	name=QUALIFIED_NAME ':'
	BEGIN
	interface=EInterfaceTypeBody
	END;

EInterfaceTypeBody:
	{EInterfaceTypeBody} (('derived_from:' superType=EPREFIX_TYPE)? &
	('description:' description=STRING)? &
	('inputs:'
	BEGIN
	inputs=EProperties
	END)? &
	('operations:'
	BEGIN
	operations=EOperations
	END)?);

EPolicyTypes:
	{EPolicyTypes} (policyTypes+=EPolicyType)+;

EPolicyType:
	name=QUALIFIED_NAME ':'
	BEGIN
	policy=EPolicyTypeBody
	END;

EPolicyTypeBody:
	{EPolicyTypeBody} (('derived_from:' superType=EPREFIX_TYPE)? &
	('description:' description=STRING)?)
	('properties:'
	BEGIN
	properties=EProperties
	END)?
	('targets:' '[' targets=EValidTargetTypes ']')?
	('triggers:'
	BEGIN
	triggers=ETriggers
	END)?
;

ETriggers:
	{ETriggers} (triggers+=ETriggerDefinition)*;
	
ETriggerDefinition:
	name=QUALIFIED_NAME ':' 
	BEGIN
	trigger=ETriggerDefinitionBody
	END;

ETriggerDefinitionBody:
	('description:' description=STRING)? &
	('event:' event=STRING) &
	('schedule:' 
		BEGIN
		schedule=ETimeInterval
		END
	)? &
	('target_filter:'
		BEGIN 
		target_filter=EEvenFilter
		END
	)? &
	('condition:'
		BEGIN
		condition=EExtendedTriggerCondition
		END
	)? &
	('action:'
		BEGIN
		action=EActivityDefinitions
		END
	)
;

EActivityDefinitions:
	{EActivityDefinitions} (list += EActivityDefinition)*
;

EExtendedTriggerCondition:
	('constraint:'
		BEGIN
		constraint=EConditionClauseDefinition
		END
	)? &
	('period:' period=STRING)? &
	('evaluations:' evaluations=ESIGNEDINT)? &
	('method:' method=STRING)?
;

ETimeInterval:
	('start_time:' start_time=STRING)
	('end_time:' end_time=STRING)
;

EEvenFilter:
	('node:' node=EPREFIX_REF) &
	('requirement:' requirement=EPREFIX_REF)? &
	('capability:' capability=EPREFIX_REF)?
;

EConditionClauseDefinition:
	EConditionClauseDefinitionAND | EConditionClauseDefinitionOR | EConditionClauseDefinitionNOT | EConditionClauseDefinitionAssert
;

EConditionClauseDefinitionAND:
	'and:'
	BEGIN
	and = EConditionClauseDefinition
	END
;

EConditionClauseDefinitionOR:
	'or:'
	BEGIN
	or = EConditionClauseDefinition
	END
;

EConditionClauseDefinitionNOT:
	'not:'
	BEGIN
	not = EConditionClauseDefinition
	END
;

EConditionClauseDefinitionAssert:
	{EConditionClauseDefinitionAssert} (assertions += EAssertionDefinition)*
;

EAssertionDefinition:
	attribute_name = ID ':' '[' constraints=EConstraintList ']' 
;

EConstraintList:
	list+=EConstraint (',' list+=EConstraint)*;

EActivityDefinition:
	ECallOperationActivityDefinition
;

ECallOperationActivityDefinition:
	'call_operation:' 
	BEGIN
	operation=ECallOperationActivityDefinitionBody
	END
;	

ECallOperationActivityDefinitionBody:
	('operation:' operation=EPREFIX_TYPE) &
	('inputs:'
		BEGIN 
		inputs=EPropertyAssignments
		END
	)? 
;

EPropertyAssignments:
	{EPropertyAssignments} (properties+=EPropertyAssignment)*;

EPropertyAssignment:
	name = ID ':' value=EAssignmentValue;

ENodeTypes:
	{ENodeTypes} (nodeTypes+=ENodeType)+;

ENodeType:
	name=QUALIFIED_NAME ':'
	BEGIN
	node=ENodeTypeBody
	END;

ENodeTypeBody:
	{ENodeTypeBody} (('derived_from:' superType=EPREFIX_TYPE)? &
	('description:' description=STRING)? &
	('properties:'
	BEGIN
	properties=EProperties
	END)? &
	('attributes:'
	BEGIN
	attributes=EAttributes
	END)? &
	('interfaces:'
	BEGIN
	interfaces=EInterfaces
	END)? &
	('capabilities:'
	BEGIN
	capabilities=ECapabilities
	END)? &
	('requirements:'
	BEGIN
	requirements=ERequirements
	END)?);

ERelationshipTypes:
	{ERelationshipTypes} (relationshipTypes+=ERelationshipType)+;

ERelationshipType:
	name=QUALIFIED_NAME ':'
	BEGIN
	relationship=ERelationshipTypeBody
	END;

ERelationshipTypeBody:
	{ERelationshipTypeBody} (('derived_from:' superType=EPREFIX_TYPE)? &
	('description:' description=STRING)? &
	('properties:'
	BEGIN
	properties=EProperties
	END)? &
	('attributes:'
	BEGIN
	atributes=EAttributes
	END)? &
	('interfaces:'
	BEGIN
	interfaces=EInterfaces
	END)? &
	('valid_target_types:' '[' valid_target_types=EValidTargetTypes "]")?);

EValidTargetTypes:
	targetTypes+=ETargetType (',' targetTypes+=ETargetType)*;

ETargetType:
	name=EPREFIX_TYPE;

EProperties:
	{EProperties} (properties+=EPropertyDefinition)*;

EPropertyDefinition:
	name=ID ':'
	BEGIN
	property=EPropertyDefinitionBody
	END;

EPropertyDefinitionBody:
	('type:' type=EDataTypeName) &
	('description:' description=STRING)? &
	('required:' required=EBOOLEAN)? &
	('default:' default=EValueExpression)? &
	('status:' status=STRING)? &
	('constraints:'
	BEGIN
	constraints=EConstraints
	END)? &
	('entry_schema:' entry_schema=EDataTypeName)?;

EAttributes:
	{EAttributes} (attributes+=EAttributeDefinition)*;

EAttributeDefinition:
	name=ID ':'
	BEGIN
	attribute=EAttributeDefinitionBody
	END;

EAttributeDefinitionBody:
	('type:' type=EDataTypeName) &
	('description:' description=STRING)? &
	('default:' default=EValueExpression)? &
	('status:' status=STRING)? &
	('entry_schema:' entry_schema=EDataTypeName)?;

EInterfaces:
	{EInterfaces} (interfaces+=EInterfaceDefinition)*;

EInterfaceDefinition:
	name=ID ':'
	BEGIN
	interface=EInterfaceDefinitionBody
	END;

EInterfaceDefinitionBody:
	'type:' type=EPREFIX_TYPE &
	('inputs:'
	BEGIN
	inputs=EProperties
	END)? &
	('operations:'
	BEGIN
	operations=EOperations
	END)?;

EOperations:
	{EOperations} (operations+=EOperationDefinition)*;

EOperationDefinition:
	name=ID ':'
	BEGIN
	operation=EOperationDefinitionBody
	END;

EOperationDefinitionBody:
	{EOperationDefinitionBody} (
	('description:' description=STRING)? &
	('inputs:'
	BEGIN
	inputs=EInputs
	END)? &
	('implementation:'
		BEGIN
		implementation=EImplementation
		END
	)?
	);
	
EImplementation:
	(primary=EPrimary)
	(dependencies=EDependencies)?
;

EPrimary:
	('primary:' file=STRING)
	(BEGIN 'relative_path:' relative_path=STRING END)?
;

EDependencies:
	'dependencies:''[' (files=EDependencyFiles)? ']'
	(BEGIN 'relative_path:' relative_path=STRING END)?
;

EDependencyFiles:
	files+=STRING (',' files+=STRING)*
;

EInputs:
	{EInputs} (inputs+=EParameterDefinition)*;

	//inputs of operation definition in NodeTypes are ParameterDefinition
EParameterDefinition:
	name=ID ':'
	BEGIN
	parameter=EParameterDefinitionBody
	END;

EParameterDefinitionBody:
	{EParameterDefinitionBody} (
	('type:' type=EDataTypeName)? &
	('value:' value=EValueExpression)? &
	('default:' default=EValueExpression)?);

EValueExpression:
	ESingleValue | EFunction;

EFunction:
	GetProperty | GetAttribute | GetInput;

GetInput:
	'get_input:' input=[EParameterDefinition] //FIXME do not use cross-reference
;

GetAttribute:
	'get_attribute:'
	BEGIN
	attribute=GetAttributeBody
	END;

GetAttributeBody:
	('attribute:' attribute=EPREFIX_TYPE) &
	('entity:' entity=EEntityReference) &
	('req_cap:' req_cap=EPREFIX_TYPE)?;

GetProperty:
	'get_property:'
	BEGIN
	property=GetPropertyBody
	END;

GetPropertyBody:
	('property:' property=EPREFIX_TYPE) &
	('entity:' entity=EEntityReference) &
	('req_cap:' req_cap=EPREFIX_TYPE)?;

ECapabilities:
	{ECapabilities} (capabilities+=ECapabilityDefinition)*;

ECapabilityDefinition:
	name=ID ':'
	BEGIN
	capability=ECapabilityDefinitionBody
	END;

ECapabilityDefinitionBody:
	('type:' type=EPREFIX_TYPE) &
	('description:' description=STRING)? &
	('properties:'
	BEGIN
	properties=EProperties
	END)? &
	('attributes:'
	BEGIN
	attributes=EAttributes
	END)? &
	('valid_source_types:' '[' (valid_source_types+=EValidSourceType)? ']')? &
	('occurrences:' '[' occurrences_start=EAlphaNumericValue ',' occurrences_end=EAlphaNumericValue ']')?;

EValidSourceType:
	sourceTypes+=EPREFIX_TYPE (',' sourceTypes+=EPREFIX_TYPE)*;

ERequirements:
	{ERequirements} (requirements+=ERequirementDefinition)*;

ERequirementDefinition:
	name=ID ':'
	BEGIN
	requirement=ERequirementDefinitionBody
	END;

ERequirementDefinitionBody:
	('capability:' capability=EPREFIX_TYPE) &
	('node:' node=EPREFIX_TYPE)? &
	('relationship:' relationship=EPREFIX_TYPE)? &
	('occurrences:' '[' start=EAlphaNumericValue ',' end=EAlphaNumericValue ']')?;

EReqOrCap:
	ERequirementDefinition | ECapabilityDefinition;

EConstraints:
	{EConstraints} (constraints+=EConstraint)*;

EConstraint:
	EEqual | EGreaterThan | EGreaterOrEqual | ELessThan | ELessOrEqual | EInRange | EValid_Values | ELength | EMinLength |
	EMaxLength;

EMaxLength:
	'max_length:' val=EAlphaNumericValue;

EMinLength:
	'min_length:' val=EAlphaNumericValue;

ELength:
	'length:' val=EAlphaNumericValue;

EValid_Values:
	'valid_values:' val=ELIST;

ELIST:
	'['list+=EAlphaNumericValue ("," list+=EAlphaNumericValue)* ']'
;

EInRange:
	'in_range:' '[' start=EAlphaNumericValue "," end=EAlphaNumericValue ']';

ELessOrEqual:
	'less_or_equal:' val=EAlphaNumericValue;

ELessThan:
	'less_than:' val=EAlphaNumericValue;

EGreaterOrEqual:
	'greater_or_equal:' val=EAlphaNumericValue;

EGreaterThan:
	'greater_than:' val=EAlphaNumericValue;

EEqual:
	'equal:' val=ESingleValue;
	
EAssignmentValue:
	ESingleValue | ELIST | EMAP | EFunction
;

ESingleValue:
	ESTRING | EBOOLEAN | EFLOAT | ESIGNEDINT 
;

EAlphaNumericValue:
	ESTRING | EFLOAT | ESIGNEDINT 
;

ESTRING:
	value = STRING
;

EBOOLEAN:
	value = BOOLEAN
;

EFLOAT:
	value = FLOAT
;

ESIGNEDINT:
	value = SIGNEDINT
;

EMAP:
	BEGIN
		map+=EMapEntry+
	END
;

EMapEntry:
	key=ID ":" value=EAssignmentValue
;

EEntityReference:
	EEntity | EPREFIX_TYPE | EPREFIX_ID
;

EPREFIX_REF:
	EPREFIX_TYPE | EPREFIX_ID
;

EPREFIX_TYPE:
	(module=ID '/')? type=QUALIFIED_NAME
;

EPREFIX_ID:
	(module=ID '/')? id=ID
;

EPRIMITIVE_TYPE:
	type=ID
;

EEntity:
	entity=ENTITY
;


terminal QUALIFIED_NAME: //FIXME convert to data type rule, remove terminal
	ID ('.' ID)+;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';
	
SIGNEDINT returns ecore::EInt: '-'? INT;

FLOAT returns ecore::EFloat: INT? '.' INT;

terminal ENTITY:
	'SELF' | 'SOURCE' | 'TARGET' | 'HOST';

@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;

//Blocks delimited with curly braces
//terminal START_BLOCK:
//	'{'
//;
//
//terminal END_BLOCK:
//	'}'
//;

//Positional blocks delimited with indentation
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';
