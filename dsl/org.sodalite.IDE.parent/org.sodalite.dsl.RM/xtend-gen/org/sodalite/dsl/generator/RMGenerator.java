/**
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.generator;

import com.google.common.collect.Iterables;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.sodalite.dsl.rM.EAlphaNumericValue;
import org.sodalite.dsl.rM.EAttributeDefinition;
import org.sodalite.dsl.rM.EAttributes;
import org.sodalite.dsl.rM.ECapabilities;
import org.sodalite.dsl.rM.ECapabilityDefinition;
import org.sodalite.dsl.rM.ECapabilityType;
import org.sodalite.dsl.rM.ECapabilityTypeRef;
import org.sodalite.dsl.rM.EConstraint;
import org.sodalite.dsl.rM.EConstraints;
import org.sodalite.dsl.rM.EDataType;
import org.sodalite.dsl.rM.EDependencies;
import org.sodalite.dsl.rM.EEqual;
import org.sodalite.dsl.rM.EFunction;
import org.sodalite.dsl.rM.EGreaterOrEqual;
import org.sodalite.dsl.rM.EGreaterThan;
import org.sodalite.dsl.rM.EImplementation;
import org.sodalite.dsl.rM.EInputs;
import org.sodalite.dsl.rM.EInterfaceDefinition;
import org.sodalite.dsl.rM.EInterfaceType;
import org.sodalite.dsl.rM.EInterfaces;
import org.sodalite.dsl.rM.ELength;
import org.sodalite.dsl.rM.ELessOrEqual;
import org.sodalite.dsl.rM.ELessThan;
import org.sodalite.dsl.rM.EMaxLength;
import org.sodalite.dsl.rM.EMinLength;
import org.sodalite.dsl.rM.ENodeType;
import org.sodalite.dsl.rM.ENodeTypeRef;
import org.sodalite.dsl.rM.EOperationDefinition;
import org.sodalite.dsl.rM.EOperations;
import org.sodalite.dsl.rM.EParameterDefinition;
import org.sodalite.dsl.rM.EProperties;
import org.sodalite.dsl.rM.EPropertyDefinition;
import org.sodalite.dsl.rM.ERelationshipType;
import org.sodalite.dsl.rM.EReqOrCap;
import org.sodalite.dsl.rM.ERequirementDefinition;
import org.sodalite.dsl.rM.ERequirements;
import org.sodalite.dsl.rM.ESTRING;
import org.sodalite.dsl.rM.EValidSourceType;
import org.sodalite.dsl.rM.EValidTargetTypes;
import org.sodalite.dsl.rM.EValid_Values;
import org.sodalite.dsl.rM.EValueExpression;
import org.sodalite.dsl.rM.GetAttribute;
import org.sodalite.dsl.rM.GetProperty;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RMGenerator extends AbstractGenerator {
  private int data_type_counter = 1;
  
  private int node_counter = 1;
  
  private int property_counter = 1;
  
  private int attribute_counter = 1;
  
  private int requirement_counter = 1;
  
  private int capability_counter = 1;
  
  private int capabilitytype_counter = 1;
  
  private int relationship_counter = 1;
  
  private int parameter_counter = 1;
  
  private int interface_counter = 1;
  
  private Map<EPropertyDefinition, Integer> property_numbers;
  
  private Map<EAttributeDefinition, Integer> attribute_numbers;
  
  private Map<ERequirementDefinition, Integer> requirement_numbers;
  
  private Map<ECapabilityDefinition, Integer> capability_numbers;
  
  private Map<EInterfaceDefinition, Integer> interface_numbers;
  
  private Map<Object, Map<String, Integer>> parameter_numbers;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.data_type_counter = 1;
    this.node_counter = 1;
    this.property_counter = 1;
    this.attribute_counter = 1;
    this.requirement_counter = 1;
    this.capability_counter = 1;
    this.capabilitytype_counter = 1;
    this.relationship_counter = 1;
    this.parameter_counter = 1;
    this.interface_counter = 1;
    HashMap<EPropertyDefinition, Integer> _hashMap = new HashMap<EPropertyDefinition, Integer>();
    this.property_numbers = _hashMap;
    HashMap<EAttributeDefinition, Integer> _hashMap_1 = new HashMap<EAttributeDefinition, Integer>();
    this.attribute_numbers = _hashMap_1;
    HashMap<ERequirementDefinition, Integer> _hashMap_2 = new HashMap<ERequirementDefinition, Integer>();
    this.requirement_numbers = _hashMap_2;
    HashMap<ECapabilityDefinition, Integer> _hashMap_3 = new HashMap<ECapabilityDefinition, Integer>();
    this.capability_numbers = _hashMap_3;
    HashMap<Object, Map<String, Integer>> _hashMap_4 = new HashMap<Object, Map<String, Integer>>();
    this.parameter_numbers = _hashMap_4;
    HashMap<EInterfaceDefinition, Integer> _hashMap_5 = new HashMap<EInterfaceDefinition, Integer>();
    this.interface_numbers = _hashMap_5;
    final String filename = this.getFilename(resource.getURI());
    fsa.generateFile(filename, this.compileRM(resource));
  }
  
  public CharSequence compileRM(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# baseURI: https://www.sodalite.eu/ontologies/exchange/rm/");
    _builder.newLine();
    _builder.append("# imports: https://www.sodalite.eu/ontologies/exchange/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@prefix : <https://www.sodalite.eu/ontologies/exchange/rm/> .");
    _builder.newLine();
    _builder.append("@prefix exchange: <https://www.sodalite.eu/ontologies/exchange/> .");
    _builder.newLine();
    _builder.append("@prefix owl: <http://www.w3.org/2002/07/owl#> .");
    _builder.newLine();
    _builder.append("@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .");
    _builder.newLine();
    _builder.append("@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .");
    _builder.newLine();
    _builder.append("@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("rdf:type owl:Ontology ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("owl:imports exchange: ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("owl:versionInfo \"Created by the SODALITE IDE\" ;");
    _builder.newLine();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":RM_1");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("rdf:type exchange:RM ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:userId \"27827d44-0f6c-11ea-8d71-362b9e155667\" ;");
    _builder.newLine();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    {
      Iterable<EConstraint> _filter = Iterables.<EConstraint>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EConstraint.class);
      for(final EConstraint c : _filter) {
        CharSequence _compile = this.compile(c);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<GetProperty> _filter_1 = Iterables.<GetProperty>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), GetProperty.class);
      for(final GetProperty p : _filter_1) {
        CharSequence _compile_1 = this.compile(p);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<GetAttribute> _filter_2 = Iterables.<GetAttribute>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), GetAttribute.class);
      for(final GetAttribute a : _filter_2) {
        CharSequence _compile_2 = this.compile(a);
        _builder.append(_compile_2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EParameterDefinition> _filter_3 = Iterables.<EParameterDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EParameterDefinition.class);
      for(final EParameterDefinition p_1 : _filter_3) {
        CharSequence _compile_3 = this.compile(p_1);
        _builder.append(_compile_3);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EOperationDefinition> _filter_4 = Iterables.<EOperationDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EOperationDefinition.class);
      for(final EOperationDefinition o : _filter_4) {
        CharSequence _compile_4 = this.compile(o);
        _builder.append(_compile_4);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EPropertyDefinition> _filter_5 = Iterables.<EPropertyDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EPropertyDefinition.class);
      for(final EPropertyDefinition p_2 : _filter_5) {
        CharSequence _compile_5 = this.compile(p_2);
        _builder.append(_compile_5);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EAttributeDefinition> _filter_6 = Iterables.<EAttributeDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EAttributeDefinition.class);
      for(final EAttributeDefinition p_3 : _filter_6) {
        CharSequence _compile_6 = this.compile(p_3);
        _builder.append(_compile_6);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EInterfaceDefinition> _filter_7 = Iterables.<EInterfaceDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EInterfaceDefinition.class);
      for(final EInterfaceDefinition i : _filter_7) {
        CharSequence _compile_7 = this.compile(i);
        _builder.append(_compile_7);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ECapabilityDefinition> _filter_8 = Iterables.<ECapabilityDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ECapabilityDefinition.class);
      for(final ECapabilityDefinition cap : _filter_8) {
        CharSequence _compile_8 = this.compile(cap);
        _builder.append(_compile_8);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ERequirementDefinition> _filter_9 = Iterables.<ERequirementDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ERequirementDefinition.class);
      for(final ERequirementDefinition req : _filter_9) {
        CharSequence _compile_9 = this.compile(req);
        _builder.append(_compile_9);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ENodeType> _filter_10 = Iterables.<ENodeType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ENodeType.class);
      for(final ENodeType n : _filter_10) {
        CharSequence _compile_10 = this.compile(n);
        _builder.append(_compile_10);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EDataType> _filter_11 = Iterables.<EDataType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EDataType.class);
      for(final EDataType d : _filter_11) {
        CharSequence _compile_11 = this.compile(d);
        _builder.append(_compile_11);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ECapabilityType> _filter_12 = Iterables.<ECapabilityType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ECapabilityType.class);
      for(final ECapabilityType c_1 : _filter_12) {
        CharSequence _compile_12 = this.compile(c_1);
        _builder.append(_compile_12);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ERelationshipType> _filter_13 = Iterables.<ERelationshipType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ERelationshipType.class);
      for(final ERelationshipType rt : _filter_13) {
        CharSequence _compile_13 = this.compile(rt);
        _builder.append(_compile_13);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EConstraint c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((c instanceof EValid_Values)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"valid_values\" ;");
        _builder.newLine();
        {
          EList<EAlphaNumericValue> _list = ((EValid_Values)c).getVal().getList();
          for(final EAlphaNumericValue v : _list) {
            _builder.append("  ");
            _builder.append("exchange:listValue \"");
            _builder.append(v, "  ");
            _builder.append("\" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EMinLength)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"min_length\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val = ((EMinLength)c).getVal();
        _builder.append(_val, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EGreaterThan)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"greater_than\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_1 = ((EGreaterThan)c).getVal();
        _builder.append(_val_1, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EEqual)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"equal\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_2 = ((EEqual)c).getVal();
        _builder.append(_val_2, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EGreaterOrEqual)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"greater_or_equal\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_3 = ((EGreaterOrEqual)c).getVal();
        _builder.append(_val_3, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof ELessThan)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_5 = this.parameter_counter++;
        _builder.append(_plusPlus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"less_than\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_4 = ((ELessThan)c).getVal();
        _builder.append(_val_4, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof ELessOrEqual)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_6 = this.parameter_counter++;
        _builder.append(_plusPlus_6);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"less_or_equal\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_5 = ((ELessOrEqual)c).getVal();
        _builder.append(_val_5, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof ELength)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_7 = this.parameter_counter++;
        _builder.append(_plusPlus_7);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"length\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_6 = ((ELength)c).getVal();
        _builder.append(_val_6, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EMaxLength)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_8 = this.parameter_counter++;
        _builder.append(_plusPlus_8);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"max_length\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _val_7 = ((EMaxLength)c).getVal();
        _builder.append(_val_7, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ERequirementDefinition r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ECapabilityType _capability = r.getRequirement().getCapability();
      boolean _tripleNotEquals = (_capability != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(r, "capability", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"capability\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = r.getRequirement().getCapability().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      ENodeType _node = r.getRequirement().getNode();
      boolean _tripleNotEquals_1 = (_node != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(r, "node", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"node\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_1 = r.getRequirement().getNode().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      ERelationshipType _relationship = r.getRequirement().getRelationship();
      boolean _tripleNotEquals_2 = (_relationship != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(r, "relationship", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"relationship\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_2 = r.getRequirement().getRelationship().getName();
        _builder.append(_name_2, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.requirement_numbers.put(r, Integer.valueOf(this.requirement_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Requirement_");
    int _plusPlus_3 = this.requirement_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Requirement ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name_3 = r.getName();
    _builder.append(_name_3, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      ECapabilityType _capability_1 = r.getRequirement().getCapability();
      boolean _tripleNotEquals_3 = (_capability_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(r, "capability");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ENodeType _node_1 = r.getRequirement().getNode();
      boolean _tripleNotEquals_4 = (_node_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(r, "node");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ERelationshipType _relationship_1 = r.getRequirement().getRelationship();
      boolean _tripleNotEquals_5 = (_relationship_1 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(r, "relationship");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ECapabilityDefinition c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ECapabilityType _type = c.getCapability().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(c, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = c.getCapability().getType().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<EValidSourceType> _valid_source_types = c.getCapability().getValid_source_types();
      boolean _tripleNotEquals_1 = (_valid_source_types != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(c, "valid_source_types", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"valid_source_types\" ;");
        _builder.newLine();
        {
          EList<EValidSourceType> _valid_source_types_1 = c.getCapability().getValid_source_types();
          for(final EValidSourceType entry : ((EObjectContainmentEList<EValidSourceType>) _valid_source_types_1)) {
            {
              EList<ENodeTypeRef> _sourceTypes = entry.getSourceTypes();
              for(final ENodeTypeRef s : _sourceTypes) {
                _builder.append("  ");
                _builder.append("exchange:listValue \"");
                String _name_1 = s.getName().getName();
                _builder.append(_name_1, "  ");
                _builder.append("\" ;");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    Integer _put = this.capability_numbers.put(c, Integer.valueOf(this.capability_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Capability_");
    int _plusPlus_2 = this.capability_counter++;
    _builder.append(_plusPlus_2);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Capability ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name_2 = c.getName();
    _builder.append(_name_2, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = c.getCapability().getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(c.getCapability().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ECapabilityType _type_1 = c.getCapability().getType();
      boolean _tripleNotEquals_3 = (_type_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(c, "type");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<EValidSourceType> _valid_source_types_2 = c.getCapability().getValid_source_types();
      boolean _tripleNotEquals_4 = (_valid_source_types_2 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(c, "valid_source_types");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EInterfaceDefinition i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EInterfaceType _type = i.getInterface().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(i, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = i.getInterface().getType().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EOperations _operations = i.getInterface().getOperations();
      boolean _tripleNotEquals_1 = (_operations != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(i, "operations", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"operations\" ;");
        _builder.newLine();
        {
          EList<EOperationDefinition> _operations_1 = i.getInterface().getOperations().getOperations();
          for(final EOperationDefinition op : _operations_1) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber = this.getParameterNumber(op, "name");
            _builder.append(_parameterNumber, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.interface_numbers.put(i, Integer.valueOf(this.interface_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Interface_");
    int _plusPlus_2 = this.interface_counter++;
    _builder.append(_plusPlus_2);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Interface ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name_1 = i.getName();
    _builder.append(_name_1, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EInterfaceType _type_1 = i.getInterface().getType();
      boolean _tripleNotEquals_2 = (_type_1 != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(i, "type");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EOperations _operations_2 = i.getInterface().getOperations();
      boolean _tripleNotEquals_3 = (_operations_2 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(i, "operations");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EOperationDefinition o) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EInputs _inputs = o.getOperation().getInputs();
      boolean _tripleNotEquals = (_inputs != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(o, "inputs", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"inputs\" ;");
        _builder.newLine();
        {
          EList<EParameterDefinition> _inputs_1 = o.getOperation().getInputs().getInputs();
          for(final EParameterDefinition in : _inputs_1) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber = this.getParameterNumber(in, "name");
            _builder.append(_parameterNumber, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EImplementation _implementation = o.getOperation().getImplementation();
      boolean _tripleNotEquals_1 = (_implementation != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(o, "primary.path", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"path\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _file = o.getOperation().getImplementation().getPrimary().getFile();
        _builder.append(_file, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(o, "primary.content", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"content\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _readFileAsString = this.readFileAsString(o.getOperation().getImplementation().getPrimary().getFile());
        _builder.append(_readFileAsString, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        {
          String _relative_path = o.getOperation().getImplementation().getPrimary().getRelative_path();
          boolean _tripleNotEquals_2 = (_relative_path != null);
          if (_tripleNotEquals_2) {
            this.putParameterNumber(o, "primary.relative_path", Integer.valueOf(this.parameter_counter));
            _builder.newLineIfNotEmpty();
            _builder.append(":Parameter_");
            int _plusPlus_3 = this.parameter_counter++;
            _builder.append(_plusPlus_3);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("rdf:type exchange:Parameter ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:name \"relative_path\" ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _relative_path_1 = o.getOperation().getImplementation().getPrimary().getRelative_path();
            _builder.append(_relative_path_1, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
            _builder.append(".");
            _builder.newLine();
          }
        }
        _builder.newLine();
        this.putParameterNumber(o, "primary", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"primary\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(o, "primary.path");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(o, "primary.content");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        {
          String _relative_path_2 = o.getOperation().getImplementation().getPrimary().getRelative_path();
          boolean _tripleNotEquals_3 = (_relative_path_2 != null);
          if (_tripleNotEquals_3) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_3 = this.getParameterNumber(o, "primary.relative_path");
            _builder.append(_parameterNumber_3, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        {
          EDependencies _dependencies = o.getOperation().getImplementation().getDependencies();
          boolean _tripleNotEquals_4 = (_dependencies != null);
          if (_tripleNotEquals_4) {
            {
              EList<String> _files = o.getOperation().getImplementation().getDependencies().getFiles().getFiles();
              for(final String d : _files) {
                this.putParameterNumber(d, "file.path", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_5 = this.parameter_counter++;
                _builder.append(_plusPlus_5);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"path\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:value \'");
                _builder.append(d, "  ");
                _builder.append("\' ; ");
                _builder.newLineIfNotEmpty();
                _builder.append(" ");
                _builder.append(".");
                _builder.newLine();
                _builder.newLine();
                this.putParameterNumber(d, "file.content", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_6 = this.parameter_counter++;
                _builder.append(_plusPlus_6);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"content\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:value \'");
                String _readFileAsString_1 = this.readFileAsString(d);
                _builder.append(_readFileAsString_1, "  ");
                _builder.append("\' ;");
                _builder.newLineIfNotEmpty();
                _builder.append(".");
                _builder.newLine();
                _builder.newLine();
                this.putParameterNumber(d, "file", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_7 = this.parameter_counter++;
                _builder.append(_plusPlus_7);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"file\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_4 = this.getParameterNumber(d, "file.path");
                _builder.append(_parameterNumber_4, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_5 = this.getParameterNumber(d, "file.content");
                _builder.append(_parameterNumber_5, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
                _builder.append(".");
                _builder.newLine();
              }
            }
            _builder.newLine();
            {
              String _relative_path_3 = o.getOperation().getImplementation().getDependencies().getRelative_path();
              boolean _tripleNotEquals_5 = (_relative_path_3 != null);
              if (_tripleNotEquals_5) {
                this.putParameterNumber(o, "dependencies.relative_path", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_8 = this.parameter_counter++;
                _builder.append(_plusPlus_8);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"relative_path\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:value \'");
                String _relative_path_4 = o.getOperation().getImplementation().getDependencies().getRelative_path();
                _builder.append(_relative_path_4, "  ");
                _builder.append("\' ;");
                _builder.newLineIfNotEmpty();
                _builder.append(".");
                _builder.newLine();
              }
            }
            _builder.newLine();
            this.putParameterNumber(o, "dependencies", Integer.valueOf(this.parameter_counter));
            _builder.newLineIfNotEmpty();
            _builder.append(":Parameter_");
            int _plusPlus_9 = this.parameter_counter++;
            _builder.append(_plusPlus_9);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("rdf:type exchange:Parameter ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:name \"dependencies\" ;");
            _builder.newLine();
            {
              EList<String> _files_1 = o.getOperation().getImplementation().getDependencies().getFiles().getFiles();
              for(final String d_1 : _files_1) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_6 = this.getParameterNumber(d_1, "file");
                _builder.append(_parameterNumber_6, "  ");
                _builder.append(" ; ");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _relative_path_5 = o.getOperation().getImplementation().getDependencies().getRelative_path();
              boolean _tripleNotEquals_6 = (_relative_path_5 != null);
              if (_tripleNotEquals_6) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_7 = this.getParameterNumber(o, "dependencies.relative_path");
                _builder.append(_parameterNumber_7, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append(".");
            _builder.newLine();
          }
        }
        _builder.newLine();
        this.putParameterNumber(o, "implementation", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_10 = this.parameter_counter++;
        _builder.append(_plusPlus_10);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"implementation\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_8 = this.getParameterNumber(o, "primary");
        _builder.append(_parameterNumber_8, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        {
          EDependencies _dependencies_1 = o.getOperation().getImplementation().getDependencies();
          boolean _tripleNotEquals_7 = (_dependencies_1 != null);
          if (_tripleNotEquals_7) {
            _builder.append(" ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_9 = this.getParameterNumber(o, "dependencies");
            _builder.append(_parameterNumber_9, " ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(o, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_11 = this.parameter_counter++;
    _builder.append(_plusPlus_11);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = o.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EInputs _inputs_2 = o.getOperation().getInputs();
      boolean _tripleNotEquals_8 = (_inputs_2 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_10 = this.getParameterNumber(o, "inputs");
        _builder.append(_parameterNumber_10, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EImplementation _implementation_1 = o.getOperation().getImplementation();
      boolean _tripleNotEquals_9 = (_implementation_1 != null);
      if (_tripleNotEquals_9) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_11 = this.getParameterNumber(o, "implementation");
        _builder.append(_parameterNumber_11, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EParameterDefinition p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EValueExpression _value = p.getParameter().getValue();
      boolean _tripleNotEquals = (_value != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "value", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"value\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(p.getParameter().getValue(), "name");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EValueExpression _default = p.getParameter().getDefault();
      boolean _tripleNotEquals_1 = (_default != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(p, "default", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"default\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(p.getParameter().getDefault(), "name");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(p, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_2 = this.parameter_counter++;
    _builder.append(_plusPlus_2);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = p.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EDataType _type = p.getParameter().getType();
      boolean _tripleNotEquals_2 = (_type != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_1 = p.getParameter().getType().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EValueExpression _value_1 = p.getParameter().getValue();
      boolean _tripleNotEquals_3 = (_value_1 != null);
      if (_tripleNotEquals_3) {
        {
          EValueExpression _value_2 = p.getParameter().getValue();
          if ((_value_2 instanceof EFunction)) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_2 = this.getParameterNumber(p, "value");
            _builder.append(_parameterNumber_2, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            CharSequence _compile = this.compile(p.getParameter().getValue());
            _builder.append(_compile, "  ");
            _builder.append("\' ;\t  ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EValueExpression _default_1 = p.getParameter().getDefault();
      boolean _tripleNotEquals_4 = (_default_1 != null);
      if (_tripleNotEquals_4) {
        {
          EValueExpression _default_2 = p.getParameter().getDefault();
          if ((_default_2 instanceof EFunction)) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_3 = this.getParameterNumber(p, "default");
            _builder.append(_parameterNumber_3, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            CharSequence _compile_1 = this.compile(p.getParameter().getDefault());
            _builder.append(_compile_1, "  ");
            _builder.append("\' ;\t  ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GetProperty p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPropertyDefinition _property = p.getProperty().getProperty();
      boolean _tripleNotEquals = (_property != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "property", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"property\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = p.getProperty().getProperty().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      String _entity = p.getProperty().getEntity();
      boolean _tripleNotEquals_1 = (_entity != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(p, "entity", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entity\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _entity_1 = p.getProperty().getEntity();
        _builder.append(_entity_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EReqOrCap _req_cap = p.getProperty().getReq_cap();
      boolean _tripleNotEquals_2 = (_req_cap != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(p, "req_cap", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"req_cap\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_1 = p.getProperty().getReq_cap().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(p, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_3 = this.parameter_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"get_property\" ;");
    _builder.newLine();
    {
      EPropertyDefinition _property_1 = p.getProperty().getProperty();
      boolean _tripleNotEquals_3 = (_property_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(p, "property");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _entity_2 = p.getProperty().getEntity();
      boolean _tripleNotEquals_4 = (_entity_2 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(p, "entity");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EReqOrCap _req_cap_1 = p.getProperty().getReq_cap();
      boolean _tripleNotEquals_5 = (_req_cap_1 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(p, "req_cap");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GetAttribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EAttributeDefinition _attribute = a.getAttribute().getAttribute();
      boolean _tripleNotEquals = (_attribute != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(a, "attribute", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"attribute\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = a.getAttribute().getAttribute().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      String _entity = a.getAttribute().getEntity();
      boolean _tripleNotEquals_1 = (_entity != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(a, "entity", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entity\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _entity_1 = a.getAttribute().getEntity();
        _builder.append(_entity_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EReqOrCap _req_cap = a.getAttribute().getReq_cap();
      boolean _tripleNotEquals_2 = (_req_cap != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(a, "req_cap", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"req_cap\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_1 = a.getAttribute().getReq_cap().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(a, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_3 = this.parameter_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"get_attribute\" ;");
    _builder.newLine();
    {
      EAttributeDefinition _attribute_1 = a.getAttribute().getAttribute();
      boolean _tripleNotEquals_3 = (_attribute_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(a, "attribute");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _entity_2 = a.getAttribute().getEntity();
      boolean _tripleNotEquals_4 = (_entity_2 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(a, "entity");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EReqOrCap _req_cap_1 = a.getAttribute().getReq_cap();
      boolean _tripleNotEquals_5 = (_req_cap_1 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(a, "req_cap");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ECapabilityType c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":CapabilityType_");
    int _plusPlus = this.capabilitytype_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:CapabilityType ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = c.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:derivesFrom \"");
    String _name_1 = c.getCapability().getSuperType().getName();
    _builder.append(_name_1, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = c.getCapability().getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(c.getCapability().getDescription());
        _builder.append(_processDescription);
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = c.getCapability().getProperties();
      boolean _tripleNotEquals_1 = (_properties != null);
      if (_tripleNotEquals_1) {
        {
          EList<EPropertyDefinition> _properties_1 = c.getCapability().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get);
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EAttributes _atributes = c.getCapability().getAtributes();
      boolean _tripleNotEquals_2 = (_atributes != null);
      if (_tripleNotEquals_2) {
        {
          EList<EAttributeDefinition> _attributes = c.getCapability().getAtributes().getAttributes();
          for(final EAttributeDefinition a : _attributes) {
            _builder.append("exchange:attributes :Attribute_");
            Integer _get_1 = this.attribute_numbers.get(a);
            _builder.append(_get_1);
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ERelationshipType r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EValidTargetTypes _valid_target_types = r.getRelationship().getValid_target_types();
      boolean _tripleNotEquals = (_valid_target_types != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(r, "valid_target_types", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"valid_target_types\" ;");
        _builder.newLine();
        {
          EList<ECapabilityTypeRef> _targetTypes = r.getRelationship().getValid_target_types().getTargetTypes();
          for(final ECapabilityTypeRef entry : ((EObjectContainmentEList<ECapabilityTypeRef>) _targetTypes)) {
            _builder.append("  ");
            _builder.append("exchange:listValue \"");
            String _name = entry.getName().getName();
            _builder.append(_name, "  ");
            _builder.append("\" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append(":RelationshipType_");
    int _plusPlus_1 = this.relationship_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:RelationshipType ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name_1 = r.getName();
    _builder.append(_name_1, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:derivesFrom \"");
    String _name_2 = r.getRelationship().getSuperType().getName();
    _builder.append(_name_2, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = r.getRelationship().getDescription();
      boolean _tripleNotEquals_1 = (_description != null);
      if (_tripleNotEquals_1) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(r.getRelationship().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = r.getRelationship().getProperties();
      boolean _tripleNotEquals_2 = (_properties != null);
      if (_tripleNotEquals_2) {
        {
          EList<EPropertyDefinition> _properties_1 = r.getRelationship().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EAttributes _atributes = r.getRelationship().getAtributes();
      boolean _tripleNotEquals_3 = (_atributes != null);
      if (_tripleNotEquals_3) {
        {
          EList<EAttributeDefinition> _attributes = r.getRelationship().getAtributes().getAttributes();
          for(final EAttributeDefinition a : _attributes) {
            _builder.append("  ");
            _builder.append("exchange:attributes :Attribute_");
            Integer _get_1 = this.attribute_numbers.get(a);
            _builder.append(_get_1, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EInterfaces _interfaces = r.getRelationship().getInterfaces();
      boolean _tripleNotEquals_4 = (_interfaces != null);
      if (_tripleNotEquals_4) {
        {
          EList<EInterfaceDefinition> _interfaces_1 = r.getRelationship().getInterfaces().getInterfaces();
          for(final EInterfaceDefinition i : _interfaces_1) {
            _builder.append("  ");
            _builder.append("exchange:interfaces :Interface_");
            Integer _get_2 = this.interface_numbers.get(i);
            _builder.append(_get_2, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EValidTargetTypes _valid_target_types_1 = r.getRelationship().getValid_target_types();
      boolean _tripleNotEquals_5 = (_valid_target_types_1 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(r, "valid_target_types");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ENodeType n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":NodeType_");
    int _plusPlus = this.node_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:NodeType ;");
    _builder.newLine();
    {
      String _description = n.getNode().getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(n.getNode().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = n.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:derivesFrom \"");
    String _name_1 = n.getNode().getSuperType().getName();
    _builder.append(_name_1, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EProperties _properties = n.getNode().getProperties();
      boolean _tripleNotEquals_1 = (_properties != null);
      if (_tripleNotEquals_1) {
        {
          EList<EPropertyDefinition> _properties_1 = n.getNode().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EAttributes _attributes = n.getNode().getAttributes();
      boolean _tripleNotEquals_2 = (_attributes != null);
      if (_tripleNotEquals_2) {
        {
          EList<EAttributeDefinition> _attributes_1 = n.getNode().getAttributes().getAttributes();
          for(final EAttributeDefinition a : _attributes_1) {
            _builder.append("  ");
            _builder.append("exchange:attributes :Attribute_");
            Integer _get_1 = this.attribute_numbers.get(a);
            _builder.append(_get_1, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      ERequirements _requirements = n.getNode().getRequirements();
      boolean _tripleNotEquals_3 = (_requirements != null);
      if (_tripleNotEquals_3) {
        {
          EList<ERequirementDefinition> _requirements_1 = n.getNode().getRequirements().getRequirements();
          for(final ERequirementDefinition r : _requirements_1) {
            _builder.append("  ");
            _builder.append("exchange:requirements :Requirement_");
            Integer _get_2 = this.requirement_numbers.get(r);
            _builder.append(_get_2, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      ECapabilities _capabilities = n.getNode().getCapabilities();
      boolean _tripleNotEquals_4 = (_capabilities != null);
      if (_tripleNotEquals_4) {
        {
          EList<ECapabilityDefinition> _capabilities_1 = n.getNode().getCapabilities().getCapabilities();
          for(final ECapabilityDefinition c : _capabilities_1) {
            _builder.append("  ");
            _builder.append("exchange:capabilities :Capability_");
            Integer _get_3 = this.capability_numbers.get(c);
            _builder.append(_get_3, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EInterfaces _interfaces = n.getNode().getInterfaces();
      boolean _tripleNotEquals_5 = (_interfaces != null);
      if (_tripleNotEquals_5) {
        {
          EList<EInterfaceDefinition> _interfaces_1 = n.getNode().getInterfaces().getInterfaces();
          for(final EInterfaceDefinition i : _interfaces_1) {
            _builder.append("  ");
            _builder.append("exchange:interfaces :Interface_");
            Integer _get_4 = this.interface_numbers.get(i);
            _builder.append(_get_4, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EDataType d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":DataType_");
    int _plusPlus = this.data_type_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:DataType ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = d.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EDataType _superType = d.getData().getSuperType();
      boolean _tripleNotEquals = (_superType != null);
      if (_tripleNotEquals) {
        _builder.append("  ");
        _builder.append("exchange:derivesFrom \"");
        String _name_1 = d.getData().getSuperType().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _description = d.getData().getDescription();
      boolean _tripleNotEquals_1 = (_description != null);
      if (_tripleNotEquals_1) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(d.getData().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = d.getData().getProperties();
      boolean _tripleNotEquals_2 = (_properties != null);
      if (_tripleNotEquals_2) {
        {
          EList<EPropertyDefinition> _properties_1 = d.getData().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EPropertyDefinition p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EDataType _type = p.getProperty().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = p.getProperty().getType().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(p, "required", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_1 = this.parameter_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"required\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    boolean _isRequired = p.getProperty().isRequired();
    _builder.append(_isRequired, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    {
      EValueExpression _default = p.getProperty().getDefault();
      boolean _tripleNotEquals_1 = (_default != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(p, "default", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"default\" ;");
        _builder.newLine();
        {
          EValueExpression _default_1 = p.getProperty().getDefault();
          boolean _tripleNotEquals_2 = (_default_1 != null);
          if (_tripleNotEquals_2) {
            {
              EValueExpression _default_2 = p.getProperty().getDefault();
              if ((_default_2 instanceof EFunction)) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber = this.getParameterNumber(p, "default");
                _builder.append(_parameterNumber, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("  ");
                _builder.append("exchange:value \'");
                CharSequence _compile = this.compile(p.getProperty().getDefault());
                _builder.append(_compile, "  ");
                _builder.append("\' ;\t  ");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      String _status = p.getProperty().getStatus();
      boolean _tripleNotEquals_3 = (_status != null);
      if (_tripleNotEquals_3) {
        this.putParameterNumber(p, "status", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"status\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _status_1 = p.getProperty().getStatus();
        _builder.append(_status_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EDataType _entry_schema = p.getProperty().getEntry_schema();
      boolean _tripleNotEquals_4 = (_entry_schema != null);
      if (_tripleNotEquals_4) {
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_1 = p.getProperty().getEntry_schema().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(p, "entry_schema", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_5 = this.parameter_counter++;
        _builder.append(_plusPlus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entry_schema\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        _builder.append((this.parameter_counter - 2), "  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EConstraints _constraints = p.getProperty().getConstraints();
      boolean _tripleNotEquals_5 = (_constraints != null);
      if (_tripleNotEquals_5) {
        this.putParameterNumber(p, "constraints", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_6 = this.parameter_counter++;
        _builder.append(_plusPlus_6);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"constraints\" ;");
        _builder.newLine();
        {
          EList<EConstraint> _constraints_1 = p.getProperty().getConstraints().getConstraints();
          for(final EConstraint c : _constraints_1) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_1 = this.getParameterNumber(c, "name");
            _builder.append(_parameterNumber_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.newLine();
    Integer _put = this.property_numbers.put(p, Integer.valueOf(this.property_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Property_");
    int _plusPlus_7 = this.property_counter++;
    _builder.append(_plusPlus_7);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Property ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name_2 = p.getName();
    _builder.append(_name_2, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = p.getProperty().getDescription();
      boolean _tripleNotEquals_6 = (_description != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(p.getProperty().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataType _type_1 = p.getProperty().getType();
      boolean _tripleNotEquals_7 = (_type_1 != null);
      if (_tripleNotEquals_7) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(p, "type");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber_3 = this.getParameterNumber(p, "required");
    _builder.append(_parameterNumber_3, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    {
      EValueExpression _default_3 = p.getProperty().getDefault();
      boolean _tripleNotEquals_8 = (_default_3 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(p, "default");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _status_2 = p.getProperty().getStatus();
      boolean _tripleNotEquals_9 = (_status_2 != null);
      if (_tripleNotEquals_9) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_5 = this.getParameterNumber(p, "status");
        _builder.append(_parameterNumber_5, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataType _entry_schema_1 = p.getProperty().getEntry_schema();
      boolean _tripleNotEquals_10 = (_entry_schema_1 != null);
      if (_tripleNotEquals_10) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_6 = this.getParameterNumber(p, "entry_schema");
        _builder.append(_parameterNumber_6, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EConstraints _constraints_2 = p.getProperty().getConstraints();
      boolean _tripleNotEquals_11 = (_constraints_2 != null);
      if (_tripleNotEquals_11) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_7 = this.getParameterNumber(p, "constraints");
        _builder.append(_parameterNumber_7, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EAttributeDefinition a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EDataType _type = a.getAttribute().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(a, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name = a.getAttribute().getType().getName();
        _builder.append(_name, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EValueExpression _default = a.getAttribute().getDefault();
      boolean _tripleNotEquals_1 = (_default != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(a, "default", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"default\" ;");
        _builder.newLine();
        {
          EValueExpression _default_1 = a.getAttribute().getDefault();
          boolean _tripleNotEquals_2 = (_default_1 != null);
          if (_tripleNotEquals_2) {
            {
              EValueExpression _default_2 = a.getAttribute().getDefault();
              if ((_default_2 instanceof EFunction)) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber = this.getParameterNumber(a, "default");
                _builder.append(_parameterNumber, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("  ");
                _builder.append("exchange:value \'");
                CharSequence _compile = this.compile(a.getAttribute().getDefault());
                _builder.append(_compile, "  ");
                _builder.append("\' ;\t  ");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      String _status = a.getAttribute().getStatus();
      boolean _tripleNotEquals_3 = (_status != null);
      if (_tripleNotEquals_3) {
        this.putParameterNumber(a, "status", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"status\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _status_1 = a.getAttribute().getStatus();
        _builder.append(_status_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EDataType _entry_schema = a.getAttribute().getEntry_schema();
      boolean _tripleNotEquals_4 = (_entry_schema != null);
      if (_tripleNotEquals_4) {
        this.putParameterNumber(a, "entry_schema", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entry_schema\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _name_1 = a.getAttribute().getEntry_schema().getName();
        _builder.append(_name_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.attribute_numbers.put(a, Integer.valueOf(this.attribute_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Attribute_");
    int _plusPlus_4 = this.attribute_counter++;
    _builder.append(_plusPlus_4);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Attribute ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name_2 = a.getName();
    _builder.append(_name_2, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = a.getAttribute().getDescription();
      boolean _tripleNotEquals_5 = (_description != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(a.getAttribute().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataType _type_1 = a.getAttribute().getType();
      boolean _tripleNotEquals_6 = (_type_1 != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(a, "type");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EValueExpression _default_3 = a.getAttribute().getDefault();
      boolean _tripleNotEquals_7 = (_default_3 != null);
      if (_tripleNotEquals_7) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(a, "default");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _status_2 = a.getAttribute().getStatus();
      boolean _tripleNotEquals_8 = (_status_2 != null);
      if (_tripleNotEquals_8) {
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(a, "status");
        _builder.append(_parameterNumber_3);
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataType _entry_schema_1 = a.getAttribute().getEntry_schema();
      boolean _tripleNotEquals_9 = (_entry_schema_1 != null);
      if (_tripleNotEquals_9) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(a, "entry_schema");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EValueExpression ve) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = ((ESTRING) ve).getValue();
    _builder.append(_value);
    return _builder;
  }
  
  public void putParameterNumber(final Object entity, final String parameterName, final Integer number) {
    Map<String, Integer> _get = this.parameter_numbers.get(entity);
    boolean _tripleEquals = (_get == null);
    if (_tripleEquals) {
      HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
      this.parameter_numbers.put(entity, _hashMap);
    }
    this.parameter_numbers.get(entity).put(parameterName, number);
  }
  
  public Integer getParameterNumber(final Object entity, final String parameterName) {
    Map<String, Integer> _get = this.parameter_numbers.get(entity);
    boolean _tripleEquals = (_get == null);
    if (_tripleEquals) {
      return null;
    }
    return this.parameter_numbers.get(entity).get(parameterName);
  }
  
  public String getFilename(final URI uri) {
    String filename = uri.toString();
    filename = filename.replace("platform:/resource", "");
    int _indexOf = filename.indexOf(File.separator, 1);
    int _plus = (_indexOf + 1);
    String _replaceFirst = filename.substring(_plus).replaceFirst(File.separator, ".");
    String _plus_1 = (_replaceFirst + ".ttl");
    filename = _plus_1;
    return filename;
  }
  
  public String getName(final Resource resource) {
    return resource.getURI().lastSegment().substring(0, resource.getURI().lastSegment().lastIndexOf("."));
  }
  
  public String readFileAsString(final String path) {
    try {
      byte[] _readAllBytes = Files.readAllBytes(Paths.get(path));
      String content = new String(_readAllBytes);
      return content.replace("\\", "\\\\").replace("\'", "\\\'").replaceAll("[\\n\\r]+", "\\\\n");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String processDescription(final String description) {
    return description.replaceAll("\'", "\\\\\'").replaceAll("[\\n\\r]+", "\\\\n");
  }
}
