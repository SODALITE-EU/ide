/**
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.sodalite.dsl.CustomOutputConfigurationProvider;
import org.sodalite.dsl.rM.EActivityDefinition;
import org.sodalite.dsl.rM.EAlphaNumericValue;
import org.sodalite.dsl.rM.EArtifactDefinition;
import org.sodalite.dsl.rM.EArtifactType;
import org.sodalite.dsl.rM.EArtifacts;
import org.sodalite.dsl.rM.EAssertionDefinition;
import org.sodalite.dsl.rM.EAssignmentValue;
import org.sodalite.dsl.rM.EAttributeDefinition;
import org.sodalite.dsl.rM.EAttributes;
import org.sodalite.dsl.rM.EBOOLEAN;
import org.sodalite.dsl.rM.ECallOperationActivityDefinition;
import org.sodalite.dsl.rM.ECapabilities;
import org.sodalite.dsl.rM.ECapabilityDefinition;
import org.sodalite.dsl.rM.ECapabilityType;
import org.sodalite.dsl.rM.EConditionClauseDefinition;
import org.sodalite.dsl.rM.EConditionClauseDefinitionAND;
import org.sodalite.dsl.rM.EConditionClauseDefinitionAssert;
import org.sodalite.dsl.rM.EConditionClauseDefinitionNOT;
import org.sodalite.dsl.rM.EConditionClauseDefinitionOR;
import org.sodalite.dsl.rM.EConstraint;
import org.sodalite.dsl.rM.EConstraints;
import org.sodalite.dsl.rM.EDataType;
import org.sodalite.dsl.rM.EDataTypeName;
import org.sodalite.dsl.rM.EDependencies;
import org.sodalite.dsl.rM.EEntity;
import org.sodalite.dsl.rM.EEntityReference;
import org.sodalite.dsl.rM.EEqual;
import org.sodalite.dsl.rM.EEvenFilter;
import org.sodalite.dsl.rM.EExtendedTriggerCondition;
import org.sodalite.dsl.rM.EFLOAT;
import org.sodalite.dsl.rM.EFunction;
import org.sodalite.dsl.rM.EGreaterOrEqual;
import org.sodalite.dsl.rM.EGreaterThan;
import org.sodalite.dsl.rM.EImplementation;
import org.sodalite.dsl.rM.EInputs;
import org.sodalite.dsl.rM.EInterfaceDefinition;
import org.sodalite.dsl.rM.EInterfaceType;
import org.sodalite.dsl.rM.EInterfaces;
import org.sodalite.dsl.rM.ELIST;
import org.sodalite.dsl.rM.ELength;
import org.sodalite.dsl.rM.ELessOrEqual;
import org.sodalite.dsl.rM.ELessThan;
import org.sodalite.dsl.rM.EMAP;
import org.sodalite.dsl.rM.EMapEntry;
import org.sodalite.dsl.rM.EMaxLength;
import org.sodalite.dsl.rM.EMinLength;
import org.sodalite.dsl.rM.ENodeType;
import org.sodalite.dsl.rM.EOperationDefinition;
import org.sodalite.dsl.rM.EOperations;
import org.sodalite.dsl.rM.EPREFIX_ID;
import org.sodalite.dsl.rM.EPREFIX_REF;
import org.sodalite.dsl.rM.EPREFIX_TYPE;
import org.sodalite.dsl.rM.EPRIMITIVE_TYPE;
import org.sodalite.dsl.rM.EParameterDefinition;
import org.sodalite.dsl.rM.EPolicyType;
import org.sodalite.dsl.rM.EProperties;
import org.sodalite.dsl.rM.EPropertyAssignment;
import org.sodalite.dsl.rM.EPropertyAssignments;
import org.sodalite.dsl.rM.EPropertyDefinition;
import org.sodalite.dsl.rM.ERelationshipType;
import org.sodalite.dsl.rM.ERequirementDefinition;
import org.sodalite.dsl.rM.ERequirements;
import org.sodalite.dsl.rM.ESIGNEDINT;
import org.sodalite.dsl.rM.ESTRING;
import org.sodalite.dsl.rM.ESingleValue;
import org.sodalite.dsl.rM.ETargetType;
import org.sodalite.dsl.rM.ETriggerDefinition;
import org.sodalite.dsl.rM.ETriggers;
import org.sodalite.dsl.rM.EValidTargetTypes;
import org.sodalite.dsl.rM.EValid_Values;
import org.sodalite.dsl.rM.EValueExpression;
import org.sodalite.dsl.rM.GetArtifact;
import org.sodalite.dsl.rM.GetAttribute;
import org.sodalite.dsl.rM.GetInput;
import org.sodalite.dsl.rM.GetProperty;
import org.sodalite.dsl.rM.RM_Model;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RMGenerator extends AbstractGenerator {
  private int data_type_counter = 1;
  
  private int node_counter = 1;
  
  private int property_counter = 1;
  
  private int attribute_counter = 1;
  
  private int artifact_counter = 1;
  
  private int requirement_counter = 1;
  
  private int capability_counter = 1;
  
  private int capabilitytype_counter = 1;
  
  private int relationship_counter = 1;
  
  private int parameter_counter = 1;
  
  private int interface_counter = 1;
  
  private int interface_type_counter = 1;
  
  private int policy_counter = 1;
  
  private int trigger_counter = 1;
  
  private int operation_counter = 1;
  
  private Map<EPropertyDefinition, Integer> property_numbers;
  
  private Map<EAttributeDefinition, Integer> attribute_numbers;
  
  private Map<EArtifactDefinition, Integer> artifact_numbers;
  
  private Map<ERequirementDefinition, Integer> requirement_numbers;
  
  private Map<ECapabilityDefinition, Integer> capability_numbers;
  
  private Map<EInterfaceDefinition, Integer> interface_numbers;
  
  private Map<Object, Map<String, Integer>> parameter_numbers;
  
  private Map<ETriggerDefinition, Integer> trigger_numbers;
  
  private Map<EOperationDefinition, Integer> operation_numbers;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.data_type_counter = 1;
    this.node_counter = 1;
    this.property_counter = 1;
    this.attribute_counter = 1;
    this.artifact_counter = 1;
    this.requirement_counter = 1;
    this.capability_counter = 1;
    this.capabilitytype_counter = 1;
    this.relationship_counter = 1;
    this.parameter_counter = 1;
    this.interface_counter = 1;
    this.interface_type_counter = 1;
    this.policy_counter = 1;
    this.trigger_counter = 1;
    this.operation_counter = 1;
    HashMap<EPropertyDefinition, Integer> _hashMap = new HashMap<EPropertyDefinition, Integer>();
    this.property_numbers = _hashMap;
    HashMap<EAttributeDefinition, Integer> _hashMap_1 = new HashMap<EAttributeDefinition, Integer>();
    this.attribute_numbers = _hashMap_1;
    HashMap<EArtifactDefinition, Integer> _hashMap_2 = new HashMap<EArtifactDefinition, Integer>();
    this.artifact_numbers = _hashMap_2;
    HashMap<ERequirementDefinition, Integer> _hashMap_3 = new HashMap<ERequirementDefinition, Integer>();
    this.requirement_numbers = _hashMap_3;
    HashMap<ECapabilityDefinition, Integer> _hashMap_4 = new HashMap<ECapabilityDefinition, Integer>();
    this.capability_numbers = _hashMap_4;
    HashMap<Object, Map<String, Integer>> _hashMap_5 = new HashMap<Object, Map<String, Integer>>();
    this.parameter_numbers = _hashMap_5;
    HashMap<EInterfaceDefinition, Integer> _hashMap_6 = new HashMap<EInterfaceDefinition, Integer>();
    this.interface_numbers = _hashMap_6;
    HashMap<ETriggerDefinition, Integer> _hashMap_7 = new HashMap<ETriggerDefinition, Integer>();
    this.trigger_numbers = _hashMap_7;
    HashMap<EOperationDefinition, Integer> _hashMap_8 = new HashMap<EOperationDefinition, Integer>();
    this.operation_numbers = _hashMap_8;
    CancelIndicator _cancelIndicator = context.getCancelIndicator();
    boolean _tripleEquals = (_cancelIndicator == null);
    if (_tripleEquals) {
      String workspaceDir = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString().replaceAll("%20", " ");
      Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      String localPath = resource.getURI().toString().replaceAll("%20", " ").replace("platform:/resource", "");
      String projectName = (localPath.split("/")[1]).replaceAll("%20", " ");
      String absolutePath = (workspaceDir + localPath);
      absolutePath = absolutePath.replace(".rm", "");
      localPath = localPath.replace(".rm", "").replace(("/" + projectName), "");
      Iterable<ENodeType> _filter = Iterables.<ENodeType>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ENodeType.class);
      for (final ENodeType node : _filter) {
        {
          final String nodeType = node.getName();
          Iterable<EInterfaceDefinition> _filter_1 = Iterables.<EInterfaceDefinition>filter(IteratorExtensions.<EObject>toIterable(node.eAllContents()), EInterfaceDefinition.class);
          for (final EInterfaceDefinition interface_ : _filter_1) {
            {
              final String interfaceName = interface_.getName();
              Iterable<EOperationDefinition> _filter_2 = Iterables.<EOperationDefinition>filter(IteratorExtensions.<EObject>toIterable(interface_.getInterface().eAllContents()), EOperationDefinition.class);
              for (final EOperationDefinition op : _filter_2) {
                {
                  final String operationName = op.getName();
                  String AnsiblePath = (((((((absolutePath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName);
                  File ans_file = new File((AnsiblePath + ".ans"));
                  File yaml_file = new File((AnsiblePath + ".yaml"));
                  if ((ans_file.exists() && yaml_file.exists())) {
                    final String[] labels = { "Replace both files", "Replace only .ans file", "Replace only .yaml file", "Do not replace anything" };
                    MessageDialog dialog = new MessageDialog(shell, "Create new Ansible files", null, 
                      (((((((((("In folder " + absolutePath) + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + " exist already a .ans file and a .yaml file for operation ") + operationName) + ". Please select one of the following options."), MessageDialog.QUESTION, labels, 3);
                    int result = dialog.open();
                    if ((result == 0)) {
                      fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".ans"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileAnsibleModel(nodeType, interfaceName, operationName));
                      fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".yaml"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileYAMLAnsible());
                    } else {
                      if ((result == 1)) {
                        fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".ans"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileAnsibleModel(nodeType, interfaceName, operationName));
                      } else {
                        if ((result == 2)) {
                          fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".yaml"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileYAMLAnsible());
                        }
                      }
                    }
                  } else {
                    if ((ans_file.exists() && (!yaml_file.exists()))) {
                      boolean confirmed = MessageDialog.openConfirm(shell, 
                        "Replace .ans implementation file", 
                        (("Abstract implementation file for operation " + operationName) + " already exists.Do you want to replace current implementation file?"));
                      if (confirmed) {
                        fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".ans"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileAnsibleModel(nodeType, interfaceName, operationName));
                      }
                    } else {
                      if (((!ans_file.exists()) && yaml_file.exists())) {
                        boolean confirmed_1 = MessageDialog.openConfirm(shell, 
                          "Replace .yaml implementation file", 
                          (("Concrete implementation file for operation " + operationName) + " already exists.Do you want to replace current implementation file?"));
                        if (confirmed_1) {
                          fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".ans"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileAnsibleModel(nodeType, interfaceName, operationName));
                          fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".yaml"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileYAMLAnsible());
                        }
                      } else {
                        if (((!ans_file.exists()) && (!yaml_file.exists()))) {
                          fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".ans"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileAnsibleModel(nodeType, interfaceName, operationName));
                          fsa.generateFile(((((((((localPath + "-Ansible files") + "/") + nodeType) + "/") + interfaceName) + "/") + operationName) + ".yaml"), CustomOutputConfigurationProvider.ANSIBLE_OUTPUT, this.compileYAMLAnsible());
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    String intermediatePath = resource.getURI().toString().replaceAll("%20", " ").replace("platform:/resource", "");
    String projectName_1 = (intermediatePath.split("/")[1]).replaceAll("%20", " ");
    intermediatePath = intermediatePath.replace(("/" + projectName_1), "");
    fsa.generateFile((intermediatePath + ".ttl"), CustomOutputConfigurationProvider.TURTLE_OUTPUT, this.compileRM(resource));
  }
  
  public CharSequence compileAnsibleModel(final String nodeType, final String interfaceName, final String operationName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("playbook_name:\"");
    _builder.append(interfaceName);
    _builder.append("_interface_");
    _builder.append(operationName);
    _builder.append("_operation\"");
    _builder.newLineIfNotEmpty();
    _builder.append("used_by: ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("node_type:\"");
    _builder.append(nodeType, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("interface:\"");
    _builder.append(interfaceName, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("operation:\"");
    _builder.append(operationName, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("plays:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("play:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("play_name:\"example play\"");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileYAMLAnsible() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("- name: \"example play\"");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRM(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# baseURI: https://www.sodalite.eu/ontologies/exchange/rm/");
    _builder.newLine();
    _builder.append("# imports: https://www.sodalite.eu/ontologies/exchange/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@prefix : <https://www.sodalite.eu/ontologies/exchange/rm/> .");
    _builder.newLine();
    _builder.append("@prefix exchange: <https://www.sodalite.eu/ontologies/exchange/> .");
    _builder.newLine();
    _builder.append("@prefix owl: <http://www.w3.org/2002/07/owl#> .");
    _builder.newLine();
    _builder.append("@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .");
    _builder.newLine();
    _builder.append("@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .");
    _builder.newLine();
    _builder.append("@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("rdf:type owl:Ontology ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("owl:imports exchange: ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("owl:versionInfo \"Created by the SODALITE IDE\" ;");
    _builder.newLine();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    {
      Iterable<EConstraint> _filter = Iterables.<EConstraint>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EConstraint.class);
      for(final EConstraint c : _filter) {
        CharSequence _compile = this.compile(c);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<GetProperty> _filter_1 = Iterables.<GetProperty>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), GetProperty.class);
      for(final GetProperty p : _filter_1) {
        CharSequence _compile_1 = this.compile(p);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<GetAttribute> _filter_2 = Iterables.<GetAttribute>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), GetAttribute.class);
      for(final GetAttribute a : _filter_2) {
        CharSequence _compile_2 = this.compile(a);
        _builder.append(_compile_2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<GetArtifact> _filter_3 = Iterables.<GetArtifact>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), GetArtifact.class);
      for(final GetArtifact a_1 : _filter_3) {
        CharSequence _compile_3 = this.compile(a_1);
        _builder.append(_compile_3);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<GetInput> _filter_4 = Iterables.<GetInput>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), GetInput.class);
      for(final GetInput i : _filter_4) {
        CharSequence _compile_4 = this.compile(i);
        _builder.append(_compile_4);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EParameterDefinition> _filter_5 = Iterables.<EParameterDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EParameterDefinition.class);
      for(final EParameterDefinition p_1 : _filter_5) {
        CharSequence _compile_5 = this.compile(p_1);
        _builder.append(_compile_5);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EOperationDefinition> _filter_6 = Iterables.<EOperationDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EOperationDefinition.class);
      for(final EOperationDefinition o : _filter_6) {
        CharSequence _compile_6 = this.compile(o);
        _builder.append(_compile_6);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EPropertyDefinition> _filter_7 = Iterables.<EPropertyDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EPropertyDefinition.class);
      for(final EPropertyDefinition p_2 : _filter_7) {
        CharSequence _compile_7 = this.compile(p_2);
        _builder.append(_compile_7);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EPropertyAssignment> _filter_8 = Iterables.<EPropertyAssignment>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EPropertyAssignment.class);
      for(final EPropertyAssignment p_3 : _filter_8) {
        CharSequence _compile_8 = this.compile(p_3);
        _builder.append(_compile_8);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ETriggerDefinition> _filter_9 = Iterables.<ETriggerDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ETriggerDefinition.class);
      for(final ETriggerDefinition t : _filter_9) {
        CharSequence _compile_9 = this.compile(t);
        _builder.append(_compile_9);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EAttributeDefinition> _filter_10 = Iterables.<EAttributeDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EAttributeDefinition.class);
      for(final EAttributeDefinition a_2 : _filter_10) {
        CharSequence _compile_10 = this.compile(a_2);
        _builder.append(_compile_10);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EArtifactDefinition> _filter_11 = Iterables.<EArtifactDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EArtifactDefinition.class);
      for(final EArtifactDefinition a_3 : _filter_11) {
        CharSequence _compile_11 = this.compile(a_3);
        _builder.append(_compile_11);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EInterfaceDefinition> _filter_12 = Iterables.<EInterfaceDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EInterfaceDefinition.class);
      for(final EInterfaceDefinition i_1 : _filter_12) {
        CharSequence _compile_12 = this.compile(i_1);
        _builder.append(_compile_12);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ECapabilityDefinition> _filter_13 = Iterables.<ECapabilityDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ECapabilityDefinition.class);
      for(final ECapabilityDefinition cap : _filter_13) {
        CharSequence _compile_13 = this.compile(cap);
        _builder.append(_compile_13);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ERequirementDefinition> _filter_14 = Iterables.<ERequirementDefinition>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ERequirementDefinition.class);
      for(final ERequirementDefinition req : _filter_14) {
        CharSequence _compile_14 = this.compile(req);
        _builder.append(_compile_14);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ENodeType> _filter_15 = Iterables.<ENodeType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ENodeType.class);
      for(final ENodeType n : _filter_15) {
        CharSequence _compile_15 = this.compile(n);
        _builder.append(_compile_15);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EDataType> _filter_16 = Iterables.<EDataType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EDataType.class);
      for(final EDataType d : _filter_16) {
        CharSequence _compile_16 = this.compile(d);
        _builder.append(_compile_16);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EArtifactType> _filter_17 = Iterables.<EArtifactType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EArtifactType.class);
      for(final EArtifactType a_4 : _filter_17) {
        CharSequence _compile_17 = this.compile(a_4);
        _builder.append(_compile_17);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ECapabilityType> _filter_18 = Iterables.<ECapabilityType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ECapabilityType.class);
      for(final ECapabilityType c_1 : _filter_18) {
        CharSequence _compile_18 = this.compile(c_1);
        _builder.append(_compile_18);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<ERelationshipType> _filter_19 = Iterables.<ERelationshipType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), ERelationshipType.class);
      for(final ERelationshipType rt : _filter_19) {
        CharSequence _compile_19 = this.compile(rt);
        _builder.append(_compile_19);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EPolicyType> _filter_20 = Iterables.<EPolicyType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EPolicyType.class);
      for(final EPolicyType p_4 : _filter_20) {
        CharSequence _compile_20 = this.compile(p_4);
        _builder.append(_compile_20);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<EInterfaceType> _filter_21 = Iterables.<EInterfaceType>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), EInterfaceType.class);
      for(final EInterfaceType i_2 : _filter_21) {
        CharSequence _compile_21 = this.compile(i_2);
        _builder.append(_compile_21);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Iterable<RM_Model> _filter_22 = Iterables.<RM_Model>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), RM_Model.class);
      for(final RM_Model m : _filter_22) {
        CharSequence _compile_22 = this.compile(m);
        _builder.append(_compile_22);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final RM_Model m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":RM_1");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("rdf:type exchange:RM ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:userId \"27827d44-0f6c-11ea-8d71-362b9e155667\" ;");
    _builder.newLine();
    {
      String _description = m.getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("  ");
        _builder.append("exchange:description \"");
        String _description_1 = m.getDescription();
        _builder.append(_description_1, "  ");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EConstraint c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((c instanceof EValid_Values)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"valid_values\" ;");
        _builder.newLine();
        {
          EList<EAlphaNumericValue> _list = ((EValid_Values)c).getVal().getList();
          for(final EAlphaNumericValue v : _list) {
            _builder.append("  ");
            _builder.append("exchange:listValue \"");
            String _trim = this.trim(this.compile(v));
            _builder.append(_trim, "  ");
            _builder.append("\" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EMinLength)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"min_length\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_1 = this.trim(this.compile(((EMinLength)c).getVal()));
        _builder.append(_trim_1, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EGreaterThan)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"greater_than\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_2 = this.trim(this.compile(((EGreaterThan)c).getVal()));
        _builder.append(_trim_2, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EEqual)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"equal\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_3 = this.trim(this.compile(((EEqual)c).getVal()));
        _builder.append(_trim_3, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EGreaterOrEqual)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"greater_or_equal\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_4 = this.trim(this.compile(((EGreaterOrEqual)c).getVal()));
        _builder.append(_trim_4, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof ELessThan)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_5 = this.parameter_counter++;
        _builder.append(_plusPlus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"less_than\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_5 = this.trim(this.compile(((ELessThan)c).getVal()));
        _builder.append(_trim_5, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof ELessOrEqual)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_6 = this.parameter_counter++;
        _builder.append(_plusPlus_6);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"less_or_equal\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_6 = this.trim(this.compile(((ELessOrEqual)c).getVal()));
        _builder.append(_trim_6, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof ELength)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_7 = this.parameter_counter++;
        _builder.append(_plusPlus_7);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"length\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_7 = this.trim(this.compile(((ELength)c).getVal()));
        _builder.append(_trim_7, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    {
      if ((c instanceof EMaxLength)) {
        this.putParameterNumber(c, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_8 = this.parameter_counter++;
        _builder.append(_plusPlus_8);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"max_length\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \"");
        String _trim_8 = this.trim(this.compile(((EMaxLength)c).getVal()));
        _builder.append(_trim_8, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".\t\t");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ERequirementDefinition r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPREFIX_TYPE _capability = r.getRequirement().getCapability();
      boolean _tripleNotEquals = (_capability != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(r, "capability", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"capability\" ;");
        _builder.newLine();
        {
          String _module = r.getRequirement().getCapability().getModule();
          boolean _tripleNotEquals_1 = (_module != null);
          if (_tripleNotEquals_1) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _module_1 = r.getRequirement().getCapability().getModule();
            _builder.append(_module_1, "  ");
            _builder.append("/");
            String _type = r.getRequirement().getCapability().getType();
            _builder.append(_type, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _type_1 = r.getRequirement().getCapability().getType();
            _builder.append(_type_1, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EPREFIX_TYPE _node = r.getRequirement().getNode();
      boolean _tripleNotEquals_2 = (_node != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(r, "node", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"node\" ;");
        _builder.newLine();
        {
          String _module_2 = r.getRequirement().getNode().getModule();
          boolean _tripleNotEquals_3 = (_module_2 != null);
          if (_tripleNotEquals_3) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _module_3 = r.getRequirement().getNode().getModule();
            _builder.append(_module_3, "  ");
            _builder.append("/");
            String _type_2 = r.getRequirement().getNode().getType();
            _builder.append(_type_2, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _type_3 = r.getRequirement().getNode().getType();
            _builder.append(_type_3, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EPREFIX_TYPE _relationship = r.getRequirement().getRelationship();
      boolean _tripleNotEquals_4 = (_relationship != null);
      if (_tripleNotEquals_4) {
        this.putParameterNumber(r, "relationship", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"relationship\" ;\t  ");
        _builder.newLine();
        {
          String _module_4 = r.getRequirement().getRelationship().getModule();
          boolean _tripleNotEquals_5 = (_module_4 != null);
          if (_tripleNotEquals_5) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _module_5 = r.getRequirement().getRelationship().getModule();
            _builder.append(_module_5, "  ");
            _builder.append("/");
            String _type_4 = r.getRequirement().getRelationship().getType();
            _builder.append(_type_4, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _type_5 = r.getRequirement().getRelationship().getType();
            _builder.append(_type_5, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      if (((r.getRequirement().getStart() != null) && (r.getRequirement().getEnd() != null))) {
        this.putParameterNumber(r, "min", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:SodaliteParameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"min\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(r.getRequirement().getStart()));
        _builder.append(_trim, "  ");
        _builder.append("\' ;  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(r, "max", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:SodaliteParameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"max\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_1 = this.trim(this.compile(r.getRequirement().getEnd()));
        _builder.append(_trim_1, "  ");
        _builder.append("\' ;  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(r, "occurrences", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_5 = this.parameter_counter++;
        _builder.append(_plusPlus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"occurrences\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(r, "min");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(r, "max");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.requirement_numbers.put(r, Integer.valueOf(this.requirement_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Requirement_");
    int _plusPlus_6 = this.requirement_counter++;
    _builder.append(_plusPlus_6);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Requirement ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = r.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_TYPE _capability_1 = r.getRequirement().getCapability();
      boolean _tripleNotEquals_6 = (_capability_1 != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(r, "capability");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_TYPE _node_1 = r.getRequirement().getNode();
      boolean _tripleNotEquals_7 = (_node_1 != null);
      if (_tripleNotEquals_7) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(r, "node");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_TYPE _relationship_1 = r.getRequirement().getRelationship();
      boolean _tripleNotEquals_8 = (_relationship_1 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(r, "relationship");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((r.getRequirement().getStart() != null) && (r.getRequirement().getEnd() != null))) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_5 = this.getParameterNumber(r, "occurrences");
        _builder.append(_parameterNumber_5, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ECapabilityDefinition c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPREFIX_TYPE _type = c.getCapability().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(c, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(c.getCapability().getType()));
        _builder.append(_trim, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      if (((c.getCapability().getValid_source_types() != null) && (!c.getCapability().getValid_source_types().getSourceTypes().isEmpty()))) {
        this.putParameterNumber(c, "valid_source_types", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"valid_source_types\" ;");
        _builder.newLine();
        {
          EList<EPREFIX_TYPE> _sourceTypes = c.getCapability().getValid_source_types().getSourceTypes();
          for(final EPREFIX_TYPE s : _sourceTypes) {
            {
              String _module = s.getModule();
              boolean _tripleNotEquals_1 = (_module != null);
              if (_tripleNotEquals_1) {
                _builder.append("  ");
                _builder.append("exchange:listValue \"");
                String _module_1 = s.getModule();
                _builder.append(_module_1, "  ");
                _builder.append("/");
                String _type_1 = s.getType();
                _builder.append(_type_1, "  ");
                _builder.append("\" ;");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("  ");
                _builder.append("exchange:listValue \"");
                String _type_2 = s.getType();
                _builder.append(_type_2, "  ");
                _builder.append("\" ;");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      if (((c.getCapability().getOccurrences_start() != null) && (c.getCapability().getOccurrences_end() != null))) {
        this.putParameterNumber(c, "min", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:SodaliteParameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"min\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_1 = this.trim(this.compile(c.getCapability().getOccurrences_start()));
        _builder.append(_trim_1, "  ");
        _builder.append("\' ;  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(c, "max", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:SodaliteParameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"max\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_2 = this.trim(this.compile(c.getCapability().getOccurrences_end()));
        _builder.append(_trim_2, "  ");
        _builder.append("\' ;  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(c, "occurrences", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"occurrences\" ;\t  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(c, "min");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(c, "max");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.capability_numbers.put(c, Integer.valueOf(this.capability_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Capability_");
    int _plusPlus_5 = this.capability_counter++;
    _builder.append(_plusPlus_5);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Capability ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = c.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = c.getCapability().getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(c.getCapability().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_TYPE _type_3 = c.getCapability().getType();
      boolean _tripleNotEquals_3 = (_type_3 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(c, "type");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((c.getCapability().getValid_source_types() != null) && (!c.getCapability().getValid_source_types().getSourceTypes().isEmpty()))) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(c, "valid_source_types");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((c.getCapability().getOccurrences_start() != null) && (c.getCapability().getOccurrences_end() != null))) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(c, "occurrences");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EInterfaceDefinition i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EPREFIX_TYPE _type = i.getInterface().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(i, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(i.getInterface().getType()));
        _builder.append(_trim, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EOperations _operations = i.getInterface().getOperations();
      boolean _tripleNotEquals_1 = (_operations != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(i, "operations", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"operations\" ;");
        _builder.newLine();
        {
          EList<EOperationDefinition> _operations_1 = i.getInterface().getOperations().getOperations();
          for(final EOperationDefinition op : _operations_1) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber = this.getParameterNumber(op, "name");
            _builder.append(_parameterNumber, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EProperties _inputs = i.getInterface().getInputs();
      boolean _tripleNotEquals_2 = (_inputs != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(i, "inputs", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"inputs\" ;");
        _builder.newLine();
        {
          EList<EPropertyDefinition> _properties = i.getInterface().getInputs().getProperties();
          for(final EPropertyDefinition prop : _properties) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_1 = this.getParameterNumber(prop, "name");
            _builder.append(_parameterNumber_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.interface_numbers.put(i, Integer.valueOf(this.interface_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Interface_");
    int _plusPlus_3 = this.interface_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Interface ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = i.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_TYPE _type_1 = i.getInterface().getType();
      boolean _tripleNotEquals_3 = (_type_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(i, "type");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _inputs_1 = i.getInterface().getInputs();
      boolean _tripleNotEquals_4 = (_inputs_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(i, "inputs");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EOperations _operations_2 = i.getInterface().getOperations();
      boolean _tripleNotEquals_5 = (_operations_2 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(i, "operations");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EOperationDefinition o) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EImplementation _implementation = o.getOperation().getImplementation();
      boolean _tripleNotEquals = (_implementation != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(o, "primary.path", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"path\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _file = o.getOperation().getImplementation().getPrimary().getFile();
        _builder.append(_file, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(o, "primary.content", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"content\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _readImplementationFileAsString = this.readImplementationFileAsString(o.getOperation().getImplementation().getPrimary().getFile(), o.getOperation().getImplementation().getPrimary().eResource());
        _builder.append(_readImplementationFileAsString, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        {
          String _relative_path = o.getOperation().getImplementation().getPrimary().getRelative_path();
          boolean _tripleNotEquals_1 = (_relative_path != null);
          if (_tripleNotEquals_1) {
            this.putParameterNumber(o, "primary.relative_path", Integer.valueOf(this.parameter_counter));
            _builder.newLineIfNotEmpty();
            _builder.append(":Parameter_");
            int _plusPlus_2 = this.parameter_counter++;
            _builder.append(_plusPlus_2);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("rdf:type exchange:Parameter ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:name \"relative_path\" ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:value \'");
            String _relative_path_1 = o.getOperation().getImplementation().getPrimary().getRelative_path();
            _builder.append(_relative_path_1, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
            _builder.append(".");
            _builder.newLine();
          }
        }
        _builder.newLine();
        String content = this.readImplementationFileAsString(o.getOperation().getImplementation().getPrimary().getFile().replace(".yaml", ".ans"), o.getOperation().getImplementation().getPrimary().eResource());
        _builder.newLineIfNotEmpty();
        {
          if ((content != null)) {
            this.putParameterNumber(o, "primary.Ansible_model.content", Integer.valueOf(this.parameter_counter));
            _builder.newLineIfNotEmpty();
            _builder.append(":Parameter_");
            int _plusPlus_3 = this.parameter_counter++;
            _builder.append(_plusPlus_3);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("rdf:type exchange:Parameter ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:name \"content\" ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:value \'");
            _builder.append(content, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
            _builder.append(".  ");
            _builder.newLine();
            this.putParameterNumber(o, "primary.Ansible_model", Integer.valueOf(this.parameter_counter));
            _builder.newLineIfNotEmpty();
            _builder.append(":Parameter_");
            int _plusPlus_4 = this.parameter_counter++;
            _builder.append(_plusPlus_4);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("rdf:type exchange:Parameter ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:name \"Ansible_model\" ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber = this.getParameterNumber(o, "primary.Ansible_model.content");
            _builder.append(_parameterNumber, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
            _builder.append(" ");
            _builder.append(".");
            _builder.newLine();
          }
        }
        _builder.newLine();
        this.putParameterNumber(o, "primary", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_5 = this.parameter_counter++;
        _builder.append(_plusPlus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"primary\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(o, "primary.path");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(o, "primary.content");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        {
          Integer _parameterNumber_3 = this.getParameterNumber(o, "primary.Ansible_model");
          boolean _tripleNotEquals_2 = (_parameterNumber_3 != null);
          if (_tripleNotEquals_2) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_4 = this.getParameterNumber(o, "primary.Ansible_model");
            _builder.append(_parameterNumber_4, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _relative_path_2 = o.getOperation().getImplementation().getPrimary().getRelative_path();
          boolean _tripleNotEquals_3 = (_relative_path_2 != null);
          if (_tripleNotEquals_3) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_5 = this.getParameterNumber(o, "primary.relative_path");
            _builder.append(_parameterNumber_5, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        {
          EDependencies _dependencies = o.getOperation().getImplementation().getDependencies();
          boolean _tripleNotEquals_4 = (_dependencies != null);
          if (_tripleNotEquals_4) {
            {
              EList<String> _files = o.getOperation().getImplementation().getDependencies().getFiles().getFiles();
              for(final String d : _files) {
                this.putParameterNumber(d, "file.path", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_6 = this.parameter_counter++;
                _builder.append(_plusPlus_6);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"path\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:value \'");
                _builder.append(d, "  ");
                _builder.append("\' ; ");
                _builder.newLineIfNotEmpty();
                _builder.append(" ");
                _builder.append(".");
                _builder.newLine();
                _builder.newLine();
                this.putParameterNumber(d, "file.content", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_7 = this.parameter_counter++;
                _builder.append(_plusPlus_7);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"content\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:value \'");
                String _readFileAsString = this.readFileAsString(d);
                _builder.append(_readFileAsString, "  ");
                _builder.append("\' ;");
                _builder.newLineIfNotEmpty();
                _builder.append(".");
                _builder.newLine();
                _builder.newLine();
                this.putParameterNumber(d, "file", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_8 = this.parameter_counter++;
                _builder.append(_plusPlus_8);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"file\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_6 = this.getParameterNumber(d, "file.path");
                _builder.append(_parameterNumber_6, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_7 = this.getParameterNumber(d, "file.content");
                _builder.append(_parameterNumber_7, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
                _builder.append(".");
                _builder.newLine();
              }
            }
            _builder.newLine();
            {
              String _relative_path_3 = o.getOperation().getImplementation().getDependencies().getRelative_path();
              boolean _tripleNotEquals_5 = (_relative_path_3 != null);
              if (_tripleNotEquals_5) {
                this.putParameterNumber(o, "dependencies.relative_path", Integer.valueOf(this.parameter_counter));
                _builder.newLineIfNotEmpty();
                _builder.append(":Parameter_");
                int _plusPlus_9 = this.parameter_counter++;
                _builder.append(_plusPlus_9);
                _builder.newLineIfNotEmpty();
                _builder.append("  ");
                _builder.append("rdf:type exchange:Parameter ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:name \"relative_path\" ;");
                _builder.newLine();
                _builder.append("  ");
                _builder.append("exchange:value \'");
                String _relative_path_4 = o.getOperation().getImplementation().getDependencies().getRelative_path();
                _builder.append(_relative_path_4, "  ");
                _builder.append("\' ;");
                _builder.newLineIfNotEmpty();
                _builder.append(".");
                _builder.newLine();
              }
            }
            _builder.newLine();
            this.putParameterNumber(o, "dependencies", Integer.valueOf(this.parameter_counter));
            _builder.newLineIfNotEmpty();
            _builder.append(":Parameter_");
            int _plusPlus_10 = this.parameter_counter++;
            _builder.append(_plusPlus_10);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("rdf:type exchange:Parameter ;");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("exchange:name \"dependencies\" ;");
            _builder.newLine();
            {
              EList<String> _files_1 = o.getOperation().getImplementation().getDependencies().getFiles().getFiles();
              for(final String d_1 : _files_1) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_8 = this.getParameterNumber(d_1, "file");
                _builder.append(_parameterNumber_8, "  ");
                _builder.append(" ; ");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _relative_path_5 = o.getOperation().getImplementation().getDependencies().getRelative_path();
              boolean _tripleNotEquals_6 = (_relative_path_5 != null);
              if (_tripleNotEquals_6) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber_9 = this.getParameterNumber(o, "dependencies.relative_path");
                _builder.append(_parameterNumber_9, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append(".");
            _builder.newLine();
          }
        }
        _builder.newLine();
        this.putParameterNumber(o, "implementation", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_11 = this.parameter_counter++;
        _builder.append(_plusPlus_11);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"implementation\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_10 = this.getParameterNumber(o, "primary");
        _builder.append(_parameterNumber_10, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        {
          EDependencies _dependencies_1 = o.getOperation().getImplementation().getDependencies();
          boolean _tripleNotEquals_7 = (_dependencies_1 != null);
          if (_tripleNotEquals_7) {
            _builder.append(" ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_11 = this.getParameterNumber(o, "dependencies");
            _builder.append(_parameterNumber_11, " ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EInputs _inputs = o.getOperation().getInputs();
      boolean _tripleNotEquals_8 = (_inputs != null);
      if (_tripleNotEquals_8) {
        this.putParameterNumber(o, "inputs", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_12 = this.parameter_counter++;
        _builder.append(_plusPlus_12);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"inputs\" ;");
        _builder.newLine();
        {
          EList<EParameterDefinition> _parameters = o.getOperation().getInputs().getParameters();
          for(final EParameterDefinition i : _parameters) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_12 = this.getParameterNumber(i, "name");
            _builder.append(_parameterNumber_12, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EObject _eContainer = o.eContainer().eContainer().eContainer();
      if ((_eContainer instanceof EInterfaceDefinition)) {
        this.putParameterNumber(o, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_13 = this.parameter_counter++;
        _builder.append(_plusPlus_13);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
      } else {
        EObject _eContainer_1 = o.eContainer().eContainer().eContainer();
        if ((_eContainer_1 instanceof EInterfaceType)) {
          Integer _put = this.operation_numbers.put(o, Integer.valueOf(this.operation_counter));
          _builder.append(_put);
          _builder.newLineIfNotEmpty();
          _builder.append(":Operation_");
          int _plusPlus_14 = this.operation_counter++;
          _builder.append(_plusPlus_14);
          _builder.newLineIfNotEmpty();
          _builder.append("  ");
          _builder.append("rdf:type exchange:Operation ;");
          _builder.newLine();
        }
      }
    }
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = o.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = o.getOperation().getDescription();
      boolean _tripleNotEquals_9 = (_description != null);
      if (_tripleNotEquals_9) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(o.getOperation().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EInputs _inputs_1 = o.getOperation().getInputs();
      boolean _tripleNotEquals_10 = (_inputs_1 != null);
      if (_tripleNotEquals_10) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_13 = this.getParameterNumber(o, "inputs");
        _builder.append(_parameterNumber_13, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EImplementation _implementation_1 = o.getOperation().getImplementation();
      boolean _tripleNotEquals_11 = (_implementation_1 != null);
      if (_tripleNotEquals_11) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_14 = this.getParameterNumber(o, "implementation");
        _builder.append(_parameterNumber_14, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EParameterDefinition p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EDataTypeName _type = p.getParameter().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(p.getParameter().getType()));
        _builder.append(_trim, "  ");
        _builder.append("\' ;  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EValueExpression _value = p.getParameter().getValue();
      boolean _tripleNotEquals_1 = (_value != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(p, "value", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"value\" ;");
        _builder.newLine();
        {
          EValueExpression _value_1 = p.getParameter().getValue();
          if ((_value_1 instanceof EFunction)) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber = this.getParameterNumber(p.getParameter().getValue(), "name");
            _builder.append(_parameterNumber, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            EValueExpression _value_2 = p.getParameter().getValue();
            if ((_value_2 instanceof ESingleValue)) {
              _builder.append("  ");
              _builder.append("exchange:value \"");
              EValueExpression _value_3 = p.getParameter().getValue();
              String _trim_1 = this.trim(this.compile(((ESingleValue) _value_3)).toString());
              _builder.append(_trim_1, "  ");
              _builder.append("\" ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EValueExpression _default = p.getParameter().getDefault();
      boolean _tripleNotEquals_2 = (_default != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(p, "default", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"default\" ;");
        _builder.newLine();
        {
          EValueExpression _default_1 = p.getParameter().getDefault();
          if ((_default_1 instanceof EFunction)) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_1 = this.getParameterNumber(p.getParameter().getDefault(), "name");
            _builder.append(_parameterNumber_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            EValueExpression _default_2 = p.getParameter().getDefault();
            if ((_default_2 instanceof ESingleValue)) {
              _builder.append("  ");
              _builder.append("exchange:value \"");
              EValueExpression _default_3 = p.getParameter().getDefault();
              String _trim_2 = this.trim(this.compile(((ESingleValue) _default_3)).toString());
              _builder.append(_trim_2, "  ");
              _builder.append("\" ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(p, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_3 = this.parameter_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = p.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EDataTypeName _type_1 = p.getParameter().getType();
      boolean _tripleNotEquals_3 = (_type_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(p, "type");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ; ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EValueExpression _value_4 = p.getParameter().getValue();
      boolean _tripleNotEquals_4 = (_value_4 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(p, "value");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EValueExpression _default_4 = p.getParameter().getDefault();
      boolean _tripleNotEquals_5 = (_default_4 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(p, "default");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EConditionClauseDefinition ccd) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((ccd instanceof EConditionClauseDefinitionNOT)) {
        Object _compile = this.compile(((EConditionClauseDefinitionNOT) ccd).getNot());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((ccd instanceof EConditionClauseDefinitionAND)) {
          Object _compile_1 = this.compile(((EConditionClauseDefinitionAND) ccd).getAnd());
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        } else {
          if ((ccd instanceof EConditionClauseDefinitionOR)) {
            Object _compile_2 = this.compile(((EConditionClauseDefinitionOR) ccd).getOr());
            _builder.append(_compile_2);
            _builder.newLineIfNotEmpty();
          } else {
            if ((ccd instanceof EConditionClauseDefinitionAssert)) {
              {
                EList<EAssertionDefinition> _assertions = ((EConditionClauseDefinitionAssert)ccd).getAssertions();
                for(final EAssertionDefinition assertion : _assertions) {
                  CharSequence _compile_3 = this.compile(assertion);
                  _builder.append(_compile_3);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    {
      String _name = this.getName(ccd);
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(ccd, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"");
        String _name_1 = this.getName(ccd);
        _builder.append(_name_1, "  ");
        _builder.append("\" ;");
        _builder.newLineIfNotEmpty();
        {
          EConditionClauseDefinition _child = this.getChild(ccd);
          if ((_child instanceof EConditionClauseDefinitionAssert)) {
            {
              EConditionClauseDefinition _child_1 = this.getChild(ccd);
              EList<EAssertionDefinition> _assertions_1 = ((EConditionClauseDefinitionAssert) _child_1).getAssertions();
              for(final EAssertionDefinition assertion_1 : _assertions_1) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber = this.getParameterNumber(assertion_1, "name");
                _builder.append(_parameterNumber, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_1 = this.getParameterNumber(this.getChild(ccd), "name");
            _builder.append(_parameterNumber_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public String getName(final EConditionClauseDefinition ccd) {
    if ((ccd instanceof EConditionClauseDefinitionNOT)) {
      return "not";
    } else {
      if ((ccd instanceof EConditionClauseDefinitionAND)) {
        return "and";
      } else {
        if ((ccd instanceof EConditionClauseDefinitionOR)) {
          return "or";
        } else {
          return null;
        }
      }
    }
  }
  
  public EConditionClauseDefinition getChild(final EConditionClauseDefinition ccd) {
    if ((ccd instanceof EConditionClauseDefinitionNOT)) {
      return ((EConditionClauseDefinitionNOT) ccd).getNot();
    } else {
      if ((ccd instanceof EConditionClauseDefinitionAND)) {
        return ((EConditionClauseDefinitionAND) ccd).getAnd();
      } else {
        if ((ccd instanceof EConditionClauseDefinitionOR)) {
          return ((EConditionClauseDefinitionOR) ccd).getOr();
        } else {
          return null;
        }
      }
    }
  }
  
  public CharSequence compile(final EAssertionDefinition ad) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EConstraint> _list = ad.getConstraints().getList();
      for(final EConstraint constraint : _list) {
        CharSequence _compile = this.compile(constraint);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    this.putParameterNumber(ad, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _attribute_name = ad.getAttribute_name();
    _builder.append(_attribute_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EList<EConstraint> _list_1 = ad.getConstraints().getList();
      for(final EConstraint constraint_1 : _list_1) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(constraint_1, "name");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EActivityDefinition ad, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      if ((ad instanceof ECallOperationActivityDefinition)) {
        CharSequence _compile = this.compile(((ECallOperationActivityDefinition) ad));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    this.putParameterNumber(ad, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    _builder.append(name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      if ((ad instanceof ECallOperationActivityDefinition)) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(ad, "call_operation");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ECallOperationActivityDefinition ad) {
    StringConcatenation _builder = new StringConcatenation();
    this.putParameterNumber(ad, "operation", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"operation\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    String _trim = this.trim(this.compile(ad.getOperation().getOperation()));
    _builder.append(_trim, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    this.putParameterNumber(ad, "inputs", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_1 = this.parameter_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"inputs\" ;");
    _builder.newLine();
    {
      EPropertyAssignments _inputs = ad.getOperation().getInputs();
      boolean _tripleNotEquals = (_inputs != null);
      if (_tripleNotEquals) {
        {
          EList<EPropertyAssignment> _properties = ad.getOperation().getInputs().getProperties();
          for(final EPropertyAssignment i : _properties) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber = this.getParameterNumber(i, "name");
            _builder.append(_parameterNumber, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    this.putParameterNumber(ad, "call_operation", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_2 = this.parameter_counter++;
    _builder.append(_plusPlus_2);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"call_operation\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber_1 = this.getParameterNumber(ad, "operation");
    _builder.append(_parameterNumber_1, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    {
      if ((ad instanceof ECallOperationActivityDefinition)) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(ad, "inputs");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EEvenFilter ef, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    this.putParameterNumber(ef, "node", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"node\" ;  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    String _trim = this.trim(this.compile(ef.getNode()));
    _builder.append(_trim, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    this.putParameterNumber(ef, "requirement", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_REF _requirement = ef.getRequirement();
      boolean _tripleNotEquals = (_requirement != null);
      if (_tripleNotEquals) {
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"requirement\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_1 = this.trim(this.compile(ef.getRequirement()));
        _builder.append(_trim_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(ef, "capability", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_REF _capability = ef.getCapability();
      boolean _tripleNotEquals_1 = (_capability != null);
      if (_tripleNotEquals_1) {
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"capability\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_2 = this.trim(this.compile(ef.getCapability()));
        _builder.append(_trim_2, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(ef, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_3 = this.parameter_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    _builder.append(name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber = this.getParameterNumber(ef, "node");
    _builder.append(_parameterNumber, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_REF _requirement_1 = ef.getRequirement();
      boolean _tripleNotEquals_2 = (_requirement_1 != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(ef, "requirement");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_REF _capability_1 = ef.getCapability();
      boolean _tripleNotEquals_3 = (_capability_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(ef, "capability");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GetProperty p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPREFIX_REF _property = p.getProperty().getProperty();
      boolean _tripleNotEquals = (_property != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "property", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"property\" ;  ");
        _builder.newLine();
        {
          EPREFIX_REF _property_1 = p.getProperty().getProperty();
          if ((_property_1 instanceof EPREFIX_TYPE)) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            EPREFIX_REF _property_2 = p.getProperty().getProperty();
            String _lastSegment = this.lastSegment(((EPREFIX_TYPE) _property_2).getType(), ".");
            _builder.append(_lastSegment, "  ");
            _builder.append("\' ; ");
            _builder.newLineIfNotEmpty();
          } else {
            EPREFIX_REF _property_3 = p.getProperty().getProperty();
            if ((_property_3 instanceof EPREFIX_ID)) {
              _builder.append("  ");
              _builder.append("exchange:value \'");
              EPREFIX_REF _property_4 = p.getProperty().getProperty();
              String _lastSegment_1 = this.lastSegment(((EPREFIX_ID) _property_4).getId(), ".");
              _builder.append(_lastSegment_1, "  ");
              _builder.append("\' ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EEntityReference _entity = p.getProperty().getEntity();
      boolean _tripleNotEquals_1 = (_entity != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(p, "entity", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entity\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(p.getProperty().getEntity()));
        _builder.append(_trim, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EPREFIX_REF _req_cap = p.getProperty().getReq_cap();
      boolean _tripleNotEquals_2 = (_req_cap != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(p, "req_cap", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"req_cap\" ;  ");
        _builder.newLine();
        {
          EPREFIX_REF _req_cap_1 = p.getProperty().getReq_cap();
          if ((_req_cap_1 instanceof EPREFIX_TYPE)) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            EPREFIX_REF _req_cap_2 = p.getProperty().getReq_cap();
            String _lastSegment_2 = this.lastSegment(((EPREFIX_TYPE) _req_cap_2).getType(), ".");
            _builder.append(_lastSegment_2, "  ");
            _builder.append("\' ; ");
            _builder.newLineIfNotEmpty();
          } else {
            EPREFIX_REF _property_5 = p.getProperty().getProperty();
            if ((_property_5 instanceof EPREFIX_ID)) {
              _builder.append("  ");
              _builder.append("exchange:value \'");
              EPREFIX_REF _req_cap_3 = p.getProperty().getReq_cap();
              String _lastSegment_3 = this.lastSegment(((EPREFIX_ID) _req_cap_3).getId(), ".");
              _builder.append(_lastSegment_3, "  ");
              _builder.append("\' ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(p, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_3 = this.parameter_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"get_property\" ;");
    _builder.newLine();
    {
      EPREFIX_REF _property_6 = p.getProperty().getProperty();
      boolean _tripleNotEquals_3 = (_property_6 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(p, "property");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EEntityReference _entity_1 = p.getProperty().getEntity();
      boolean _tripleNotEquals_4 = (_entity_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(p, "entity");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_REF _req_cap_4 = p.getProperty().getReq_cap();
      boolean _tripleNotEquals_5 = (_req_cap_4 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(p, "req_cap");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GetAttribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPREFIX_REF _attribute = a.getAttribute().getAttribute();
      boolean _tripleNotEquals = (_attribute != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(a, "attribute", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"attribute\" ;  ");
        _builder.newLine();
        {
          EPREFIX_REF _attribute_1 = a.getAttribute().getAttribute();
          if ((_attribute_1 instanceof EPREFIX_TYPE)) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            EPREFIX_REF _attribute_2 = a.getAttribute().getAttribute();
            String _lastSegment = this.lastSegment(((EPREFIX_TYPE) _attribute_2).getType(), ".");
            _builder.append(_lastSegment, "  ");
            _builder.append("\' ; ");
            _builder.newLineIfNotEmpty();
          } else {
            EPREFIX_REF _attribute_3 = a.getAttribute().getAttribute();
            if ((_attribute_3 instanceof EPREFIX_ID)) {
              _builder.append("  ");
              _builder.append("exchange:value \'");
              EPREFIX_REF _attribute_4 = a.getAttribute().getAttribute();
              String _lastSegment_1 = this.lastSegment(((EPREFIX_ID) _attribute_4).getId(), ".");
              _builder.append(_lastSegment_1, "  ");
              _builder.append("\' ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EEntityReference _entity = a.getAttribute().getEntity();
      boolean _tripleNotEquals_1 = (_entity != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(a, "entity", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entity\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(a.getAttribute().getEntity()));
        _builder.append(_trim, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EPREFIX_REF _req_cap = a.getAttribute().getReq_cap();
      boolean _tripleNotEquals_2 = (_req_cap != null);
      if (_tripleNotEquals_2) {
        this.putParameterNumber(a, "req_cap", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"req_cap\" ;  ");
        _builder.newLine();
        {
          EPREFIX_REF _req_cap_1 = a.getAttribute().getReq_cap();
          if ((_req_cap_1 instanceof EPREFIX_TYPE)) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            EPREFIX_REF _req_cap_2 = a.getAttribute().getReq_cap();
            String _lastSegment_2 = this.lastSegment(((EPREFIX_TYPE) _req_cap_2).getType(), ".");
            _builder.append(_lastSegment_2, "  ");
            _builder.append("\' ; ");
            _builder.newLineIfNotEmpty();
          } else {
            EPREFIX_REF _attribute_5 = a.getAttribute().getAttribute();
            if ((_attribute_5 instanceof EPREFIX_ID)) {
              _builder.append("  ");
              _builder.append("exchange:value \'");
              EPREFIX_REF _req_cap_3 = a.getAttribute().getReq_cap();
              String _lastSegment_3 = this.lastSegment(((EPREFIX_ID) _req_cap_3).getId(), ".");
              _builder.append(_lastSegment_3, "  ");
              _builder.append("\' ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(a, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_3 = this.parameter_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"get_attribute\" ;");
    _builder.newLine();
    {
      EPREFIX_REF _attribute_6 = a.getAttribute().getAttribute();
      boolean _tripleNotEquals_3 = (_attribute_6 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(a, "attribute");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EEntityReference _entity_1 = a.getAttribute().getEntity();
      boolean _tripleNotEquals_4 = (_entity_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(a, "entity");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_REF _req_cap_4 = a.getAttribute().getReq_cap();
      boolean _tripleNotEquals_5 = (_req_cap_4 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(a, "req_cap");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GetArtifact a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPREFIX_REF _artifact = a.getArtifact().getArtifact();
      boolean _tripleNotEquals = (_artifact != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(a, "artifact", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"artifact\" ;  ");
        _builder.newLine();
        {
          EPREFIX_REF _artifact_1 = a.getArtifact().getArtifact();
          if ((_artifact_1 instanceof EPREFIX_TYPE)) {
            _builder.append("  ");
            _builder.append("exchange:value \'");
            EPREFIX_REF _artifact_2 = a.getArtifact().getArtifact();
            String _lastSegment = this.lastSegment(((EPREFIX_TYPE) _artifact_2).getType(), ".");
            _builder.append(_lastSegment, "  ");
            _builder.append("\' ; ");
            _builder.newLineIfNotEmpty();
          } else {
            EPREFIX_REF _artifact_3 = a.getArtifact().getArtifact();
            if ((_artifact_3 instanceof EPREFIX_ID)) {
              _builder.append("  ");
              _builder.append("exchange:value \'");
              EPREFIX_REF _artifact_4 = a.getArtifact().getArtifact();
              String _lastSegment_1 = this.lastSegment(((EPREFIX_ID) _artifact_4).getId(), ".");
              _builder.append(_lastSegment_1, "  ");
              _builder.append("\' ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EEntityReference _entity = a.getArtifact().getEntity();
      boolean _tripleNotEquals_1 = (_entity != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(a, "entity", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entity\" ;  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(a.getArtifact().getEntity()));
        _builder.append(_trim, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(a, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_2 = this.parameter_counter++;
    _builder.append(_plusPlus_2);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"get_artifact\" ;");
    _builder.newLine();
    {
      EPREFIX_REF _artifact_5 = a.getArtifact().getArtifact();
      boolean _tripleNotEquals_2 = (_artifact_5 != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(a, "artifact");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EEntityReference _entity_1 = a.getArtifact().getEntity();
      boolean _tripleNotEquals_3 = (_entity_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(a, "entity");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GetInput gi) {
    StringConcatenation _builder = new StringConcatenation();
    this.putParameterNumber(gi, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"get_input\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \"");
    String _name = gi.getInput().getName();
    _builder.append(_name, "  ");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ECapabilityType c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":CapabilityType_");
    int _plusPlus = this.capabilitytype_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = c.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_TYPE _superType = c.getCapability().getSuperType();
      boolean _tripleNotEquals = (_superType != null);
      if (_tripleNotEquals) {
        {
          String _module = c.getCapability().getSuperType().getModule();
          boolean _tripleNotEquals_1 = (_module != null);
          if (_tripleNotEquals_1) {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _module_1 = c.getCapability().getSuperType().getModule();
            _builder.append(_module_1, "  ");
            _builder.append("/");
            String _type = c.getCapability().getSuperType().getType();
            _builder.append(_type, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _type_1 = c.getCapability().getSuperType().getType();
            _builder.append(_type_1, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _description = c.getCapability().getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(c.getCapability().getDescription());
        _builder.append(_processDescription);
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = c.getCapability().getProperties();
      boolean _tripleNotEquals_3 = (_properties != null);
      if (_tripleNotEquals_3) {
        {
          EList<EPropertyDefinition> _properties_1 = c.getCapability().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get);
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EAttributes _atributes = c.getCapability().getAtributes();
      boolean _tripleNotEquals_4 = (_atributes != null);
      if (_tripleNotEquals_4) {
        {
          EList<EAttributeDefinition> _attributes = c.getCapability().getAtributes().getAttributes();
          for(final EAttributeDefinition a : _attributes) {
            _builder.append("exchange:attributes :Attribute_");
            Integer _get_1 = this.attribute_numbers.get(a);
            _builder.append(_get_1);
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ERelationshipType r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EValidTargetTypes _valid_target_types = r.getRelationship().getValid_target_types();
      boolean _tripleNotEquals = (_valid_target_types != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(r, "valid_target_types", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"valid_target_types\" ;");
        _builder.newLine();
        {
          EList<ETargetType> _targetTypes = r.getRelationship().getValid_target_types().getTargetTypes();
          for(final ETargetType entry : ((EObjectContainmentEList<ETargetType>) _targetTypes)) {
            {
              String _module = entry.getName().getModule();
              boolean _tripleNotEquals_1 = (_module != null);
              if (_tripleNotEquals_1) {
                _builder.append("  ");
                _builder.append("exchange:listValue \'");
                String _module_1 = entry.getName().getModule();
                _builder.append(_module_1, "  ");
                _builder.append("/");
                String _type = entry.getName().getType();
                _builder.append(_type, "  ");
                _builder.append("\' ; ");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("  ");
                _builder.append("exchange:listValue \"");
                String _type_1 = entry.getName().getType();
                _builder.append(_type_1, "  ");
                _builder.append("\" ; ");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append(":RelationshipType_");
    int _plusPlus_1 = this.relationship_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = r.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_TYPE _superType = r.getRelationship().getSuperType();
      boolean _tripleNotEquals_2 = (_superType != null);
      if (_tripleNotEquals_2) {
        {
          String _module_2 = r.getRelationship().getSuperType().getModule();
          boolean _tripleNotEquals_3 = (_module_2 != null);
          if (_tripleNotEquals_3) {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _module_3 = r.getRelationship().getSuperType().getModule();
            _builder.append(_module_3, "  ");
            _builder.append("/");
            String _type_2 = r.getRelationship().getSuperType().getType();
            _builder.append(_type_2, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _type_3 = r.getRelationship().getSuperType().getType();
            _builder.append(_type_3, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _description = r.getRelationship().getDescription();
      boolean _tripleNotEquals_4 = (_description != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(r.getRelationship().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = r.getRelationship().getProperties();
      boolean _tripleNotEquals_5 = (_properties != null);
      if (_tripleNotEquals_5) {
        {
          EList<EPropertyDefinition> _properties_1 = r.getRelationship().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EAttributes _atributes = r.getRelationship().getAtributes();
      boolean _tripleNotEquals_6 = (_atributes != null);
      if (_tripleNotEquals_6) {
        {
          EList<EAttributeDefinition> _attributes = r.getRelationship().getAtributes().getAttributes();
          for(final EAttributeDefinition a : _attributes) {
            _builder.append("  ");
            _builder.append("exchange:attributes :Attribute_");
            Integer _get_1 = this.attribute_numbers.get(a);
            _builder.append(_get_1, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EInterfaces _interfaces = r.getRelationship().getInterfaces();
      boolean _tripleNotEquals_7 = (_interfaces != null);
      if (_tripleNotEquals_7) {
        {
          EList<EInterfaceDefinition> _interfaces_1 = r.getRelationship().getInterfaces().getInterfaces();
          for(final EInterfaceDefinition i : _interfaces_1) {
            _builder.append("  ");
            _builder.append("exchange:interfaces :Interface_");
            Integer _get_2 = this.interface_numbers.get(i);
            _builder.append(_get_2, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EValidTargetTypes _valid_target_types_1 = r.getRelationship().getValid_target_types();
      boolean _tripleNotEquals_8 = (_valid_target_types_1 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(r, "valid_target_types");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ENodeType n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":NodeType_");
    int _plusPlus = this.node_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    {
      String _description = n.getNode().getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(n.getNode().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = n.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_TYPE _superType = n.getNode().getSuperType();
      boolean _tripleNotEquals_1 = (_superType != null);
      if (_tripleNotEquals_1) {
        {
          String _module = n.getNode().getSuperType().getModule();
          boolean _tripleNotEquals_2 = (_module != null);
          if (_tripleNotEquals_2) {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _module_1 = n.getNode().getSuperType().getModule();
            _builder.append(_module_1, "  ");
            _builder.append("/");
            String _type = n.getNode().getSuperType().getType();
            _builder.append(_type, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _type_1 = n.getNode().getSuperType().getType();
            _builder.append(_type_1, "  ");
            _builder.append("\' ;  ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EProperties _properties = n.getNode().getProperties();
      boolean _tripleNotEquals_3 = (_properties != null);
      if (_tripleNotEquals_3) {
        {
          EList<EPropertyDefinition> _properties_1 = n.getNode().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EAttributes _attributes = n.getNode().getAttributes();
      boolean _tripleNotEquals_4 = (_attributes != null);
      if (_tripleNotEquals_4) {
        {
          EList<EAttributeDefinition> _attributes_1 = n.getNode().getAttributes().getAttributes();
          for(final EAttributeDefinition a : _attributes_1) {
            _builder.append("  ");
            _builder.append("exchange:attributes :Attribute_");
            Integer _get_1 = this.attribute_numbers.get(a);
            _builder.append(_get_1, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      ERequirements _requirements = n.getNode().getRequirements();
      boolean _tripleNotEquals_5 = (_requirements != null);
      if (_tripleNotEquals_5) {
        {
          EList<ERequirementDefinition> _requirements_1 = n.getNode().getRequirements().getRequirements();
          for(final ERequirementDefinition r : _requirements_1) {
            _builder.append("  ");
            _builder.append("exchange:requirements :Requirement_");
            Integer _get_2 = this.requirement_numbers.get(r);
            _builder.append(_get_2, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      ECapabilities _capabilities = n.getNode().getCapabilities();
      boolean _tripleNotEquals_6 = (_capabilities != null);
      if (_tripleNotEquals_6) {
        {
          EList<ECapabilityDefinition> _capabilities_1 = n.getNode().getCapabilities().getCapabilities();
          for(final ECapabilityDefinition c : _capabilities_1) {
            _builder.append("  ");
            _builder.append("exchange:capabilities :Capability_");
            Integer _get_3 = this.capability_numbers.get(c);
            _builder.append(_get_3, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EInterfaces _interfaces = n.getNode().getInterfaces();
      boolean _tripleNotEquals_7 = (_interfaces != null);
      if (_tripleNotEquals_7) {
        {
          EList<EInterfaceDefinition> _interfaces_1 = n.getNode().getInterfaces().getInterfaces();
          for(final EInterfaceDefinition i : _interfaces_1) {
            _builder.append("  ");
            _builder.append("exchange:interfaces :Interface_");
            Integer _get_4 = this.interface_numbers.get(i);
            _builder.append(_get_4, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EArtifacts _artifacts = n.getNode().getArtifacts();
      boolean _tripleNotEquals_8 = (_artifacts != null);
      if (_tripleNotEquals_8) {
        {
          EList<EArtifactDefinition> _artifacts_1 = n.getNode().getArtifacts().getArtifacts();
          for(final EArtifactDefinition a_1 : _artifacts_1) {
            _builder.append("  ");
            _builder.append("exchange:artifacts :Artifact_");
            Integer _get_5 = this.artifact_numbers.get(a_1);
            _builder.append(_get_5, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EDataType d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":DataType_");
    int _plusPlus = this.data_type_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _trim = this.trim(this.compile(d.getName()));
    _builder.append(_trim, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EDataTypeName _superType = d.getData().getSuperType();
      boolean _tripleNotEquals = (_superType != null);
      if (_tripleNotEquals) {
        _builder.append("  ");
        _builder.append("exchange:derivesFrom \'");
        String _trim_1 = this.trim(this.compile(d.getData().getSuperType()));
        _builder.append(_trim_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _description = d.getData().getDescription();
      boolean _tripleNotEquals_1 = (_description != null);
      if (_tripleNotEquals_1) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(d.getData().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = d.getData().getProperties();
      boolean _tripleNotEquals_2 = (_properties != null);
      if (_tripleNotEquals_2) {
        {
          EList<EPropertyDefinition> _properties_1 = d.getData().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EArtifactType a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      ELIST _file_ext = a.getArtifact().getFile_ext();
      boolean _tripleNotEquals = (_file_ext != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(a, "file_ext", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        {
          EList<EAlphaNumericValue> _list = a.getArtifact().getFile_ext().getList();
          for(final EAlphaNumericValue ext : _list) {
            _builder.append("  ");
            _builder.append("exchange:listValue \"");
            String _trim = this.trim(this.compile(ext));
            _builder.append(_trim, "  ");
            _builder.append("\" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append(":ArtifactType_");
    int _plusPlus_1 = this.data_type_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = a.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EPREFIX_TYPE _superType = a.getArtifact().getSuperType();
      boolean _tripleNotEquals_1 = (_superType != null);
      if (_tripleNotEquals_1) {
        _builder.append("  ");
        _builder.append("exchange:derivesFrom \'");
        String _trim_1 = this.trim(this.compile(a.getArtifact().getSuperType()));
        _builder.append(_trim_1, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _description = a.getArtifact().getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(a.getArtifact().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _mime_type = a.getArtifact().getMime_type();
      boolean _tripleNotEquals_3 = (_mime_type != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:mime_type \'");
        String _mime_type_1 = a.getArtifact().getMime_type();
        _builder.append(_mime_type_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ELIST _file_ext_1 = a.getArtifact().getFile_ext();
      boolean _tripleNotEquals_4 = (_file_ext_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:file_ext :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(a, "file_ext");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EProperties _properties = a.getArtifact().getProperties();
      boolean _tripleNotEquals_5 = (_properties != null);
      if (_tripleNotEquals_5) {
        {
          EList<EPropertyDefinition> _properties_1 = a.getArtifact().getProperties().getProperties();
          for(final EPropertyDefinition p : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(p);
            _builder.append(_get, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EPolicyType p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EValidTargetTypes _targets = p.getPolicy().getTargets();
      boolean _tripleNotEquals = (_targets != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "targets", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        {
          EList<ETargetType> _targetTypes = p.getPolicy().getTargets().getTargetTypes();
          for(final ETargetType entry : ((EObjectContainmentEList<ETargetType>) _targetTypes)) {
            {
              String _module = entry.getName().getModule();
              boolean _tripleNotEquals_1 = (_module != null);
              if (_tripleNotEquals_1) {
                _builder.append("  ");
                _builder.append("exchange:listValue \'");
                String _module_1 = entry.getName().getModule();
                _builder.append(_module_1, "  ");
                _builder.append("/");
                String _type = entry.getName().getType();
                _builder.append(_type, "  ");
                _builder.append("\' ; ");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("  ");
                _builder.append("exchange:listValue \"");
                String _type_1 = entry.getName().getType();
                _builder.append(_type_1, "  ");
                _builder.append("\" ; ");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append(":PolicyType_");
    int _plusPlus_1 = this.policy_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = p.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = p.getPolicy().getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(p.getPolicy().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_TYPE _superType = p.getPolicy().getSuperType();
      boolean _tripleNotEquals_3 = (_superType != null);
      if (_tripleNotEquals_3) {
        {
          String _module_2 = p.getPolicy().getSuperType().getModule();
          boolean _tripleNotEquals_4 = (_module_2 != null);
          if (_tripleNotEquals_4) {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _module_3 = p.getPolicy().getSuperType().getModule();
            _builder.append(_module_3, "  ");
            _builder.append("/");
            String _type_2 = p.getPolicy().getSuperType().getType();
            _builder.append(_type_2, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _type_3 = p.getPolicy().getSuperType().getType();
            _builder.append(_type_3, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EProperties _properties = p.getPolicy().getProperties();
      boolean _tripleNotEquals_5 = (_properties != null);
      if (_tripleNotEquals_5) {
        {
          EList<EPropertyDefinition> _properties_1 = p.getPolicy().getProperties().getProperties();
          for(final EPropertyDefinition prop : _properties_1) {
            _builder.append("  ");
            _builder.append("exchange:properties :Property_");
            Integer _get = this.property_numbers.get(prop);
            _builder.append(_get, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EValidTargetTypes _targets_1 = p.getPolicy().getTargets();
      boolean _tripleNotEquals_6 = (_targets_1 != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:targets :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(p, "targets");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ETriggers _triggers = p.getPolicy().getTriggers();
      boolean _tripleNotEquals_7 = (_triggers != null);
      if (_tripleNotEquals_7) {
        {
          EList<ETriggerDefinition> _triggers_1 = p.getPolicy().getTriggers().getTriggers();
          for(final ETriggerDefinition t : _triggers_1) {
            _builder.append("  ");
            _builder.append("exchange:triggers :Trigger_");
            Integer _get_1 = this.trigger_numbers.get(t);
            _builder.append(_get_1, "  ");
            _builder.append(" ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EInterfaceType i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":InterfaceType_");
    int _plusPlus = this.interface_type_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Type ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = i.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = i.getInterface().getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(i.getInterface().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPREFIX_TYPE _superType = i.getInterface().getSuperType();
      boolean _tripleNotEquals_1 = (_superType != null);
      if (_tripleNotEquals_1) {
        {
          String _module = i.getInterface().getSuperType().getModule();
          boolean _tripleNotEquals_2 = (_module != null);
          if (_tripleNotEquals_2) {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _module_1 = i.getInterface().getSuperType().getModule();
            _builder.append(_module_1, "  ");
            _builder.append("/");
            String _type = i.getInterface().getSuperType().getType();
            _builder.append(_type, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("  ");
            _builder.append("exchange:derivesFrom \'");
            String _type_1 = i.getInterface().getSuperType().getType();
            _builder.append(_type_1, "  ");
            _builder.append("\' ;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EProperties _inputs = i.getInterface().getInputs();
      boolean _tripleNotEquals_3 = (_inputs != null);
      if (_tripleNotEquals_3) {
        {
          EList<EPropertyDefinition> _properties = i.getInterface().getInputs().getProperties();
          for(final EPropertyDefinition prop : _properties) {
            _builder.append("  ");
            _builder.append("exchange:inputs :Property_");
            Integer _get = this.property_numbers.get(prop);
            _builder.append(_get, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EOperations _operations = i.getInterface().getOperations();
      boolean _tripleNotEquals_4 = (_operations != null);
      if (_tripleNotEquals_4) {
        {
          EList<EOperationDefinition> _operations_1 = i.getInterface().getOperations().getOperations();
          for(final EOperationDefinition op : _operations_1) {
            _builder.append("  ");
            _builder.append("exchange:operations :Operation_");
            Integer _get_1 = this.operation_numbers.get(op);
            _builder.append(_get_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EPropertyDefinition p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EDataTypeName _type = p.getProperty().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(p, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(p.getProperty().getType()));
        _builder.append(_trim, "  ");
        _builder.append("\' ;  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(p, "required", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_1 = this.parameter_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"required\" ;");
    _builder.newLine();
    {
      EBOOLEAN _required = p.getProperty().getRequired();
      boolean _notEquals = (!Objects.equal(_required, null));
      if (_notEquals) {
        _builder.append("  ");
        _builder.append("exchange:value \'");
        boolean _isValue = p.getProperty().getRequired().isValue();
        _builder.append(_isValue, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("  ");
        _builder.append("exchange:value \'true\' ;");
        _builder.newLine();
      }
    }
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    {
      EAssignmentValue _default = p.getProperty().getDefault();
      boolean _tripleNotEquals_1 = (_default != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(p, "default", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"default\" ;");
        _builder.newLine();
        {
          EAssignmentValue _default_1 = p.getProperty().getDefault();
          boolean _tripleNotEquals_2 = (_default_1 != null);
          if (_tripleNotEquals_2) {
            {
              EAssignmentValue _default_2 = p.getProperty().getDefault();
              if ((_default_2 instanceof ELIST)) {
                {
                  EAssignmentValue _default_3 = p.getProperty().getDefault();
                  EList<EAlphaNumericValue> _list = ((ELIST) _default_3).getList();
                  for(final EAlphaNumericValue entry : _list) {
                    _builder.append("  ");
                    _builder.append("exchange:listValue \"");
                    String _trim_1 = this.trim(this.compile(entry).toString());
                    _builder.append(_trim_1, "  ");
                    _builder.append("\" ;");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                EAssignmentValue _default_4 = p.getProperty().getDefault();
                if ((_default_4 instanceof EFunction)) {
                  _builder.append("  ");
                  _builder.append("exchange:hasParameter :Parameter_");
                  Integer _parameterNumber = this.getParameterNumber(p.getProperty().getDefault(), "name");
                  _builder.append(_parameterNumber, "  ");
                  _builder.append(" ;");
                  _builder.newLineIfNotEmpty();
                } else {
                  EAssignmentValue _default_5 = p.getProperty().getDefault();
                  if ((_default_5 instanceof ESingleValue)) {
                    _builder.append("  ");
                    _builder.append("exchange:value \"");
                    EAssignmentValue _default_6 = p.getProperty().getDefault();
                    String _trim_2 = this.trim(this.compile(((ESingleValue) _default_6)).toString());
                    _builder.append(_trim_2, "  ");
                    _builder.append("\" ;");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      String _status = p.getProperty().getStatus();
      boolean _tripleNotEquals_3 = (_status != null);
      if (_tripleNotEquals_3) {
        this.putParameterNumber(p, "status", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"status\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _status_1 = p.getProperty().getStatus();
        _builder.append(_status_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EDataTypeName _entry_schema = p.getProperty().getEntry_schema();
      boolean _tripleNotEquals_4 = (_entry_schema != null);
      if (_tripleNotEquals_4) {
        _builder.append(":Parameter_");
        int _plusPlus_4 = this.parameter_counter++;
        _builder.append(_plusPlus_4);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_3 = this.trim(this.compile(p.getProperty().getEntry_schema()));
        _builder.append(_trim_3, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
        _builder.newLine();
        this.putParameterNumber(p, "entry_schema", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_5 = this.parameter_counter++;
        _builder.append(_plusPlus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entry_schema\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        _builder.append((this.parameter_counter - 2), "  ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EConstraints _constraints = p.getProperty().getConstraints();
      boolean _tripleNotEquals_5 = (_constraints != null);
      if (_tripleNotEquals_5) {
        this.putParameterNumber(p, "constraints", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_6 = this.parameter_counter++;
        _builder.append(_plusPlus_6);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"constraints\" ;");
        _builder.newLine();
        {
          EList<EConstraint> _constraints_1 = p.getProperty().getConstraints().getConstraints();
          for(final EConstraint c : _constraints_1) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_1 = this.getParameterNumber(c, "name");
            _builder.append(_parameterNumber_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EObject _eContainer = p.eContainer().eContainer().eContainer();
      if ((_eContainer instanceof EInterfaceDefinition)) {
        this.putParameterNumber(p, "name", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_7 = this.parameter_counter++;
        _builder.append(_plusPlus_7);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
      } else {
        Integer _put = this.property_numbers.put(p, Integer.valueOf(this.property_counter));
        _builder.append(_put);
        _builder.newLineIfNotEmpty();
        _builder.append(":Property_");
        int _plusPlus_8 = this.property_counter++;
        _builder.append(_plusPlus_8);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Property ;");
        _builder.newLine();
      }
    }
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = p.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = p.getProperty().getDescription();
      boolean _tripleNotEquals_6 = (_description != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(p.getProperty().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataTypeName _type_1 = p.getProperty().getType();
      boolean _tripleNotEquals_7 = (_type_1 != null);
      if (_tripleNotEquals_7) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(p, "type");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber_3 = this.getParameterNumber(p, "required");
    _builder.append(_parameterNumber_3, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    {
      EAssignmentValue _default_7 = p.getProperty().getDefault();
      boolean _tripleNotEquals_8 = (_default_7 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(p, "default");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _status_2 = p.getProperty().getStatus();
      boolean _tripleNotEquals_9 = (_status_2 != null);
      if (_tripleNotEquals_9) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_5 = this.getParameterNumber(p, "status");
        _builder.append(_parameterNumber_5, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataTypeName _entry_schema_1 = p.getProperty().getEntry_schema();
      boolean _tripleNotEquals_10 = (_entry_schema_1 != null);
      if (_tripleNotEquals_10) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_6 = this.getParameterNumber(p, "entry_schema");
        _builder.append(_parameterNumber_6, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EConstraints _constraints_2 = p.getProperty().getConstraints();
      boolean _tripleNotEquals_11 = (_constraints_2 != null);
      if (_tripleNotEquals_11) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_7 = this.getParameterNumber(p, "constraints");
        _builder.append(_parameterNumber_7, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EPropertyAssignment p) {
    StringConcatenation _builder = new StringConcatenation();
    this.putParameterNumber(p, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = p.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EAssignmentValue _value = p.getValue();
      if ((_value instanceof ELIST)) {
        {
          EAssignmentValue _value_1 = p.getValue();
          EList<EAlphaNumericValue> _list = ((ELIST) _value_1).getList();
          for(final EAlphaNumericValue entry : _list) {
            _builder.append("  ");
            _builder.append("exchange:listValue \"");
            String _trim = this.trim(this.compile(entry).toString());
            _builder.append(_trim, "  ");
            _builder.append("\" ;");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        EAssignmentValue _value_2 = p.getValue();
        if ((_value_2 instanceof EMAP)) {
          {
            EAssignmentValue _value_3 = p.getValue();
            EList<EMapEntry> _map = ((EMAP) _value_3).getMap();
            for(final EMapEntry entry_1 : _map) {
              _builder.append("  ");
              _builder.append("exchange:hasParameter :Parameter_");
              Integer _parameterNumber = this.getParameterNumber(entry_1, "map");
              _builder.append(_parameterNumber, "  ");
              _builder.append(" ;");
              _builder.newLineIfNotEmpty();
            }
          }
        } else {
          EAssignmentValue _value_4 = p.getValue();
          if ((_value_4 instanceof EFunction)) {
            _builder.append("  ");
            _builder.append("exchange:hasParameter :Parameter_");
            Integer _parameterNumber_1 = this.getParameterNumber(p.getValue(), "name");
            _builder.append(_parameterNumber_1, "  ");
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            EAssignmentValue _value_5 = p.getValue();
            if ((_value_5 instanceof ESingleValue)) {
              _builder.append("  ");
              _builder.append("exchange:value \"");
              EAssignmentValue _value_6 = p.getValue();
              String _trim_1 = this.trim(this.compile(((ESingleValue) _value_6)).toString());
              _builder.append(_trim_1, "  ");
              _builder.append("\" ;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ETriggerDefinition t) {
    StringConcatenation _builder = new StringConcatenation();
    this.putParameterNumber(t, "event", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"event\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    String _event = t.getTrigger().getEvent();
    _builder.append(_event, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    {
      EEvenFilter _target_filter = t.getTrigger().getTarget_filter();
      boolean _tripleNotEquals = (_target_filter != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(t.getTrigger().getTarget_filter(), "target_filter");
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.newLine();
    {
      EExtendedTriggerCondition _condition = t.getTrigger().getCondition();
      boolean _tripleNotEquals_1 = (_condition != null);
      if (_tripleNotEquals_1) {
        CharSequence _compile_1 = this.compile(t.getTrigger().getCondition(), "condition");
        _builder.append(_compile_1);
        _builder.append("  ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<EActivityDefinition> _list = t.getTrigger().getAction().getList();
      for(final EActivityDefinition action : _list) {
        CharSequence _compile_2 = this.compile(action, "action");
        _builder.append(_compile_2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    Integer _put = this.trigger_numbers.put(t, Integer.valueOf(this.trigger_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Trigger_");
    int _plusPlus_1 = this.trigger_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Trigger ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = t.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = t.getTrigger().getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(t.getTrigger().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber = this.getParameterNumber(t, "event");
    _builder.append(_parameterNumber, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    {
      EEvenFilter _target_filter_1 = t.getTrigger().getTarget_filter();
      boolean _tripleNotEquals_3 = (_target_filter_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(t.getTrigger().getTarget_filter(), "name");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EExtendedTriggerCondition _condition_1 = t.getTrigger().getCondition();
      boolean _tripleNotEquals_4 = (_condition_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(t.getTrigger().getCondition(), "name");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<EActivityDefinition> _list_1 = t.getTrigger().getAction().getList();
      for(final EActivityDefinition action_1 : _list_1) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(action_1, "name");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EExtendedTriggerCondition etc, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EConditionClauseDefinition _constraint = etc.getConstraint();
      boolean _tripleNotEquals = (_constraint != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(etc.getConstraint());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EConditionClauseDefinition _constraint_1 = etc.getConstraint();
      boolean _tripleNotEquals_1 = (_constraint_1 != null);
      if (_tripleNotEquals_1) {
        _builder.append("  ");
        this.putParameterNumber(etc, "constraint", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus, "  ");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"constraint\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber = this.getParameterNumber(etc.getConstraint(), "name");
        _builder.append(_parameterNumber, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.append("  ");
    this.putParameterNumber(etc, "period", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    {
      String _period = etc.getPeriod();
      boolean _tripleNotEquals_2 = (_period != null);
      if (_tripleNotEquals_2) {
        _builder.append("  ");
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1, "  ");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"period\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value ");
        String _period_1 = etc.getPeriod();
        _builder.append(_period_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(".");
        _builder.newLine();
      }
    }
    {
      ESIGNEDINT _evaluations = etc.getEvaluations();
      boolean _tripleNotEquals_3 = (_evaluations != null);
      if (_tripleNotEquals_3) {
        _builder.append("  ");
        this.putParameterNumber(etc, "evaluations", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2, "  ");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"evaluations\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value ");
        int _value = etc.getEvaluations().getValue();
        _builder.append(_value, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(".");
        _builder.newLine();
      }
    }
    {
      String _method = etc.getMethod();
      boolean _tripleNotEquals_4 = (_method != null);
      if (_tripleNotEquals_4) {
        _builder.append("  ");
        this.putParameterNumber(etc, "method", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3, "  ");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"method\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value ");
        String _method_1 = etc.getMethod();
        _builder.append(_method_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    this.putParameterNumber(etc, "name", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_4 = this.parameter_counter++;
    _builder.append(_plusPlus_4);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    _builder.append(name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      EConditionClauseDefinition _constraint_2 = etc.getConstraint();
      boolean _tripleNotEquals_5 = (_constraint_2 != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(etc, "constraint");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _period_2 = etc.getPeriod();
      boolean _tripleNotEquals_6 = (_period_2 != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(etc, "period");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ESIGNEDINT _evaluations_1 = etc.getEvaluations();
      boolean _tripleNotEquals_7 = (_evaluations_1 != null);
      if (_tripleNotEquals_7) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(etc, "evaluations");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _method_2 = etc.getMethod();
      boolean _tripleNotEquals_8 = (_method_2 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(etc, "method");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EAttributeDefinition a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EDataTypeName _type = a.getAttribute().getType();
      boolean _tripleNotEquals = (_type != null);
      if (_tripleNotEquals) {
        this.putParameterNumber(a, "type", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus = this.parameter_counter++;
        _builder.append(_plusPlus);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"type\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim = this.trim(this.compile(a.getAttribute().getType()));
        _builder.append(_trim, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EAssignmentValue _default = a.getAttribute().getDefault();
      boolean _tripleNotEquals_1 = (_default != null);
      if (_tripleNotEquals_1) {
        this.putParameterNumber(a, "default", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_1 = this.parameter_counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"default\" ;");
        _builder.newLine();
        {
          EAssignmentValue _default_1 = a.getAttribute().getDefault();
          boolean _tripleNotEquals_2 = (_default_1 != null);
          if (_tripleNotEquals_2) {
            {
              EAssignmentValue _default_2 = a.getAttribute().getDefault();
              if ((_default_2 instanceof EFunction)) {
                _builder.append("  ");
                _builder.append("exchange:hasParameter :Parameter_");
                Integer _parameterNumber = this.getParameterNumber(a.getAttribute().getDefault(), "name");
                _builder.append(_parameterNumber, "  ");
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              } else {
                EAssignmentValue _default_3 = a.getAttribute().getDefault();
                if ((_default_3 instanceof ESingleValue)) {
                  _builder.append("  ");
                  _builder.append("exchange:value \"");
                  EAssignmentValue _default_4 = a.getAttribute().getDefault();
                  String _trim_1 = this.trim(this.compile(((ESingleValue) _default_4)).toString());
                  _builder.append(_trim_1, "  ");
                  _builder.append("\" ;");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      String _status = a.getAttribute().getStatus();
      boolean _tripleNotEquals_3 = (_status != null);
      if (_tripleNotEquals_3) {
        this.putParameterNumber(a, "status", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_2 = this.parameter_counter++;
        _builder.append(_plusPlus_2);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"status\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _status_1 = a.getAttribute().getStatus();
        _builder.append(_status_1, "  ");
        _builder.append("\' ; ");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EDataTypeName _entry_schema = a.getAttribute().getEntry_schema();
      boolean _tripleNotEquals_4 = (_entry_schema != null);
      if (_tripleNotEquals_4) {
        this.putParameterNumber(a, "entry_schema", Integer.valueOf(this.parameter_counter));
        _builder.newLineIfNotEmpty();
        _builder.append(":Parameter_");
        int _plusPlus_3 = this.parameter_counter++;
        _builder.append(_plusPlus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("rdf:type exchange:Parameter ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:name \"entry_schema\" ;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("exchange:value \'");
        String _trim_2 = this.trim(this.compile(a.getAttribute().getEntry_schema()));
        _builder.append(_trim_2, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
        _builder.append(".");
        _builder.newLine();
      }
    }
    _builder.newLine();
    Integer _put = this.attribute_numbers.put(a, Integer.valueOf(this.attribute_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Attribute_");
    int _plusPlus_4 = this.attribute_counter++;
    _builder.append(_plusPlus_4);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Attribute ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = a.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    {
      String _description = a.getAttribute().getDescription();
      boolean _tripleNotEquals_5 = (_description != null);
      if (_tripleNotEquals_5) {
        _builder.append("  ");
        _builder.append("exchange:description \'");
        String _processDescription = this.processDescription(a.getAttribute().getDescription());
        _builder.append(_processDescription, "  ");
        _builder.append("\' ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataTypeName _type_1 = a.getAttribute().getType();
      boolean _tripleNotEquals_6 = (_type_1 != null);
      if (_tripleNotEquals_6) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_1 = this.getParameterNumber(a, "type");
        _builder.append(_parameterNumber_1, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EAssignmentValue _default_5 = a.getAttribute().getDefault();
      boolean _tripleNotEquals_7 = (_default_5 != null);
      if (_tripleNotEquals_7) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_2 = this.getParameterNumber(a, "default");
        _builder.append(_parameterNumber_2, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _status_2 = a.getAttribute().getStatus();
      boolean _tripleNotEquals_8 = (_status_2 != null);
      if (_tripleNotEquals_8) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_3 = this.getParameterNumber(a, "status");
        _builder.append(_parameterNumber_3, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EDataTypeName _entry_schema_1 = a.getAttribute().getEntry_schema();
      boolean _tripleNotEquals_9 = (_entry_schema_1 != null);
      if (_tripleNotEquals_9) {
        _builder.append("  ");
        _builder.append("exchange:hasParameter :Parameter_");
        Integer _parameterNumber_4 = this.getParameterNumber(a, "entry_schema");
        _builder.append(_parameterNumber_4, "  ");
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EArtifactDefinition a) {
    StringConcatenation _builder = new StringConcatenation();
    this.putParameterNumber(a, "type", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus = this.parameter_counter++;
    _builder.append(_plusPlus);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"type\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    String _trim = this.trim(this.compile(a.getArtifact().getType()));
    _builder.append(_trim, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    this.putParameterNumber(a, "file.path", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_1 = this.parameter_counter++;
    _builder.append(_plusPlus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"path\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    String _file = a.getArtifact().getFile();
    _builder.append(_file, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    this.putParameterNumber(a, "file.content", Integer.valueOf(this.parameter_counter));
    _builder.newLineIfNotEmpty();
    _builder.append(":Parameter_");
    int _plusPlus_2 = this.parameter_counter++;
    _builder.append(_plusPlus_2);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Parameter ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"content\" ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:value \'");
    String _readFileAsString = this.readFileAsString(a.getArtifact().getFile());
    _builder.append(_readFileAsString, "  ");
    _builder.append("\' ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    _builder.newLine();
    Integer _put = this.artifact_numbers.put(a, Integer.valueOf(this.artifact_counter));
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    _builder.append(":Artifact_");
    int _plusPlus_3 = this.artifact_counter++;
    _builder.append(_plusPlus_3);
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rdf:type exchange:Artifact ;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exchange:name \"");
    String _name = a.getName();
    _builder.append(_name, "  ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber = this.getParameterNumber(a, "type");
    _builder.append(_parameterNumber, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber_1 = this.getParameterNumber(a, "file.path");
    _builder.append(_parameterNumber_1, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("exchange:hasParameter :Parameter_");
    Integer _parameterNumber_2 = this.getParameterNumber(a, "file.content");
    _builder.append(_parameterNumber_2, "  ");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    _builder.append(".");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EValueExpression ve) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = ((ESTRING) ve).getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ESingleValue v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((v instanceof ESTRING)) {
        String _processStringValue = this.processStringValue(((ESTRING) v).getValue());
        _builder.append(_processStringValue);
        _builder.newLineIfNotEmpty();
      } else {
        if ((v instanceof EBOOLEAN)) {
          boolean _isValue = ((EBOOLEAN) v).isValue();
          _builder.append(_isValue);
          _builder.newLineIfNotEmpty();
        } else {
          if ((v instanceof EFLOAT)) {
            float _value = ((EFLOAT) v).getValue();
            _builder.append(_value);
            _builder.newLineIfNotEmpty();
          } else {
            if ((v instanceof ESIGNEDINT)) {
              int _value_1 = ((ESIGNEDINT) v).getValue();
              _builder.append(_value_1);
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("null");
              _builder.newLine();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EAlphaNumericValue v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((v instanceof ESTRING)) {
        String _processStringValue = this.processStringValue(((ESTRING) v).getValue());
        _builder.append(_processStringValue);
        _builder.newLineIfNotEmpty();
      } else {
        if ((v instanceof EFLOAT)) {
          float _value = ((EFLOAT) v).getValue();
          _builder.append(_value);
          _builder.newLineIfNotEmpty();
        } else {
          if ((v instanceof ESIGNEDINT)) {
            int _value_1 = ((ESIGNEDINT) v).getValue();
            _builder.append(_value_1);
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("null");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EDataTypeName t) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((t instanceof EPREFIX_TYPE)) {
        CharSequence _compile = this.compile(((EPREFIX_TYPE) t));
        _builder.append(_compile);
        _builder.append("  ");
        _builder.newLineIfNotEmpty();
      } else {
        if ((t instanceof EPRIMITIVE_TYPE)) {
          CharSequence _compile_1 = this.compile(((EPRIMITIVE_TYPE) t));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EPREFIX_REF r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((r instanceof EPREFIX_TYPE)) {
        CharSequence _compile = this.compile(((EPREFIX_TYPE) r));
        _builder.append(_compile);
        _builder.append("  ");
        _builder.newLineIfNotEmpty();
      } else {
        if ((r instanceof EPREFIX_ID)) {
          CharSequence _compile_1 = this.compile(((EPREFIX_ID) r));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EEntityReference t) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((t instanceof EPREFIX_TYPE)) {
        CharSequence _compile = this.compile(((EPREFIX_TYPE) t));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((t instanceof EPREFIX_ID)) {
          String _id = ((EPREFIX_ID) t).getId();
          _builder.append(_id);
          _builder.newLineIfNotEmpty();
        } else {
          if ((t instanceof EEntity)) {
            String _entity = ((EEntity) t).getEntity();
            _builder.append(_entity);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EPRIMITIVE_TYPE t) {
    StringConcatenation _builder = new StringConcatenation();
    String _type = t.getType();
    _builder.append(_type);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final EPREFIX_TYPE t) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _module = t.getModule();
      boolean _tripleNotEquals = (_module != null);
      if (_tripleNotEquals) {
        String _module_1 = t.getModule();
        _builder.append(_module_1);
        _builder.append("/");
        String _type = t.getType();
        _builder.append(_type);
        _builder.append("  ");
        _builder.newLineIfNotEmpty();
      } else {
        String _type_1 = t.getType();
        _builder.append(_type_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final EPREFIX_ID t) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _module = t.getModule();
      boolean _tripleNotEquals = (_module != null);
      if (_tripleNotEquals) {
        String _module_1 = t.getModule();
        _builder.append(_module_1);
        _builder.append("/");
        String _id = t.getId();
        _builder.append(_id);
        _builder.append("  ");
        _builder.newLineIfNotEmpty();
      } else {
        String _id_1 = t.getId();
        _builder.append(_id_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String processStringValue(final String value) {
    final String processed = value.replaceAll("\"", "\\\\\"");
    return processed;
  }
  
  public void putParameterNumber(final Object entity, final String parameterName, final Integer number) {
    Map<String, Integer> _get = this.parameter_numbers.get(entity);
    boolean _tripleEquals = (_get == null);
    if (_tripleEquals) {
      HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
      this.parameter_numbers.put(entity, _hashMap);
    }
    this.parameter_numbers.get(entity).put(parameterName, number);
  }
  
  public Integer getParameterNumber(final Object entity, final String parameterName) {
    Map<String, Integer> _get = this.parameter_numbers.get(entity);
    boolean _tripleEquals = (_get == null);
    if (_tripleEquals) {
      return null;
    }
    return this.parameter_numbers.get(entity).get(parameterName);
  }
  
  public String getFilename(final URI uri) {
    String filename = uri.toString();
    filename = filename.replace("platform:/resource", "");
    int _indexOf = filename.indexOf(File.separator, 1);
    int _plus = (_indexOf + 1);
    String _replaceFirst = filename.substring(_plus).replaceFirst(File.separator, ".");
    String _plus_1 = (_replaceFirst + ".ttl");
    filename = _plus_1;
    return filename;
  }
  
  public String getName(final Resource resource) {
    return resource.getURI().lastSegment().substring(0, resource.getURI().lastSegment().lastIndexOf("."));
  }
  
  public String getRMName(final Resource resource) {
    String _substring = resource.getURI().lastSegment().substring(0, resource.getURI().lastSegment().lastIndexOf("."));
    return (_substring + ".rm");
  }
  
  public String readImplementationFileAsString(final String path, final Resource resource) {
    try {
      boolean _startsWith = path.startsWith(".");
      if (_startsWith) {
        String intermediatePath = resource.getURI().toString().replaceAll("%20", " ").replace("platform:/resource", "");
        URI _uRI = resource.getURI();
        int _segmentCount = resource.getURI().segmentCount();
        int _minus = (_segmentCount - 1);
        String RMName = _uRI.segment(_minus).replaceAll("%20", " ");
        intermediatePath = intermediatePath.replace(RMName, "");
        String workspaceDir = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString().replaceAll("%20", " ");
        String _replace = path.replace("./", "");
        String absolutePath = ((workspaceDir + intermediatePath) + _replace);
        try {
          String content = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(absolutePath)));
          return content.replace("\\", "\\\\").replace("\'", "\\\'").replaceAll("[\\n\\r]+", "\\\\n");
        } catch (final Throwable _t) {
          if (_t instanceof NoSuchFileException) {
            return null;
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
      } else {
        try {
          String content = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(path)));
          return content.replace("\\", "\\\\").replace("\'", "\\\'").replaceAll("[\\n\\r]+", "\\\\n");
        } catch (final Throwable _t) {
          if (_t instanceof NoSuchFileException) {
            return null;
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String readFileAsString(final String path) {
    try {
      return Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(path)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String processDescription(final String description) {
    return description.replaceAll("\'", "\\\\\'").replaceAll("[\\n\\r]+", "\\\\n");
  }
  
  public String trim(final String value) {
    return value.trim();
  }
  
  public String trim(final CharSequence value) {
    return value.toString().trim();
  }
  
  public String lastSegment(final String string, final String delimiter) {
    int _lastIndexOf = string.lastIndexOf(delimiter);
    int _plus = (_lastIndexOf + 1);
    return string.substring(_plus);
  }
}
