/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.dsl.rM.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.dsl.rM.EConditionClauseDefinition;
import org.sodalite.dsl.rM.EExtendedTriggerCondition;
import org.sodalite.dsl.rM.ESIGNEDINT;
import org.sodalite.dsl.rM.RMPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EExtended Trigger Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.rM.impl.EExtendedTriggerConditionImpl#getConstraint <em>Constraint</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.EExtendedTriggerConditionImpl#getPeriod <em>Period</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.EExtendedTriggerConditionImpl#getEvaluations <em>Evaluations</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.EExtendedTriggerConditionImpl#getMethod <em>Method</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EExtendedTriggerConditionImpl extends MinimalEObjectImpl.Container implements EExtendedTriggerCondition
{
  /**
   * The cached value of the '{@link #getConstraint() <em>Constraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraint()
   * @generated
   * @ordered
   */
  protected EConditionClauseDefinition constraint;

  /**
   * The default value of the '{@link #getPeriod() <em>Period</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPeriod()
   * @generated
   * @ordered
   */
  protected static final String PERIOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPeriod() <em>Period</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPeriod()
   * @generated
   * @ordered
   */
  protected String period = PERIOD_EDEFAULT;

  /**
   * The cached value of the '{@link #getEvaluations() <em>Evaluations</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvaluations()
   * @generated
   * @ordered
   */
  protected ESIGNEDINT evaluations;

  /**
   * The default value of the '{@link #getMethod() <em>Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected static final String METHOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMethod() <em>Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected String method = METHOD_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EExtendedTriggerConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RMPackage.Literals.EEXTENDED_TRIGGER_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConditionClauseDefinition getConstraint()
  {
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraint(EConditionClauseDefinition newConstraint, NotificationChain msgs)
  {
    EConditionClauseDefinition oldConstraint = constraint;
    constraint = newConstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT, oldConstraint, newConstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraint(EConditionClauseDefinition newConstraint)
  {
    if (newConstraint != constraint)
    {
      NotificationChain msgs = null;
      if (constraint != null)
        msgs = ((InternalEObject)constraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT, null, msgs);
      if (newConstraint != null)
        msgs = ((InternalEObject)newConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT, null, msgs);
      msgs = basicSetConstraint(newConstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT, newConstraint, newConstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPeriod()
  {
    return period;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPeriod(String newPeriod)
  {
    String oldPeriod = period;
    period = newPeriod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EEXTENDED_TRIGGER_CONDITION__PERIOD, oldPeriod, period));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ESIGNEDINT getEvaluations()
  {
    return evaluations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEvaluations(ESIGNEDINT newEvaluations, NotificationChain msgs)
  {
    ESIGNEDINT oldEvaluations = evaluations;
    evaluations = newEvaluations;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS, oldEvaluations, newEvaluations);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvaluations(ESIGNEDINT newEvaluations)
  {
    if (newEvaluations != evaluations)
    {
      NotificationChain msgs = null;
      if (evaluations != null)
        msgs = ((InternalEObject)evaluations).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS, null, msgs);
      if (newEvaluations != null)
        msgs = ((InternalEObject)newEvaluations).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS, null, msgs);
      msgs = basicSetEvaluations(newEvaluations, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS, newEvaluations, newEvaluations));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMethod()
  {
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethod(String newMethod)
  {
    String oldMethod = method;
    method = newMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EEXTENDED_TRIGGER_CONDITION__METHOD, oldMethod, method));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT:
        return basicSetConstraint(null, msgs);
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS:
        return basicSetEvaluations(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT:
        return getConstraint();
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__PERIOD:
        return getPeriod();
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS:
        return getEvaluations();
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__METHOD:
        return getMethod();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT:
        setConstraint((EConditionClauseDefinition)newValue);
        return;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__PERIOD:
        setPeriod((String)newValue);
        return;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS:
        setEvaluations((ESIGNEDINT)newValue);
        return;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__METHOD:
        setMethod((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT:
        setConstraint((EConditionClauseDefinition)null);
        return;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__PERIOD:
        setPeriod(PERIOD_EDEFAULT);
        return;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS:
        setEvaluations((ESIGNEDINT)null);
        return;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__METHOD:
        setMethod(METHOD_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__CONSTRAINT:
        return constraint != null;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__PERIOD:
        return PERIOD_EDEFAULT == null ? period != null : !PERIOD_EDEFAULT.equals(period);
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__EVALUATIONS:
        return evaluations != null;
      case RMPackage.EEXTENDED_TRIGGER_CONDITION__METHOD:
        return METHOD_EDEFAULT == null ? method != null : !METHOD_EDEFAULT.equals(method);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (period: ");
    result.append(period);
    result.append(", method: ");
    result.append(method);
    result.append(')');
    return result.toString();
  }

} //EExtendedTriggerConditionImpl
