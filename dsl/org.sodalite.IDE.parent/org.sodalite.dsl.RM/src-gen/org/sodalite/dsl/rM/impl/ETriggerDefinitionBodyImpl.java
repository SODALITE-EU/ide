/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.dsl.rM.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.dsl.rM.EActivityDefinitions;
import org.sodalite.dsl.rM.EEvenFilter;
import org.sodalite.dsl.rM.EExtendedTriggerCondition;
import org.sodalite.dsl.rM.ETimeInterval;
import org.sodalite.dsl.rM.ETriggerDefinitionBody;
import org.sodalite.dsl.rM.RMPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ETrigger Definition Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.rM.impl.ETriggerDefinitionBodyImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ETriggerDefinitionBodyImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ETriggerDefinitionBodyImpl#getSchedule <em>Schedule</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ETriggerDefinitionBodyImpl#getTarget_filter <em>Target filter</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ETriggerDefinitionBodyImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ETriggerDefinitionBodyImpl#getAction <em>Action</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ETriggerDefinitionBodyImpl extends MinimalEObjectImpl.Container implements ETriggerDefinitionBody
{
  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected static final String EVENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected String event = EVENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSchedule() <em>Schedule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchedule()
   * @generated
   * @ordered
   */
  protected ETimeInterval schedule;

  /**
   * The cached value of the '{@link #getTarget_filter() <em>Target filter</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget_filter()
   * @generated
   * @ordered
   */
  protected EEvenFilter target_filter;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EExtendedTriggerCondition condition;

  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected EActivityDefinitions action;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ETriggerDefinitionBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RMPackage.Literals.ETRIGGER_DEFINITION_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvent(String newEvent)
  {
    String oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ETimeInterval getSchedule()
  {
    return schedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSchedule(ETimeInterval newSchedule, NotificationChain msgs)
  {
    ETimeInterval oldSchedule = schedule;
    schedule = newSchedule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE, oldSchedule, newSchedule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSchedule(ETimeInterval newSchedule)
  {
    if (newSchedule != schedule)
    {
      NotificationChain msgs = null;
      if (schedule != null)
        msgs = ((InternalEObject)schedule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE, null, msgs);
      if (newSchedule != null)
        msgs = ((InternalEObject)newSchedule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE, null, msgs);
      msgs = basicSetSchedule(newSchedule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE, newSchedule, newSchedule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEvenFilter getTarget_filter()
  {
    return target_filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTarget_filter(EEvenFilter newTarget_filter, NotificationChain msgs)
  {
    EEvenFilter oldTarget_filter = target_filter;
    target_filter = newTarget_filter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER, oldTarget_filter, newTarget_filter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget_filter(EEvenFilter newTarget_filter)
  {
    if (newTarget_filter != target_filter)
    {
      NotificationChain msgs = null;
      if (target_filter != null)
        msgs = ((InternalEObject)target_filter).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER, null, msgs);
      if (newTarget_filter != null)
        msgs = ((InternalEObject)newTarget_filter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER, null, msgs);
      msgs = basicSetTarget_filter(newTarget_filter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER, newTarget_filter, newTarget_filter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EExtendedTriggerCondition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(EExtendedTriggerCondition newCondition, NotificationChain msgs)
  {
    EExtendedTriggerCondition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(EExtendedTriggerCondition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EActivityDefinitions getAction()
  {
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAction(EActivityDefinitions newAction, NotificationChain msgs)
  {
    EActivityDefinitions oldAction = action;
    action = newAction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__ACTION, oldAction, newAction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAction(EActivityDefinitions newAction)
  {
    if (newAction != action)
    {
      NotificationChain msgs = null;
      if (action != null)
        msgs = ((InternalEObject)action).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__ACTION, null, msgs);
      if (newAction != null)
        msgs = ((InternalEObject)newAction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RMPackage.ETRIGGER_DEFINITION_BODY__ACTION, null, msgs);
      msgs = basicSetAction(newAction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.ETRIGGER_DEFINITION_BODY__ACTION, newAction, newAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE:
        return basicSetSchedule(null, msgs);
      case RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER:
        return basicSetTarget_filter(null, msgs);
      case RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION:
        return basicSetCondition(null, msgs);
      case RMPackage.ETRIGGER_DEFINITION_BODY__ACTION:
        return basicSetAction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RMPackage.ETRIGGER_DEFINITION_BODY__DESCRIPTION:
        return getDescription();
      case RMPackage.ETRIGGER_DEFINITION_BODY__EVENT:
        return getEvent();
      case RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE:
        return getSchedule();
      case RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER:
        return getTarget_filter();
      case RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION:
        return getCondition();
      case RMPackage.ETRIGGER_DEFINITION_BODY__ACTION:
        return getAction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RMPackage.ETRIGGER_DEFINITION_BODY__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__EVENT:
        setEvent((String)newValue);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE:
        setSchedule((ETimeInterval)newValue);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER:
        setTarget_filter((EEvenFilter)newValue);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION:
        setCondition((EExtendedTriggerCondition)newValue);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__ACTION:
        setAction((EActivityDefinitions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RMPackage.ETRIGGER_DEFINITION_BODY__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__EVENT:
        setEvent(EVENT_EDEFAULT);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE:
        setSchedule((ETimeInterval)null);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER:
        setTarget_filter((EEvenFilter)null);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION:
        setCondition((EExtendedTriggerCondition)null);
        return;
      case RMPackage.ETRIGGER_DEFINITION_BODY__ACTION:
        setAction((EActivityDefinitions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RMPackage.ETRIGGER_DEFINITION_BODY__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case RMPackage.ETRIGGER_DEFINITION_BODY__EVENT:
        return EVENT_EDEFAULT == null ? event != null : !EVENT_EDEFAULT.equals(event);
      case RMPackage.ETRIGGER_DEFINITION_BODY__SCHEDULE:
        return schedule != null;
      case RMPackage.ETRIGGER_DEFINITION_BODY__TARGET_FILTER:
        return target_filter != null;
      case RMPackage.ETRIGGER_DEFINITION_BODY__CONDITION:
        return condition != null;
      case RMPackage.ETRIGGER_DEFINITION_BODY__ACTION:
        return action != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (description: ");
    result.append(description);
    result.append(", event: ");
    result.append(event);
    result.append(')');
    return result.toString();
  }

} //ETriggerDefinitionBodyImpl
