/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.dsl.rM.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.sodalite.dsl.rM.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.sodalite.dsl.rM.RMPackage
 * @generated
 */
public class RMAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RMPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RMAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RMPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RMSwitch<Adapter> modelSwitch =
    new RMSwitch<Adapter>()
    {
      @Override
      public Adapter caseRM_Model(RM_Model object)
      {
        return createRM_ModelAdapter();
      }
      @Override
      public Adapter caseEDataTypes(EDataTypes object)
      {
        return createEDataTypesAdapter();
      }
      @Override
      public Adapter caseEDataType(EDataType object)
      {
        return createEDataTypeAdapter();
      }
      @Override
      public Adapter caseEDataTypeBody(EDataTypeBody object)
      {
        return createEDataTypeBodyAdapter();
      }
      @Override
      public Adapter caseEDataTypeName(EDataTypeName object)
      {
        return createEDataTypeNameAdapter();
      }
      @Override
      public Adapter caseEArtifactTypes(EArtifactTypes object)
      {
        return createEArtifactTypesAdapter();
      }
      @Override
      public Adapter caseEArtifactType(EArtifactType object)
      {
        return createEArtifactTypeAdapter();
      }
      @Override
      public Adapter caseEArtifactTypeBody(EArtifactTypeBody object)
      {
        return createEArtifactTypeBodyAdapter();
      }
      @Override
      public Adapter caseECapabilityTypes(ECapabilityTypes object)
      {
        return createECapabilityTypesAdapter();
      }
      @Override
      public Adapter caseECapabilityType(ECapabilityType object)
      {
        return createECapabilityTypeAdapter();
      }
      @Override
      public Adapter caseECapabilityTypeBody(ECapabilityTypeBody object)
      {
        return createECapabilityTypeBodyAdapter();
      }
      @Override
      public Adapter caseEInterfaceTypes(EInterfaceTypes object)
      {
        return createEInterfaceTypesAdapter();
      }
      @Override
      public Adapter caseEInterfaceType(EInterfaceType object)
      {
        return createEInterfaceTypeAdapter();
      }
      @Override
      public Adapter caseEInterfaceTypeBody(EInterfaceTypeBody object)
      {
        return createEInterfaceTypeBodyAdapter();
      }
      @Override
      public Adapter caseEPolicyTypes(EPolicyTypes object)
      {
        return createEPolicyTypesAdapter();
      }
      @Override
      public Adapter caseEPolicyType(EPolicyType object)
      {
        return createEPolicyTypeAdapter();
      }
      @Override
      public Adapter caseEPolicyTypeBody(EPolicyTypeBody object)
      {
        return createEPolicyTypeBodyAdapter();
      }
      @Override
      public Adapter caseETriggers(ETriggers object)
      {
        return createETriggersAdapter();
      }
      @Override
      public Adapter caseETriggerDefinition(ETriggerDefinition object)
      {
        return createETriggerDefinitionAdapter();
      }
      @Override
      public Adapter caseETriggerDefinitionBody(ETriggerDefinitionBody object)
      {
        return createETriggerDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEActivityDefinitions(EActivityDefinitions object)
      {
        return createEActivityDefinitionsAdapter();
      }
      @Override
      public Adapter caseEExtendedTriggerCondition(EExtendedTriggerCondition object)
      {
        return createEExtendedTriggerConditionAdapter();
      }
      @Override
      public Adapter caseETimeInterval(ETimeInterval object)
      {
        return createETimeIntervalAdapter();
      }
      @Override
      public Adapter caseEEvenFilter(EEvenFilter object)
      {
        return createEEvenFilterAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinition(EConditionClauseDefinition object)
      {
        return createEConditionClauseDefinitionAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionAND(EConditionClauseDefinitionAND object)
      {
        return createEConditionClauseDefinitionANDAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionOR(EConditionClauseDefinitionOR object)
      {
        return createEConditionClauseDefinitionORAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionNOT(EConditionClauseDefinitionNOT object)
      {
        return createEConditionClauseDefinitionNOTAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionAssert(EConditionClauseDefinitionAssert object)
      {
        return createEConditionClauseDefinitionAssertAdapter();
      }
      @Override
      public Adapter caseEAssertionDefinition(EAssertionDefinition object)
      {
        return createEAssertionDefinitionAdapter();
      }
      @Override
      public Adapter caseEConstraintList(EConstraintList object)
      {
        return createEConstraintListAdapter();
      }
      @Override
      public Adapter caseEActivityDefinition(EActivityDefinition object)
      {
        return createEActivityDefinitionAdapter();
      }
      @Override
      public Adapter caseECallOperationActivityDefinition(ECallOperationActivityDefinition object)
      {
        return createECallOperationActivityDefinitionAdapter();
      }
      @Override
      public Adapter caseECallOperationActivityDefinitionBody(ECallOperationActivityDefinitionBody object)
      {
        return createECallOperationActivityDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEPropertyAssignments(EPropertyAssignments object)
      {
        return createEPropertyAssignmentsAdapter();
      }
      @Override
      public Adapter caseEPropertyAssignment(EPropertyAssignment object)
      {
        return createEPropertyAssignmentAdapter();
      }
      @Override
      public Adapter caseENodeTypes(ENodeTypes object)
      {
        return createENodeTypesAdapter();
      }
      @Override
      public Adapter caseENodeType(ENodeType object)
      {
        return createENodeTypeAdapter();
      }
      @Override
      public Adapter caseENodeTypeBody(ENodeTypeBody object)
      {
        return createENodeTypeBodyAdapter();
      }
      @Override
      public Adapter caseERelationshipTypes(ERelationshipTypes object)
      {
        return createERelationshipTypesAdapter();
      }
      @Override
      public Adapter caseERelationshipType(ERelationshipType object)
      {
        return createERelationshipTypeAdapter();
      }
      @Override
      public Adapter caseERelationshipTypeBody(ERelationshipTypeBody object)
      {
        return createERelationshipTypeBodyAdapter();
      }
      @Override
      public Adapter caseEValidTargetTypes(EValidTargetTypes object)
      {
        return createEValidTargetTypesAdapter();
      }
      @Override
      public Adapter caseETargetType(ETargetType object)
      {
        return createETargetTypeAdapter();
      }
      @Override
      public Adapter caseEProperties(EProperties object)
      {
        return createEPropertiesAdapter();
      }
      @Override
      public Adapter caseEPropertyDefinition(EPropertyDefinition object)
      {
        return createEPropertyDefinitionAdapter();
      }
      @Override
      public Adapter caseEPropertyDefinitionBody(EPropertyDefinitionBody object)
      {
        return createEPropertyDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEAttributes(EAttributes object)
      {
        return createEAttributesAdapter();
      }
      @Override
      public Adapter caseEAttributeDefinition(EAttributeDefinition object)
      {
        return createEAttributeDefinitionAdapter();
      }
      @Override
      public Adapter caseEAttributeDefinitionBody(EAttributeDefinitionBody object)
      {
        return createEAttributeDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEInterfaces(EInterfaces object)
      {
        return createEInterfacesAdapter();
      }
      @Override
      public Adapter caseEInterfaceDefinition(EInterfaceDefinition object)
      {
        return createEInterfaceDefinitionAdapter();
      }
      @Override
      public Adapter caseEInterfaceDefinitionBody(EInterfaceDefinitionBody object)
      {
        return createEInterfaceDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEOperations(EOperations object)
      {
        return createEOperationsAdapter();
      }
      @Override
      public Adapter caseEOperationDefinition(EOperationDefinition object)
      {
        return createEOperationDefinitionAdapter();
      }
      @Override
      public Adapter caseEOperationDefinitionBody(EOperationDefinitionBody object)
      {
        return createEOperationDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEImplementation(EImplementation object)
      {
        return createEImplementationAdapter();
      }
      @Override
      public Adapter caseEPrimary(EPrimary object)
      {
        return createEPrimaryAdapter();
      }
      @Override
      public Adapter caseEDependencies(EDependencies object)
      {
        return createEDependenciesAdapter();
      }
      @Override
      public Adapter caseEDependencyFiles(EDependencyFiles object)
      {
        return createEDependencyFilesAdapter();
      }
      @Override
      public Adapter caseEInputs(EInputs object)
      {
        return createEInputsAdapter();
      }
      @Override
      public Adapter caseEOutputs(EOutputs object)
      {
        return createEOutputsAdapter();
      }
      @Override
      public Adapter caseEParameterDefinition(EParameterDefinition object)
      {
        return createEParameterDefinitionAdapter();
      }
      @Override
      public Adapter caseEParameterDefinitionBody(EParameterDefinitionBody object)
      {
        return createEParameterDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEValueExpression(EValueExpression object)
      {
        return createEValueExpressionAdapter();
      }
      @Override
      public Adapter caseEFunction(EFunction object)
      {
        return createEFunctionAdapter();
      }
      @Override
      public Adapter caseGetInput(GetInput object)
      {
        return createGetInputAdapter();
      }
      @Override
      public Adapter caseGetAttribute(GetAttribute object)
      {
        return createGetAttributeAdapter();
      }
      @Override
      public Adapter caseGetAttributeBody(GetAttributeBody object)
      {
        return createGetAttributeBodyAdapter();
      }
      @Override
      public Adapter caseGetProperty(GetProperty object)
      {
        return createGetPropertyAdapter();
      }
      @Override
      public Adapter caseGetPropertyBody(GetPropertyBody object)
      {
        return createGetPropertyBodyAdapter();
      }
      @Override
      public Adapter caseGetArtifact(GetArtifact object)
      {
        return createGetArtifactAdapter();
      }
      @Override
      public Adapter caseGetArtifactBody(GetArtifactBody object)
      {
        return createGetArtifactBodyAdapter();
      }
      @Override
      public Adapter caseECapabilities(ECapabilities object)
      {
        return createECapabilitiesAdapter();
      }
      @Override
      public Adapter caseECapabilityDefinition(ECapabilityDefinition object)
      {
        return createECapabilityDefinitionAdapter();
      }
      @Override
      public Adapter caseECapabilityDefinitionBody(ECapabilityDefinitionBody object)
      {
        return createECapabilityDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEValidSourceType(EValidSourceType object)
      {
        return createEValidSourceTypeAdapter();
      }
      @Override
      public Adapter caseERequirements(ERequirements object)
      {
        return createERequirementsAdapter();
      }
      @Override
      public Adapter caseERequirementDefinition(ERequirementDefinition object)
      {
        return createERequirementDefinitionAdapter();
      }
      @Override
      public Adapter caseERequirementDefinitionBody(ERequirementDefinitionBody object)
      {
        return createERequirementDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEArtifacts(EArtifacts object)
      {
        return createEArtifactsAdapter();
      }
      @Override
      public Adapter caseEArtifactDefinition(EArtifactDefinition object)
      {
        return createEArtifactDefinitionAdapter();
      }
      @Override
      public Adapter caseEArtifactDefinitionBody(EArtifactDefinitionBody object)
      {
        return createEArtifactDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEReqOrCap(EReqOrCap object)
      {
        return createEReqOrCapAdapter();
      }
      @Override
      public Adapter caseEConstraints(EConstraints object)
      {
        return createEConstraintsAdapter();
      }
      @Override
      public Adapter caseEConstraint(EConstraint object)
      {
        return createEConstraintAdapter();
      }
      @Override
      public Adapter caseEMaxLength(EMaxLength object)
      {
        return createEMaxLengthAdapter();
      }
      @Override
      public Adapter caseEMinLength(EMinLength object)
      {
        return createEMinLengthAdapter();
      }
      @Override
      public Adapter caseELength(ELength object)
      {
        return createELengthAdapter();
      }
      @Override
      public Adapter caseEValid_Values(EValid_Values object)
      {
        return createEValid_ValuesAdapter();
      }
      @Override
      public Adapter caseELIST(ELIST object)
      {
        return createELISTAdapter();
      }
      @Override
      public Adapter caseEInRange(EInRange object)
      {
        return createEInRangeAdapter();
      }
      @Override
      public Adapter caseELessOrEqual(ELessOrEqual object)
      {
        return createELessOrEqualAdapter();
      }
      @Override
      public Adapter caseELessThan(ELessThan object)
      {
        return createELessThanAdapter();
      }
      @Override
      public Adapter caseEGreaterOrEqual(EGreaterOrEqual object)
      {
        return createEGreaterOrEqualAdapter();
      }
      @Override
      public Adapter caseEGreaterThan(EGreaterThan object)
      {
        return createEGreaterThanAdapter();
      }
      @Override
      public Adapter caseEEqual(EEqual object)
      {
        return createEEqualAdapter();
      }
      @Override
      public Adapter caseEAssignmentValue(EAssignmentValue object)
      {
        return createEAssignmentValueAdapter();
      }
      @Override
      public Adapter caseESingleValue(ESingleValue object)
      {
        return createESingleValueAdapter();
      }
      @Override
      public Adapter caseEAlphaNumericValue(EAlphaNumericValue object)
      {
        return createEAlphaNumericValueAdapter();
      }
      @Override
      public Adapter caseESTRING(ESTRING object)
      {
        return createESTRINGAdapter();
      }
      @Override
      public Adapter caseEBOOLEAN(EBOOLEAN object)
      {
        return createEBOOLEANAdapter();
      }
      @Override
      public Adapter caseEFLOAT(EFLOAT object)
      {
        return createEFLOATAdapter();
      }
      @Override
      public Adapter caseESIGNEDINT(ESIGNEDINT object)
      {
        return createESIGNEDINTAdapter();
      }
      @Override
      public Adapter caseEMAP(EMAP object)
      {
        return createEMAPAdapter();
      }
      @Override
      public Adapter caseEMapEntry(EMapEntry object)
      {
        return createEMapEntryAdapter();
      }
      @Override
      public Adapter caseEEntityReference(EEntityReference object)
      {
        return createEEntityReferenceAdapter();
      }
      @Override
      public Adapter caseEPREFIX_REF(EPREFIX_REF object)
      {
        return createEPREFIX_REFAdapter();
      }
      @Override
      public Adapter caseEPREFIX_TYPE(EPREFIX_TYPE object)
      {
        return createEPREFIX_TYPEAdapter();
      }
      @Override
      public Adapter caseEPREFIX_ID(EPREFIX_ID object)
      {
        return createEPREFIX_IDAdapter();
      }
      @Override
      public Adapter caseEPRIMITIVE_TYPE(EPRIMITIVE_TYPE object)
      {
        return createEPRIMITIVE_TYPEAdapter();
      }
      @Override
      public Adapter caseEEntity(EEntity object)
      {
        return createEEntityAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.RM_Model <em>RM Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.RM_Model
   * @generated
   */
  public Adapter createRM_ModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EDataTypes <em>EData Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EDataTypes
   * @generated
   */
  public Adapter createEDataTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EDataType <em>EData Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EDataType
   * @generated
   */
  public Adapter createEDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EDataTypeBody <em>EData Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EDataTypeBody
   * @generated
   */
  public Adapter createEDataTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EDataTypeName <em>EData Type Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EDataTypeName
   * @generated
   */
  public Adapter createEDataTypeNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EArtifactTypes <em>EArtifact Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EArtifactTypes
   * @generated
   */
  public Adapter createEArtifactTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EArtifactType <em>EArtifact Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EArtifactType
   * @generated
   */
  public Adapter createEArtifactTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EArtifactTypeBody <em>EArtifact Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EArtifactTypeBody
   * @generated
   */
  public Adapter createEArtifactTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECapabilityTypes <em>ECapability Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECapabilityTypes
   * @generated
   */
  public Adapter createECapabilityTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECapabilityType <em>ECapability Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECapabilityType
   * @generated
   */
  public Adapter createECapabilityTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECapabilityTypeBody <em>ECapability Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECapabilityTypeBody
   * @generated
   */
  public Adapter createECapabilityTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInterfaceTypes <em>EInterface Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInterfaceTypes
   * @generated
   */
  public Adapter createEInterfaceTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInterfaceType <em>EInterface Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInterfaceType
   * @generated
   */
  public Adapter createEInterfaceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInterfaceTypeBody <em>EInterface Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInterfaceTypeBody
   * @generated
   */
  public Adapter createEInterfaceTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPolicyTypes <em>EPolicy Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPolicyTypes
   * @generated
   */
  public Adapter createEPolicyTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPolicyType <em>EPolicy Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPolicyType
   * @generated
   */
  public Adapter createEPolicyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPolicyTypeBody <em>EPolicy Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPolicyTypeBody
   * @generated
   */
  public Adapter createEPolicyTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ETriggers <em>ETriggers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ETriggers
   * @generated
   */
  public Adapter createETriggersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ETriggerDefinition <em>ETrigger Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ETriggerDefinition
   * @generated
   */
  public Adapter createETriggerDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ETriggerDefinitionBody <em>ETrigger Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ETriggerDefinitionBody
   * @generated
   */
  public Adapter createETriggerDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EActivityDefinitions <em>EActivity Definitions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EActivityDefinitions
   * @generated
   */
  public Adapter createEActivityDefinitionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EExtendedTriggerCondition <em>EExtended Trigger Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EExtendedTriggerCondition
   * @generated
   */
  public Adapter createEExtendedTriggerConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ETimeInterval <em>ETime Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ETimeInterval
   * @generated
   */
  public Adapter createETimeIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EEvenFilter <em>EEven Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EEvenFilter
   * @generated
   */
  public Adapter createEEvenFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConditionClauseDefinition <em>ECondition Clause Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConditionClauseDefinition
   * @generated
   */
  public Adapter createEConditionClauseDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConditionClauseDefinitionAND <em>ECondition Clause Definition AND</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConditionClauseDefinitionAND
   * @generated
   */
  public Adapter createEConditionClauseDefinitionANDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConditionClauseDefinitionOR <em>ECondition Clause Definition OR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConditionClauseDefinitionOR
   * @generated
   */
  public Adapter createEConditionClauseDefinitionORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConditionClauseDefinitionNOT <em>ECondition Clause Definition NOT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConditionClauseDefinitionNOT
   * @generated
   */
  public Adapter createEConditionClauseDefinitionNOTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConditionClauseDefinitionAssert <em>ECondition Clause Definition Assert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConditionClauseDefinitionAssert
   * @generated
   */
  public Adapter createEConditionClauseDefinitionAssertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EAssertionDefinition <em>EAssertion Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EAssertionDefinition
   * @generated
   */
  public Adapter createEAssertionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConstraintList <em>EConstraint List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConstraintList
   * @generated
   */
  public Adapter createEConstraintListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EActivityDefinition <em>EActivity Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EActivityDefinition
   * @generated
   */
  public Adapter createEActivityDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECallOperationActivityDefinition <em>ECall Operation Activity Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECallOperationActivityDefinition
   * @generated
   */
  public Adapter createECallOperationActivityDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECallOperationActivityDefinitionBody <em>ECall Operation Activity Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECallOperationActivityDefinitionBody
   * @generated
   */
  public Adapter createECallOperationActivityDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPropertyAssignments <em>EProperty Assignments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPropertyAssignments
   * @generated
   */
  public Adapter createEPropertyAssignmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPropertyAssignment <em>EProperty Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPropertyAssignment
   * @generated
   */
  public Adapter createEPropertyAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ENodeTypes <em>ENode Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ENodeTypes
   * @generated
   */
  public Adapter createENodeTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ENodeType <em>ENode Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ENodeType
   * @generated
   */
  public Adapter createENodeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ENodeTypeBody <em>ENode Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ENodeTypeBody
   * @generated
   */
  public Adapter createENodeTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ERelationshipTypes <em>ERelationship Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ERelationshipTypes
   * @generated
   */
  public Adapter createERelationshipTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ERelationshipType <em>ERelationship Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ERelationshipType
   * @generated
   */
  public Adapter createERelationshipTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ERelationshipTypeBody <em>ERelationship Type Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ERelationshipTypeBody
   * @generated
   */
  public Adapter createERelationshipTypeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EValidTargetTypes <em>EValid Target Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EValidTargetTypes
   * @generated
   */
  public Adapter createEValidTargetTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ETargetType <em>ETarget Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ETargetType
   * @generated
   */
  public Adapter createETargetTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EProperties <em>EProperties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EProperties
   * @generated
   */
  public Adapter createEPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPropertyDefinition <em>EProperty Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPropertyDefinition
   * @generated
   */
  public Adapter createEPropertyDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPropertyDefinitionBody <em>EProperty Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPropertyDefinitionBody
   * @generated
   */
  public Adapter createEPropertyDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EAttributes <em>EAttributes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EAttributes
   * @generated
   */
  public Adapter createEAttributesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EAttributeDefinition <em>EAttribute Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EAttributeDefinition
   * @generated
   */
  public Adapter createEAttributeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EAttributeDefinitionBody <em>EAttribute Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EAttributeDefinitionBody
   * @generated
   */
  public Adapter createEAttributeDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInterfaces <em>EInterfaces</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInterfaces
   * @generated
   */
  public Adapter createEInterfacesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInterfaceDefinition <em>EInterface Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInterfaceDefinition
   * @generated
   */
  public Adapter createEInterfaceDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInterfaceDefinitionBody <em>EInterface Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInterfaceDefinitionBody
   * @generated
   */
  public Adapter createEInterfaceDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EOperations <em>EOperations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EOperations
   * @generated
   */
  public Adapter createEOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EOperationDefinition <em>EOperation Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EOperationDefinition
   * @generated
   */
  public Adapter createEOperationDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EOperationDefinitionBody <em>EOperation Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EOperationDefinitionBody
   * @generated
   */
  public Adapter createEOperationDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EImplementation <em>EImplementation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EImplementation
   * @generated
   */
  public Adapter createEImplementationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPrimary <em>EPrimary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPrimary
   * @generated
   */
  public Adapter createEPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EDependencies <em>EDependencies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EDependencies
   * @generated
   */
  public Adapter createEDependenciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EDependencyFiles <em>EDependency Files</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EDependencyFiles
   * @generated
   */
  public Adapter createEDependencyFilesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInputs <em>EInputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInputs
   * @generated
   */
  public Adapter createEInputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EOutputs <em>EOutputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EOutputs
   * @generated
   */
  public Adapter createEOutputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EParameterDefinition <em>EParameter Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EParameterDefinition
   * @generated
   */
  public Adapter createEParameterDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EParameterDefinitionBody <em>EParameter Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EParameterDefinitionBody
   * @generated
   */
  public Adapter createEParameterDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EValueExpression <em>EValue Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EValueExpression
   * @generated
   */
  public Adapter createEValueExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EFunction <em>EFunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EFunction
   * @generated
   */
  public Adapter createEFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetInput <em>Get Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetInput
   * @generated
   */
  public Adapter createGetInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetAttribute <em>Get Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetAttribute
   * @generated
   */
  public Adapter createGetAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetAttributeBody <em>Get Attribute Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetAttributeBody
   * @generated
   */
  public Adapter createGetAttributeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetProperty <em>Get Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetProperty
   * @generated
   */
  public Adapter createGetPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetPropertyBody <em>Get Property Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetPropertyBody
   * @generated
   */
  public Adapter createGetPropertyBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetArtifact <em>Get Artifact</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetArtifact
   * @generated
   */
  public Adapter createGetArtifactAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.GetArtifactBody <em>Get Artifact Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.GetArtifactBody
   * @generated
   */
  public Adapter createGetArtifactBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECapabilities <em>ECapabilities</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECapabilities
   * @generated
   */
  public Adapter createECapabilitiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECapabilityDefinition <em>ECapability Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECapabilityDefinition
   * @generated
   */
  public Adapter createECapabilityDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ECapabilityDefinitionBody <em>ECapability Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ECapabilityDefinitionBody
   * @generated
   */
  public Adapter createECapabilityDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EValidSourceType <em>EValid Source Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EValidSourceType
   * @generated
   */
  public Adapter createEValidSourceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ERequirements <em>ERequirements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ERequirements
   * @generated
   */
  public Adapter createERequirementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ERequirementDefinition <em>ERequirement Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ERequirementDefinition
   * @generated
   */
  public Adapter createERequirementDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ERequirementDefinitionBody <em>ERequirement Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ERequirementDefinitionBody
   * @generated
   */
  public Adapter createERequirementDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EArtifacts <em>EArtifacts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EArtifacts
   * @generated
   */
  public Adapter createEArtifactsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EArtifactDefinition <em>EArtifact Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EArtifactDefinition
   * @generated
   */
  public Adapter createEArtifactDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EArtifactDefinitionBody <em>EArtifact Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EArtifactDefinitionBody
   * @generated
   */
  public Adapter createEArtifactDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EReqOrCap <em>EReq Or Cap</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EReqOrCap
   * @generated
   */
  public Adapter createEReqOrCapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConstraints <em>EConstraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConstraints
   * @generated
   */
  public Adapter createEConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EConstraint <em>EConstraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EConstraint
   * @generated
   */
  public Adapter createEConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EMaxLength <em>EMax Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EMaxLength
   * @generated
   */
  public Adapter createEMaxLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EMinLength <em>EMin Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EMinLength
   * @generated
   */
  public Adapter createEMinLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ELength <em>ELength</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ELength
   * @generated
   */
  public Adapter createELengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EValid_Values <em>EValid Values</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EValid_Values
   * @generated
   */
  public Adapter createEValid_ValuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ELIST <em>ELIST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ELIST
   * @generated
   */
  public Adapter createELISTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EInRange <em>EIn Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EInRange
   * @generated
   */
  public Adapter createEInRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ELessOrEqual <em>ELess Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ELessOrEqual
   * @generated
   */
  public Adapter createELessOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ELessThan <em>ELess Than</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ELessThan
   * @generated
   */
  public Adapter createELessThanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EGreaterOrEqual <em>EGreater Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EGreaterOrEqual
   * @generated
   */
  public Adapter createEGreaterOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EGreaterThan <em>EGreater Than</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EGreaterThan
   * @generated
   */
  public Adapter createEGreaterThanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EEqual <em>EEqual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EEqual
   * @generated
   */
  public Adapter createEEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EAssignmentValue <em>EAssignment Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EAssignmentValue
   * @generated
   */
  public Adapter createEAssignmentValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ESingleValue <em>ESingle Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ESingleValue
   * @generated
   */
  public Adapter createESingleValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EAlphaNumericValue <em>EAlpha Numeric Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EAlphaNumericValue
   * @generated
   */
  public Adapter createEAlphaNumericValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ESTRING <em>ESTRING</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ESTRING
   * @generated
   */
  public Adapter createESTRINGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EBOOLEAN <em>EBOOLEAN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EBOOLEAN
   * @generated
   */
  public Adapter createEBOOLEANAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EFLOAT <em>EFLOAT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EFLOAT
   * @generated
   */
  public Adapter createEFLOATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.ESIGNEDINT <em>ESIGNEDINT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.ESIGNEDINT
   * @generated
   */
  public Adapter createESIGNEDINTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EMAP <em>EMAP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EMAP
   * @generated
   */
  public Adapter createEMAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EMapEntry <em>EMap Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EMapEntry
   * @generated
   */
  public Adapter createEMapEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EEntityReference <em>EEntity Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EEntityReference
   * @generated
   */
  public Adapter createEEntityReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPREFIX_REF <em>EPREFIX REF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPREFIX_REF
   * @generated
   */
  public Adapter createEPREFIX_REFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPREFIX_TYPE <em>EPREFIX TYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPREFIX_TYPE
   * @generated
   */
  public Adapter createEPREFIX_TYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPREFIX_ID <em>EPREFIX ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPREFIX_ID
   * @generated
   */
  public Adapter createEPREFIX_IDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EPRIMITIVE_TYPE <em>EPRIMITIVE TYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EPRIMITIVE_TYPE
   * @generated
   */
  public Adapter createEPRIMITIVE_TYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.rM.EEntity <em>EEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.rM.EEntity
   * @generated
   */
  public Adapter createEEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RMAdapterFactory
