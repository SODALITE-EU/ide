/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.sodalite.sdl.ansible.ansibleDsl.Model;
import org.sodalite.sdl.ansible.tests.AnsibleDslInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(AnsibleDslInjectorProvider.class)
@SuppressWarnings("all")
public class AnsibleDslParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void testHelloWorldTemplate() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* This is an example model");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("playbook_name: \"hello world playbook\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"hello world play\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("task_name: \"hello world task\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"debug\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: \"Hello world!\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"hello world play\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"hello world task\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("debug:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("msg: \"Hello world!\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testPrivilegeEscalation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("privilege_escalation:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("become: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("become_exe: \"become_exe\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("become_flags: \"become_flags\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("become_method: \"become_method\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("become_user: \"become_user\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("become: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("become_exe: \"become_exe\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("become_flags: \"become_flags\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("become_method: \"become_method\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("become_user: \"become_user\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testValidationMode() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("validation_mode:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("check_mode: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("diff: no");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("check_moode: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("diff: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testConnection() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("connection_info:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connection: \"connection\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("port_attribute: 2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("remote_user: \"remote_user\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("connection: \"connection\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("port: 2");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("remote_user: \"remote_user\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testVariableDeclarations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var1: 5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var2: \"string\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var3: false");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var4: {key1: 1, key2: 2}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var5: [1, 2, 3]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var6: {{ declared_variable: var1 }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var7: {{ input_var1 }}\"string\"{{ input_var2 }}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var1: 5");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var2: \"string\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var3: false");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var4: {\'key1\': 1, \'key2\': 2}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var5: [1, 2, 3]");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var6: \"{{ var1 }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var7: \"{{ input_var1 }}string{{ input_var2 }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testOtherBaseAttributes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("no_log: no");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("debugger: \"debugger\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("module_defaults: [\"1\", \"2\"]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("environment: [\"1\", \"2\"]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("collections: [\"1\", \"2\"]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tags_attribute: [\"1\", \"2\"]");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("no_log: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("debugger: \"debugger\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("module_defaults: [\"1\", \"2\"]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("environment: [\"1\", \"2\"]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("collections: [\"1\", \"2\"]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tags: [\"1\", \"2\"]");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testStartOfPlay() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external_file_inclusion:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("import_playbook: \"playbook.yaml\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external_file_inclusion:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("import_playbook: \"playbook.yaml\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external_file_inclusion:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("include: \"playbook.yaml\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("external_file_inclusion:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("include: \"playbook.yaml\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("when: False");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("- hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("- hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("import_playbook: playbook.yaml");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("- import_playbook: playbook.yaml");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("- include: playbook.yaml");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("include: playbook.yaml");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("when: False");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testPlayExeSettings() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_exe_settings:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("order: \"order\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("run_once: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("serial: 2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("strategy: \"strategy\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("throttle: 2");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("strategy: \"strategy\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("serial: 2");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("order: \"order\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("throttle: 2");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("run_once: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testPlayErrorHandling() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("any_errors_fatal: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ignore_errors: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ignore_unreachable: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("max_fail_percentage: 1");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("max_fail_percentage: 1");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("any_errors_fatal: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("ignore_errors: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("ignore_unreachable: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testFactsSettings() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("facts_settings:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("fact_path: \"path\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("gather_facts: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("gather_subset: no");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("gather_timeout: 2");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("gather_facts: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("gather_subset: no");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("gather_timeout: 2");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("fact_path: \"path\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testPreAndPostTasks() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pre_tasks:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("post_tasks:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("pre_tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("post_tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRoleInclusion() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("roles_inclusions:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("role:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("role_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("any_errors_fatal: no");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("roles:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- role: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("any_errors_fatal: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testOtherAttributesOfPlay() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars_files: [\"1\", \"2\"]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars_prompt: [\"1\", \"2\"]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("force_handlers: no");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars_files: [\"1\", \"2\"]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars_prompt: [\"1\", \"2\"]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("force_handlers: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testStartOfBlock() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("block_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testBlockAndRoleErrorHandling() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("block_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("any_errors_fatal: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("ignore_errors: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("ignore_unreachable: no");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("any_errors_fatal: no");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("ignore_errors: no");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("ignore_unreachable: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRescueAndAlwaysTasks() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("block_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rescue_tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("always_tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("rescue: ");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("always: ");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testExecutionExeSettings() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("block_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("exe_settings:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("run_once: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("throttle: 1\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("throttle: 1");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("run_once: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testDelegation() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("block_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("delegation:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("delegate_facts: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("delegate_to: \"delegate_to\"\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("delegate_to: \"delegate_to\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("delegate_facts: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWhenExpression() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("block_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("block_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("when: false\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("tasks:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("when:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("when_condition: false");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("when_condition: false");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("block:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("when: ");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("- false");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("- false");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("when: false");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testHandlers() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: \"parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("notify: \"handler1\", topic: \"topic1\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("direct_parameter: \"direct_parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("notify: topic: \"topic2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("task_name: \"name1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: \"parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("notify: \"handler1\", topic: \"topic3\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("task_name: \"name2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("notify: topic: \"topic4\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("handlers:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("handler:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("handler_name: \"handler1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("direct_parameter: \"direct_parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("handler:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("listen: \"topic1\", \"topic2\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"parameter\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("notify: [\"handler1\", \"topic1\"]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module: \"direct_parameter\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("notify: [\"topic2\"]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name1\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"parameter\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("notify: [\"handler1\", \"topic3\"]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"name2\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("notify: [\"topic4\"]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("handlers:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- name: \"handler1\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("module: \"direct_parameter\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("listen: [\"topic1\", \"topic2\"]");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTaskHandlerErrorHandling() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: \"parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("any_errors_fatal: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("changed_when: false");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("failed_when: false");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("ignore_errors: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("ignore_unreachable: no");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"parameter\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("change_when: false");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("failed_when: false");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("any_errors_fatal: no");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("ignore_errors: no");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("ignore_unreachable: no");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAsynchronousSettings() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: \"parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("asynchronous_settings:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("async: 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("poll: 1");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"parameter\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("async: 1");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("poll: 1");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testLoop() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: \"parameter\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter2: {{ index_or_loop_var: index_var }}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter3: {{ index_or_loop_var: loop_var }}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("loop:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("loop_over: {{ variable }}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("loop_control:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("extended: no");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("index_var: index_var");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("label: \"label\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("loop_var:  loop_var");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("pause: 2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("loop:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("loop_over: 4");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("loop:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("with items: \"items\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("loop:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("until:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("until_condition: \"condition\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("delay_attribute: 3");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("retries: 3");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"parameter\"");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter2: \"{{ index_var }}\"");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter3: \"{{ loop_var }}\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("loop: \"{{ variable }}\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("label: \"label\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("pause: 2");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("index_var: index_var");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("loop_var: loop_var");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("extended: no");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("loop: [4]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("with_items: \"items\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("until: \"condition\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("retries: 3");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("delay: 3");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRegister() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("register: variable");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: {{ registered_variable: variable }}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("register: variable");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"{{ variable }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetFact() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("register: variable");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"set_fact\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: {{ registered_variable: variable }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("direct_parameter: {{ fact_set: parameter1 }}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("register: variable");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- set_fact:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"{{ variable }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module: \"{{ parameter1 }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testOtherAttributesOfTaskHandler() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("action: \"action\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("args:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("key1: \"1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("key2: \"2\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("action: \"action\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("args: ");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\'key1\': \"1\"");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\'key2\': \"2\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testPassedValues() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name1\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("collections: {{ variable_list }}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("any_errors_fatal: {{ variable_boolean }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("max_fail_percentage: {{ variable_number }}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("facts_settings:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("gather_timeout: null");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("any_errors_fatal: {% if var == 5 %} {{ variable_boolean }} {% endif %}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("args: {{ variable_dictionary }}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("collections: {% if var == 5 %} {{ variable_list }} {% endif %}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("error_handling:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("max_fail_percentage: {% if var == 5 %} {{ variable_number }} {% endif %}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("args: {% if var == 5 %} {{ variable_dictionary }} {% endif %}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name1\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("collections: \"{{ variable_list }}\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("max_fail_percentage: \"{{ variable_number }}\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("any_errors_fatal: \"{{ variable_boolean }}\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("gather_timeout: null");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("any_errors_fatal: \"{% if var == 5 %}\"{{ variable_boolean }}\"{% endif %}\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("args: \"{{ variable_dictionary }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("- name: \"name2\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("collections: \"{% if var == 5 %}\"{{ variable_list }}\"{% endif %}\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("max_fail_percentage: \"{% if var == 5 %}\"{{ variable_number }}\"{% endif %}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("args: \"{% if var == 5 %}\"{{ variable_dictionary }}\"{% endif %}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTailElement() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var1: 5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var2:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("- \"first element\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("- \"second element\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("- key1: \"value1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("key2: \"value2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: {{ variable[1][1:2:3][:2:3][1::3][1:2:][1:2].tail1[declared_variable: var1].tail2().tail3[index].tail4[\"index\"] }}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var1: 5");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var2: ");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("- \"first element\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("- \"second element\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("- \'key1\': \"value1\"");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\'key2\': \"value2\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: \"{{ variable[1][1:2:3][:2:3][1::3][1:2:][1:2].tail1[var1].tail2().tail3[index].tail4[\'index\'] }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testJinjaExpressionEvaluationWithoutBrackets() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var1: true");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var2: {{ 5 if declared_variable: var1 else 6 }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var3: {{ (value1 == 6 and value2 == 7) or declared_variable: var1 | toString}}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var4: {{ 1 + 1 }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var5: {{ not declared_variable: var1 }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var6: {{ (declared_variable: var4 is 2 or declared_variable: var4 in [5, 6, 7]) and declared_variable: var1 is boolean or declared_variable: var1 not in [1, 2]}}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var7: {{ concat(first_string=\"string1\", \"string2\") }}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var1: true");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var2: \"{{ 5 if var1 else 6 }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var3: \"{{ (value1 == 6 and value2 == 7) or var1 | toString }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var4: \"{{ 1 + 1 }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var5: \"{{ not var1 }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var6: \"{{ (var4 is 2 or var4 in [5, 6, 7]) and var1 is boolean or var1 not in [1, 2] }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var7: \"{{ concat(first_string=\'string1\', \'string2\') }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testMultiLineExpression() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var1: 5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var2:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("- \"first element\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("- \"second element\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("- key1: \"value1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("key2: \"value2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tasks_list:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("task_to_execute:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("module: \"module\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter1: >");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: \"first line\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: \"second line \\\\2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: {{ declared_variable: var1 }}\"string\"{{ declared_variable: var1 }}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: {% for element in  declared_variable: var2 recursive %} {{ element }} {% else %}\" else \"{% endfor %}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter2: |");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: \"first line \\\\\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: {%+ for element, i in declared_variable: var2 if True %} {{ element }} {%+ else %}\" else \"{%+ endfor %}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: {% if declared_variable: var1 == 5 %}\" 5 \"{% else %}\" not 5 \"{% endif %}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: {% if declared_variable: var2[0] == 5 %}\" element 0 is 5 \" {% elif declared_variable: var1 == 5 %}\" 5 \"{% else %}\" not 5 \"{% endif %}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("line_of_string: {%+ if declared_variable: var2[0] == 5 %}\" element 0 is 5 \" {%+ elif declared_variable: var1 == 5 %}\" 5 \"{%+ else %}\" not 5 \"{%+ endif %}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter3: \"\\\\\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("parameter4: \"\\\"string\\\"\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var1: 5");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var2: ");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("- \"first element\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("- \"second element\"");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("- \'key1\': \"value1\"");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\'key2\': \"value2\"");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("tasks:");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("- module:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter1: >");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("first line");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("second line \\\\2");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("{{ var1 }}string{{ var1 }}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("{% for element in var2 recursive %}{{ element }}{% else %} else {% endfor %}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter2: |");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("first line \\");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("{%+ for element, i in var2 if True %}{{ element }}{%+ else %} else {%+ endfor %}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("{% if var1 == 5 %} 5 {% else %} not 5 {% endif %}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("{% if var2[0] == 5 %} element 0 is 5 {% elif var1 == 5 %} 5 {% else %} not 5 {% endif %}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("{%+ if var2[0] == 5 %} element 0 is 5 {%+ elif var1 == 5 %} 5 {%+ else %} not 5 {%+ endif %}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter3: \"\\\\\"");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("parameter4: \"\\\"string\\\"\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSpecialVariable() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("playbook_name: \"name\"");
      _builder.newLine();
      _builder.append("plays:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("play:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("play_name: \"name\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hosts: \"all\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("vars:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var1: {{ {ke1: 5, key2: \"string\"} }}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var2: null");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var2: {{ special_variable: ansible_host }}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("- name: \"name\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("hosts: \"all\"");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("vars:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var1: \"{{ {\'ke1\': 5, \'key2\': \'string\'} }}\"");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var2: null");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("var2: \"{{ ansible_host }}\"");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
