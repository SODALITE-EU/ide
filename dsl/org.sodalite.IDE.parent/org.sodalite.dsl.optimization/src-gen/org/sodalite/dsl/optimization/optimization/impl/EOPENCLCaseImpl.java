/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.optimization.optimization.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.dsl.optimization.optimization.EOPENCL;
import org.sodalite.dsl.optimization.optimization.EOPENCLCase;
import org.sodalite.dsl.optimization.optimization.OptimizationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EOPENCL Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.optimization.optimization.impl.EOPENCLCaseImpl#getOpencl <em>Opencl</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EOPENCLCaseImpl extends MinimalEObjectImpl.Container implements EOPENCLCase
{
  /**
   * The cached value of the '{@link #getOpencl() <em>Opencl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpencl()
   * @generated
   * @ordered
   */
  protected EOPENCL opencl;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EOPENCLCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OptimizationPackage.Literals.EOPENCL_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EOPENCL getOpencl()
  {
    return opencl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOpencl(EOPENCL newOpencl, NotificationChain msgs)
  {
    EOPENCL oldOpencl = opencl;
    opencl = newOpencl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptimizationPackage.EOPENCL_CASE__OPENCL, oldOpencl, newOpencl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOpencl(EOPENCL newOpencl)
  {
    if (newOpencl != opencl)
    {
      NotificationChain msgs = null;
      if (opencl != null)
        msgs = ((InternalEObject)opencl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptimizationPackage.EOPENCL_CASE__OPENCL, null, msgs);
      if (newOpencl != null)
        msgs = ((InternalEObject)newOpencl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptimizationPackage.EOPENCL_CASE__OPENCL, null, msgs);
      msgs = basicSetOpencl(newOpencl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptimizationPackage.EOPENCL_CASE__OPENCL, newOpencl, newOpencl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OptimizationPackage.EOPENCL_CASE__OPENCL:
        return basicSetOpencl(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OptimizationPackage.EOPENCL_CASE__OPENCL:
        return getOpencl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OptimizationPackage.EOPENCL_CASE__OPENCL:
        setOpencl((EOPENCL)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OptimizationPackage.EOPENCL_CASE__OPENCL:
        setOpencl((EOPENCL)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OptimizationPackage.EOPENCL_CASE__OPENCL:
        return opencl != null;
    }
    return super.eIsSet(featureID);
  }

} //EOPENCLCaseImpl
