/**
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.optimization.optimization.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.dsl.optimization.optimization.EPyTorch;
import org.sodalite.dsl.optimization.optimization.EPyTorchCase;
import org.sodalite.dsl.optimization.optimization.OptimizationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EPy Torch Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.optimization.optimization.impl.EPyTorchCaseImpl#getPytorch <em>Pytorch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EPyTorchCaseImpl extends EAITrainingCasesImpl implements EPyTorchCase
{
  /**
   * The cached value of the '{@link #getPytorch() <em>Pytorch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPytorch()
   * @generated
   * @ordered
   */
  protected EPyTorch pytorch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EPyTorchCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OptimizationPackage.Literals.EPY_TORCH_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EPyTorch getPytorch()
  {
    return pytorch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPytorch(EPyTorch newPytorch, NotificationChain msgs)
  {
    EPyTorch oldPytorch = pytorch;
    pytorch = newPytorch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptimizationPackage.EPY_TORCH_CASE__PYTORCH, oldPytorch, newPytorch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPytorch(EPyTorch newPytorch)
  {
    if (newPytorch != pytorch)
    {
      NotificationChain msgs = null;
      if (pytorch != null)
        msgs = ((InternalEObject)pytorch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptimizationPackage.EPY_TORCH_CASE__PYTORCH, null, msgs);
      if (newPytorch != null)
        msgs = ((InternalEObject)newPytorch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptimizationPackage.EPY_TORCH_CASE__PYTORCH, null, msgs);
      msgs = basicSetPytorch(newPytorch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptimizationPackage.EPY_TORCH_CASE__PYTORCH, newPytorch, newPytorch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OptimizationPackage.EPY_TORCH_CASE__PYTORCH:
        return basicSetPytorch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OptimizationPackage.EPY_TORCH_CASE__PYTORCH:
        return getPytorch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OptimizationPackage.EPY_TORCH_CASE__PYTORCH:
        setPytorch((EPyTorch)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OptimizationPackage.EPY_TORCH_CASE__PYTORCH:
        setPytorch((EPyTorch)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OptimizationPackage.EPY_TORCH_CASE__PYTORCH:
        return pytorch != null;
    }
    return super.eIsSet(featureID);
  }

} //EPyTorchCaseImpl
