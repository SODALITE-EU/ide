/*
 * generated by Xtext 2.22.0
 */
package org.sodalite.dsl.optimization.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OptimizationGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class Optimization_ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.Optimization_Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptimizationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQUALIFIED_NAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOptimizationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptimizationEOptimizationParserRuleCall_4_0 = (RuleCall)cOptimizationAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Optimization_Model:
		//	'optimization' name=QUALIFIED_NAME ':'
		//	BEGIN
		//	optimization=EOptimization
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'optimization' name=QUALIFIED_NAME ':' BEGIN optimization=EOptimization END
		public Group getGroup() { return cGroup; }
		
		//'optimization'
		public Keyword getOptimizationKeyword_0() { return cOptimizationKeyword_0; }
		
		//name=QUALIFIED_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QUALIFIED_NAME
		public RuleCall getNameQUALIFIED_NAMETerminalRuleCall_1_0() { return cNameQUALIFIED_NAMETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//optimization=EOptimization
		public Assignment getOptimizationAssignment_4() { return cOptimizationAssignment_4; }
		
		//EOptimization
		public RuleCall getOptimizationEOptimizationParserRuleCall_4_0() { return cOptimizationEOptimizationParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class EOptimizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOptimization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cEnable_opt_buildKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEnable_opt_buildAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEnable_opt_buildBOOLEANTerminalRuleCall_0_1_0 = (RuleCall)cEnable_opt_buildAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEnable_autotuningKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnable_autotuningAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnable_autotuningBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cEnable_autotuningAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cApp_typeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cApp_typeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cApp_typeEAppTypeParserRuleCall_2_1_0 = (RuleCall)cApp_typeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOpt_buildKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cOpt_buildAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOpt_buildEOptBuildParserRuleCall_3_2_0 = (RuleCall)cOpt_buildAssignment_3_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAutotuningKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cAutotuningAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAutotuningEAutotuningParserRuleCall_4_2_0 = (RuleCall)cAutotuningAssignment_4_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Assignment cApp_optimizationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cApp_optimizationEOptimizationCasesParserRuleCall_5_0 = (RuleCall)cApp_optimizationAssignment_5.eContents().get(0);
		
		//EOptimization:
		//	('enable_opt_build:' enable_opt_build=BOOLEAN) ('enable_autotuning:' enable_autotuning=BOOLEAN) ('app_type:'
		//	app_type=EAppType) ('opt_build:'
		//	BEGIN
		//	opt_build=EOptBuild
		//	END)? ('autotuning:'
		//	BEGIN
		//	autotuning=EAutotuning
		//	END)?
		//	app_optimization=EOptimizationCases;
		@Override public ParserRule getRule() { return rule; }
		
		//('enable_opt_build:' enable_opt_build=BOOLEAN) ('enable_autotuning:' enable_autotuning=BOOLEAN) ('app_type:'
		//app_type=EAppType) ('opt_build:' BEGIN opt_build=EOptBuild END)? ('autotuning:' BEGIN autotuning=EAutotuning END)?
		//app_optimization=EOptimizationCases
		public Group getGroup() { return cGroup; }
		
		//('enable_opt_build:' enable_opt_build=BOOLEAN)
		public Group getGroup_0() { return cGroup_0; }
		
		//'enable_opt_build:'
		public Keyword getEnable_opt_buildKeyword_0_0() { return cEnable_opt_buildKeyword_0_0; }
		
		//enable_opt_build=BOOLEAN
		public Assignment getEnable_opt_buildAssignment_0_1() { return cEnable_opt_buildAssignment_0_1; }
		
		//BOOLEAN
		public RuleCall getEnable_opt_buildBOOLEANTerminalRuleCall_0_1_0() { return cEnable_opt_buildBOOLEANTerminalRuleCall_0_1_0; }
		
		//('enable_autotuning:' enable_autotuning=BOOLEAN)
		public Group getGroup_1() { return cGroup_1; }
		
		//'enable_autotuning:'
		public Keyword getEnable_autotuningKeyword_1_0() { return cEnable_autotuningKeyword_1_0; }
		
		//enable_autotuning=BOOLEAN
		public Assignment getEnable_autotuningAssignment_1_1() { return cEnable_autotuningAssignment_1_1; }
		
		//BOOLEAN
		public RuleCall getEnable_autotuningBOOLEANTerminalRuleCall_1_1_0() { return cEnable_autotuningBOOLEANTerminalRuleCall_1_1_0; }
		
		//('app_type:' app_type=EAppType)
		public Group getGroup_2() { return cGroup_2; }
		
		//'app_type:'
		public Keyword getApp_typeKeyword_2_0() { return cApp_typeKeyword_2_0; }
		
		//app_type=EAppType
		public Assignment getApp_typeAssignment_2_1() { return cApp_typeAssignment_2_1; }
		
		//EAppType
		public RuleCall getApp_typeEAppTypeParserRuleCall_2_1_0() { return cApp_typeEAppTypeParserRuleCall_2_1_0; }
		
		//('opt_build:' BEGIN opt_build=EOptBuild END)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'opt_build:'
		public Keyword getOpt_buildKeyword_3_0() { return cOpt_buildKeyword_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3_1() { return cBEGINTerminalRuleCall_3_1; }
		
		//opt_build=EOptBuild
		public Assignment getOpt_buildAssignment_3_2() { return cOpt_buildAssignment_3_2; }
		
		//EOptBuild
		public RuleCall getOpt_buildEOptBuildParserRuleCall_3_2_0() { return cOpt_buildEOptBuildParserRuleCall_3_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3_3() { return cENDTerminalRuleCall_3_3; }
		
		//('autotuning:' BEGIN autotuning=EAutotuning END)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'autotuning:'
		public Keyword getAutotuningKeyword_4_0() { return cAutotuningKeyword_4_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4_1() { return cBEGINTerminalRuleCall_4_1; }
		
		//autotuning=EAutotuning
		public Assignment getAutotuningAssignment_4_2() { return cAutotuningAssignment_4_2; }
		
		//EAutotuning
		public RuleCall getAutotuningEAutotuningParserRuleCall_4_2_0() { return cAutotuningEAutotuningParserRuleCall_4_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4_3() { return cENDTerminalRuleCall_4_3; }
		
		//app_optimization=EOptimizationCases
		public Assignment getApp_optimizationAssignment_5() { return cApp_optimizationAssignment_5; }
		
		//EOptimizationCases
		public RuleCall getApp_optimizationEOptimizationCasesParserRuleCall_5_0() { return cApp_optimizationEOptimizationCasesParserRuleCall_5_0; }
	}
	public class EOptimizationCasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOptimizationCases");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEAITrainingCaseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEHPCCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EOptimizationCases:
		//	EAITrainingCase | EHPCCase;
		@Override public ParserRule getRule() { return rule; }
		
		//EAITrainingCase | EHPCCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EAITrainingCase
		public RuleCall getEAITrainingCaseParserRuleCall_0() { return cEAITrainingCaseParserRuleCall_0; }
		
		//EHPCCase
		public RuleCall getEHPCCaseParserRuleCall_1() { return cEHPCCaseParserRuleCall_1; }
	}
	public class EAITrainingCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITrainingCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApp_typeAi_trainingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAi_trainingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAi_trainingEAITrainingParserRuleCall_2_0 = (RuleCall)cAi_trainingAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EAITrainingCase:
		//	'app_type-ai_training:'
		//	BEGIN
		//	ai_training=EAITraining
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'app_type-ai_training:' BEGIN ai_training=EAITraining END
		public Group getGroup() { return cGroup; }
		
		//'app_type-ai_training:'
		public Keyword getApp_typeAi_trainingKeyword_0() { return cApp_typeAi_trainingKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//ai_training=EAITraining
		public Assignment getAi_trainingAssignment_2() { return cAi_trainingAssignment_2; }
		
		//EAITraining
		public RuleCall getAi_trainingEAITrainingParserRuleCall_2_0() { return cAi_trainingEAITrainingParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EHPCCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EHPCCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApp_typeHpcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cHpcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHpcEHPCParserRuleCall_2_0 = (RuleCall)cHpcAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EHPCCase:
		//	'app_type-hpc:'
		//	BEGIN
		//	hpc=EHPC
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'app_type-hpc:' BEGIN hpc=EHPC END
		public Group getGroup() { return cGroup; }
		
		//'app_type-hpc:'
		public Keyword getApp_typeHpcKeyword_0() { return cApp_typeHpcKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//hpc=EHPC
		public Assignment getHpcAssignment_2() { return cHpcAssignment_2; }
		
		//EHPC
		public RuleCall getHpcEHPCParserRuleCall_2_0() { return cHpcEHPCParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EAppTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAppType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAi_trainingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHpcKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBig_dataKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAi_inferenceKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EAppType:
		//	'ai_training' | 'hpc' | 'big_data' | 'ai_inference';
		@Override public ParserRule getRule() { return rule; }
		
		//'ai_training' | 'hpc' | 'big_data' | 'ai_inference'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ai_training'
		public Keyword getAi_trainingKeyword_0() { return cAi_trainingKeyword_0; }
		
		//'hpc'
		public Keyword getHpcKeyword_1() { return cHpcKeyword_1; }
		
		//'big_data'
		public Keyword getBig_dataKeyword_2() { return cBig_dataKeyword_2; }
		
		//'ai_inference'
		public Keyword getAi_inferenceKeyword_3() { return cAi_inferenceKeyword_3; }
	}
	public class EOptBuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOptBuild");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cCpu_typeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCpu_typeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCpu_typeECPUTypeParserRuleCall_0_1_0 = (RuleCall)cCpu_typeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cAcc_typeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAcc_typeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAcc_typeEACCTypeParserRuleCall_1_1_0 = (RuleCall)cAcc_typeAssignment_1_1.eContents().get(0);
		
		//EOptBuild:
		//	'cpu_type:' cpu_type=ECPUType & 'acc_type:' acc_type=EACCType;
		@Override public ParserRule getRule() { return rule; }
		
		//'cpu_type:' cpu_type=ECPUType & 'acc_type:' acc_type=EACCType
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'cpu_type:' cpu_type=ECPUType
		public Group getGroup_0() { return cGroup_0; }
		
		//'cpu_type:'
		public Keyword getCpu_typeKeyword_0_0() { return cCpu_typeKeyword_0_0; }
		
		//cpu_type=ECPUType
		public Assignment getCpu_typeAssignment_0_1() { return cCpu_typeAssignment_0_1; }
		
		//ECPUType
		public RuleCall getCpu_typeECPUTypeParserRuleCall_0_1_0() { return cCpu_typeECPUTypeParserRuleCall_0_1_0; }
		
		//'acc_type:' acc_type=EACCType
		public Group getGroup_1() { return cGroup_1; }
		
		//'acc_type:'
		public Keyword getAcc_typeKeyword_1_0() { return cAcc_typeKeyword_1_0; }
		
		//acc_type=EACCType
		public Assignment getAcc_typeAssignment_1_1() { return cAcc_typeAssignment_1_1; }
		
		//EACCType
		public RuleCall getAcc_typeEACCTypeParserRuleCall_1_1_0() { return cAcc_typeEACCTypeParserRuleCall_1_1_0; }
	}
	public class ECPUTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.ECPUType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cX86Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cArmKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAmdKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPowerKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ECPUType:
		//	'x86' | 'arm' | 'amd' | 'power';
		@Override public ParserRule getRule() { return rule; }
		
		//'x86' | 'arm' | 'amd' | 'power'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'x86'
		public Keyword getX86Keyword_0() { return cX86Keyword_0; }
		
		//'arm'
		public Keyword getArmKeyword_1() { return cArmKeyword_1; }
		
		//'amd'
		public Keyword getAmdKeyword_2() { return cAmdKeyword_2; }
		
		//'power'
		public Keyword getPowerKeyword_3() { return cPowerKeyword_3; }
	}
	public class EACCTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EACCType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNvidiaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmdKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFpgaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EACCType:
		//	'nvidia' | 'amd' | 'fpga';
		@Override public ParserRule getRule() { return rule; }
		
		//'nvidia' | 'amd' | 'fpga'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nvidia'
		public Keyword getNvidiaKeyword_0() { return cNvidiaKeyword_0; }
		
		//'amd'
		public Keyword getAmdKeyword_1() { return cAmdKeyword_1; }
		
		//'fpga'
		public Keyword getFpgaKeyword_2() { return cFpgaKeyword_2; }
	}
	public class EAutotuningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAutotuning");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cTunerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTunerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTunerETunerParserRuleCall_0_1_0 = (RuleCall)cTunerAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cInputKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInputAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInputSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cInputAssignment_1_1.eContents().get(0);
		
		//EAutotuning:
		//	'tuner:' tuner=ETuner & 'input:' input=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'tuner:' tuner=ETuner & 'input:' input=STRING
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'tuner:' tuner=ETuner
		public Group getGroup_0() { return cGroup_0; }
		
		//'tuner:'
		public Keyword getTunerKeyword_0_0() { return cTunerKeyword_0_0; }
		
		//tuner=ETuner
		public Assignment getTunerAssignment_0_1() { return cTunerAssignment_0_1; }
		
		//ETuner
		public RuleCall getTunerETunerParserRuleCall_0_1_0() { return cTunerETunerParserRuleCall_0_1_0; }
		
		//'input:' input=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//'input:'
		public Keyword getInputKeyword_1_0() { return cInputKeyword_1_0; }
		
		//input=STRING
		public Assignment getInputAssignment_1_1() { return cInputAssignment_1_1; }
		
		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_1_1_0() { return cInputSTRINGTerminalRuleCall_1_1_0; }
	}
	public class ETunerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.ETuner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCrestaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAutotuneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ETuner:
		//	'cresta' | 'autotune';
		@Override public ParserRule getRule() { return rule; }
		
		//'cresta' | 'autotune'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cresta'
		public Keyword getCrestaKeyword_0() { return cCrestaKeyword_0; }
		
		//'autotune'
		public Keyword getAutotuneKeyword_1() { return cAutotuneKeyword_1; }
	}
	public class EAITrainingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITraining");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cConfigKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cConfigAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConfigEAITrainingConfigParserRuleCall_0_2_0 = (RuleCall)cConfigAssignment_0_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDataKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cDataAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDataEAITrainingDataParserRuleCall_1_2_0 = (RuleCall)cDataAssignment_1_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cAitrainingcaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAitrainingcaseEAITrainingCasesParserRuleCall_2_0 = (RuleCall)cAitrainingcaseAssignment_2.eContents().get(0);
		
		//EAITraining:
		//	('config:'
		//	BEGIN
		//	config=EAITrainingConfig
		//	END) ('data:'
		//	BEGIN
		//	data=EAITrainingData
		//	END) aitrainingcase=EAITrainingCases;
		@Override public ParserRule getRule() { return rule; }
		
		//('config:' BEGIN config=EAITrainingConfig END) ('data:' BEGIN data=EAITrainingData END) aitrainingcase=EAITrainingCases
		public Group getGroup() { return cGroup; }
		
		//('config:' BEGIN config=EAITrainingConfig END)
		public Group getGroup_0() { return cGroup_0; }
		
		//'config:'
		public Keyword getConfigKeyword_0_0() { return cConfigKeyword_0_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0_1() { return cBEGINTerminalRuleCall_0_1; }
		
		//config=EAITrainingConfig
		public Assignment getConfigAssignment_0_2() { return cConfigAssignment_0_2; }
		
		//EAITrainingConfig
		public RuleCall getConfigEAITrainingConfigParserRuleCall_0_2_0() { return cConfigEAITrainingConfigParserRuleCall_0_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_0_3() { return cENDTerminalRuleCall_0_3; }
		
		//('data:' BEGIN data=EAITrainingData END)
		public Group getGroup_1() { return cGroup_1; }
		
		//'data:'
		public Keyword getDataKeyword_1_0() { return cDataKeyword_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_1() { return cBEGINTerminalRuleCall_1_1; }
		
		//data=EAITrainingData
		public Assignment getDataAssignment_1_2() { return cDataAssignment_1_2; }
		
		//EAITrainingData
		public RuleCall getDataEAITrainingDataParserRuleCall_1_2_0() { return cDataEAITrainingDataParserRuleCall_1_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_3() { return cENDTerminalRuleCall_1_3; }
		
		//aitrainingcase=EAITrainingCases
		public Assignment getAitrainingcaseAssignment_2() { return cAitrainingcaseAssignment_2; }
		
		//EAITrainingCases
		public RuleCall getAitrainingcaseEAITrainingCasesParserRuleCall_2_0() { return cAitrainingcaseEAITrainingCasesParserRuleCall_2_0; }
	}
	public class EAITrainingCasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITrainingCases");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEKerasCaseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETensorFlowCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEPyTorchCaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EAITrainingCases:
		//	EKerasCase | ETensorFlowCase | EPyTorchCase;
		@Override public ParserRule getRule() { return rule; }
		
		//EKerasCase | ETensorFlowCase | EPyTorchCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EKerasCase
		public RuleCall getEKerasCaseParserRuleCall_0() { return cEKerasCaseParserRuleCall_0; }
		
		//ETensorFlowCase
		public RuleCall getETensorFlowCaseParserRuleCall_1() { return cETensorFlowCaseParserRuleCall_1; }
		
		//EPyTorchCase
		public RuleCall getEPyTorchCaseParserRuleCall_2() { return cEPyTorchCaseParserRuleCall_2; }
	}
	public class EPyTorchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EPyTorchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAi_frameworkPytorchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPytorchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPytorchEPyTorchParserRuleCall_2_0 = (RuleCall)cPytorchAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EPyTorchCase:
		//	'ai_framework-pytorch:'
		//	BEGIN
		//	pytorch=EPyTorch
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'ai_framework-pytorch:' BEGIN pytorch=EPyTorch END
		public Group getGroup() { return cGroup; }
		
		//'ai_framework-pytorch:'
		public Keyword getAi_frameworkPytorchKeyword_0() { return cAi_frameworkPytorchKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//pytorch=EPyTorch
		public Assignment getPytorchAssignment_2() { return cPytorchAssignment_2; }
		
		//EPyTorch
		public RuleCall getPytorchEPyTorchParserRuleCall_2_0() { return cPytorchEPyTorchParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class ETensorFlowCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.ETensorFlowCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAi_frameworkTensorflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTensorflowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTensorflowETensorFlowParserRuleCall_2_0 = (RuleCall)cTensorflowAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ETensorFlowCase:
		//	'ai_framework-tensorflow:'
		//	BEGIN
		//	tensorflow=ETensorFlow
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'ai_framework-tensorflow:' BEGIN tensorflow=ETensorFlow END
		public Group getGroup() { return cGroup; }
		
		//'ai_framework-tensorflow:'
		public Keyword getAi_frameworkTensorflowKeyword_0() { return cAi_frameworkTensorflowKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//tensorflow=ETensorFlow
		public Assignment getTensorflowAssignment_2() { return cTensorflowAssignment_2; }
		
		//ETensorFlow
		public RuleCall getTensorflowETensorFlowParserRuleCall_2_0() { return cTensorflowETensorFlowParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EKerasCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EKerasCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAi_frameworkKerasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cKerasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKerasEKerasParserRuleCall_2_0 = (RuleCall)cKerasAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EKerasCase:
		//	'ai_framework-keras:'
		//	BEGIN
		//	keras=EKeras
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'ai_framework-keras:' BEGIN keras=EKeras END
		public Group getGroup() { return cGroup; }
		
		//'ai_framework-keras:'
		public Keyword getAi_frameworkKerasKeyword_0() { return cAi_frameworkKerasKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//keras=EKeras
		public Assignment getKerasAssignment_2() { return cKerasAssignment_2; }
		
		//EKeras
		public RuleCall getKerasEKerasParserRuleCall_2_0() { return cKerasEKerasParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EAITrainingConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITrainingConfig");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cAi_frameworkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAi_frameworkAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAi_frameworkEAIFrameworkParserRuleCall_0_1_0 = (RuleCall)cAi_frameworkAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cTypeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeEAITrainingTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cDistributed_trainingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDistributed_trainingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDistributed_trainingBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cDistributed_trainingAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cLayersKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayersINTTerminalRuleCall_3_1_0 = (RuleCall)cLayersAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersINTTerminalRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		
		//EAITrainingConfig:
		//	'ai_framework:' ai_framework=EAIFramework & ('type:' type=EAITrainingType)? & ('distributed_training:'
		//	distributed_training=BOOLEAN)? & ('layers:' layers=INT)? & ('parameters:' parameters=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ai_framework:' ai_framework=EAIFramework & ('type:' type=EAITrainingType)? & ('distributed_training:'
		//distributed_training=BOOLEAN)? & ('layers:' layers=INT)? & ('parameters:' parameters=INT)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'ai_framework:' ai_framework=EAIFramework
		public Group getGroup_0() { return cGroup_0; }
		
		//'ai_framework:'
		public Keyword getAi_frameworkKeyword_0_0() { return cAi_frameworkKeyword_0_0; }
		
		//ai_framework=EAIFramework
		public Assignment getAi_frameworkAssignment_0_1() { return cAi_frameworkAssignment_0_1; }
		
		//EAIFramework
		public RuleCall getAi_frameworkEAIFrameworkParserRuleCall_0_1_0() { return cAi_frameworkEAIFrameworkParserRuleCall_0_1_0; }
		
		//('type:' type=EAITrainingType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'type:'
		public Keyword getTypeKeyword_1_0() { return cTypeKeyword_1_0; }
		
		//type=EAITrainingType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//EAITrainingType
		public RuleCall getTypeEAITrainingTypeParserRuleCall_1_1_0() { return cTypeEAITrainingTypeParserRuleCall_1_1_0; }
		
		//('distributed_training:' distributed_training=BOOLEAN)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'distributed_training:'
		public Keyword getDistributed_trainingKeyword_2_0() { return cDistributed_trainingKeyword_2_0; }
		
		//distributed_training=BOOLEAN
		public Assignment getDistributed_trainingAssignment_2_1() { return cDistributed_trainingAssignment_2_1; }
		
		//BOOLEAN
		public RuleCall getDistributed_trainingBOOLEANTerminalRuleCall_2_1_0() { return cDistributed_trainingBOOLEANTerminalRuleCall_2_1_0; }
		
		//('layers:' layers=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'layers:'
		public Keyword getLayersKeyword_3_0() { return cLayersKeyword_3_0; }
		
		//layers=INT
		public Assignment getLayersAssignment_3_1() { return cLayersAssignment_3_1; }
		
		//INT
		public RuleCall getLayersINTTerminalRuleCall_3_1_0() { return cLayersINTTerminalRuleCall_3_1_0; }
		
		//('parameters:' parameters=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters:'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//parameters=INT
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//INT
		public RuleCall getParametersINTTerminalRuleCall_4_1_0() { return cParametersINTTerminalRuleCall_4_1_0; }
	}
	public class EAIFrameworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAIFramework");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTensorflowKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPytorchKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cKerasKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCntkKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMxnetKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EAIFramework:
		//	'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet';
		@Override public ParserRule getRule() { return rule; }
		
		//'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'tensorflow'
		public Keyword getTensorflowKeyword_0() { return cTensorflowKeyword_0; }
		
		//'pytorch'
		public Keyword getPytorchKeyword_1() { return cPytorchKeyword_1; }
		
		//'keras'
		public Keyword getKerasKeyword_2() { return cKerasKeyword_2; }
		
		//'cntk'
		public Keyword getCntkKeyword_3() { return cCntkKeyword_3; }
		
		//'mxnet'
		public Keyword getMxnetKeyword_4() { return cMxnetKeyword_4; }
	}
	public class EAITrainingTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITrainingType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImage_classificationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cObject_detectionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTranslationKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRecommendationKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cReinforncement_learningKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EAITrainingType:
		//	'image_classification' | 'object_detection' | 'translation' | 'recommendation' | 'reinforncement_learning';
		@Override public ParserRule getRule() { return rule; }
		
		//'image_classification' | 'object_detection' | 'translation' | 'recommendation' | 'reinforncement_learning'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'image_classification'
		public Keyword getImage_classificationKeyword_0() { return cImage_classificationKeyword_0; }
		
		//'object_detection'
		public Keyword getObject_detectionKeyword_1() { return cObject_detectionKeyword_1; }
		
		//'translation'
		public Keyword getTranslationKeyword_2() { return cTranslationKeyword_2; }
		
		//'recommendation'
		public Keyword getRecommendationKeyword_3() { return cRecommendationKeyword_3; }
		
		//'reinforncement_learning'
		public Keyword getReinforncement_learningKeyword_4() { return cReinforncement_learningKeyword_4; }
	}
	public class EAITrainingDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITrainingData");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLocationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLocationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLocationSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cLocationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cBasedataKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBasedataAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBasedataEBasedataParserRuleCall_1_1_0 = (RuleCall)cBasedataAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cSizeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCountKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCountAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_3_1_0 = (RuleCall)cCountAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cEtlKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cEtlAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEtlEAITrainingETLParserRuleCall_4_2_0 = (RuleCall)cEtlAssignment_4_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//EAITrainingData:
		//	('location:' location=STRING)? & ('basedata:' basedata=EBasedata)? & ('size:' size=INT)? & ('count:' count=INT)? &
		//	('etl:'
		//	BEGIN
		//	etl=EAITrainingETL
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('location:' location=STRING)? & ('basedata:' basedata=EBasedata)? & ('size:' size=INT)? & ('count:' count=INT)? &
		//('etl:' BEGIN etl=EAITrainingETL END)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('location:' location=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'location:'
		public Keyword getLocationKeyword_0_0() { return cLocationKeyword_0_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_0_1() { return cLocationAssignment_0_1; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_0_1_0() { return cLocationSTRINGTerminalRuleCall_0_1_0; }
		
		//('basedata:' basedata=EBasedata)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'basedata:'
		public Keyword getBasedataKeyword_1_0() { return cBasedataKeyword_1_0; }
		
		//basedata=EBasedata
		public Assignment getBasedataAssignment_1_1() { return cBasedataAssignment_1_1; }
		
		//EBasedata
		public RuleCall getBasedataEBasedataParserRuleCall_1_1_0() { return cBasedataEBasedataParserRuleCall_1_1_0; }
		
		//('size:' size=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'size:'
		public Keyword getSizeKeyword_2_0() { return cSizeKeyword_2_0; }
		
		//size=INT
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_1_0() { return cSizeINTTerminalRuleCall_2_1_0; }
		
		//('count:' count=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'count:'
		public Keyword getCountKeyword_3_0() { return cCountKeyword_3_0; }
		
		//count=INT
		public Assignment getCountAssignment_3_1() { return cCountAssignment_3_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_3_1_0() { return cCountINTTerminalRuleCall_3_1_0; }
		
		//('etl:' BEGIN etl=EAITrainingETL END)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'etl:'
		public Keyword getEtlKeyword_4_0() { return cEtlKeyword_4_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4_1() { return cBEGINTerminalRuleCall_4_1; }
		
		//etl=EAITrainingETL
		public Assignment getEtlAssignment_4_2() { return cEtlAssignment_4_2; }
		
		//EAITrainingETL
		public RuleCall getEtlEAITrainingETLParserRuleCall_4_2_0() { return cEtlEAITrainingETLParserRuleCall_4_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4_3() { return cENDTerminalRuleCall_4_3; }
	}
	public class EBasedataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EBasedata");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImagenetKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCifarKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMnistKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EBasedata:
		//	'imagenet' | 'cifar' | 'mnist';
		@Override public ParserRule getRule() { return rule; }
		
		//'imagenet' | 'cifar' | 'mnist'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'imagenet'
		public Keyword getImagenetKeyword_0() { return cImagenetKeyword_0; }
		
		//'cifar'
		public Keyword getCifarKeyword_1() { return cCifarKeyword_1; }
		
		//'mnist'
		public Keyword getMnistKeyword_2() { return cMnistKeyword_2; }
	}
	public class EAITrainingETLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EAITrainingETL");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cPrefetchKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPrefetchAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrefetchINTTerminalRuleCall_0_1_0 = (RuleCall)cPrefetchAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cCacheKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCacheAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCacheINTTerminalRuleCall_1_1_0 = (RuleCall)cCacheAssignment_1_1.eContents().get(0);
		
		//EAITrainingETL:
		//	('prefetch:' prefetch=INT)? & ('cache:' cache=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('prefetch:' prefetch=INT)? & ('cache:' cache=INT)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('prefetch:' prefetch=INT)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'prefetch:'
		public Keyword getPrefetchKeyword_0_0() { return cPrefetchKeyword_0_0; }
		
		//prefetch=INT
		public Assignment getPrefetchAssignment_0_1() { return cPrefetchAssignment_0_1; }
		
		//INT
		public RuleCall getPrefetchINTTerminalRuleCall_0_1_0() { return cPrefetchINTTerminalRuleCall_0_1_0; }
		
		//('cache:' cache=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'cache:'
		public Keyword getCacheKeyword_1_0() { return cCacheKeyword_1_0; }
		
		//cache=INT
		public Assignment getCacheAssignment_1_1() { return cCacheAssignment_1_1; }
		
		//INT
		public RuleCall getCacheINTTerminalRuleCall_1_1_0() { return cCacheINTTerminalRuleCall_1_1_0; }
	}
	public class EKerasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EKeras");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cVersionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVersionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cVersionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cBackendKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBackendAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBackendEAIFrameworkParserRuleCall_1_1_0 = (RuleCall)cBackendAssignment_1_1.eContents().get(0);
		
		//EKeras:
		//	('version:' version=STRING)? & ('backend:' backend=EAIFramework)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('version:' version=STRING)? & ('backend:' backend=EAIFramework)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('version:' version=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'version:'
		public Keyword getVersionKeyword_0_0() { return cVersionKeyword_0_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_0_1() { return cVersionAssignment_0_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_0_1_0() { return cVersionSTRINGTerminalRuleCall_0_1_0; }
		
		//('backend:' backend=EAIFramework)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'backend:'
		public Keyword getBackendKeyword_1_0() { return cBackendKeyword_1_0; }
		
		//backend=EAIFramework
		public Assignment getBackendAssignment_1_1() { return cBackendAssignment_1_1; }
		
		//EAIFramework
		public RuleCall getBackendEAIFrameworkParserRuleCall_1_1_0() { return cBackendEAIFrameworkParserRuleCall_1_1_0; }
	}
	public class ETensorFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.ETensorFlow");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cVersionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVersionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cVersionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cXlaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cXlaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cXlaBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cXlaAssignment_1_1.eContents().get(0);
		
		////EBackend:
		////	'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet';
		//ETensorFlow:
		//	('version:' version=STRING)? & ('xla:' xla=BOOLEAN)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('version:' version=STRING)? & ('xla:' xla=BOOLEAN)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('version:' version=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'version:'
		public Keyword getVersionKeyword_0_0() { return cVersionKeyword_0_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_0_1() { return cVersionAssignment_0_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_0_1_0() { return cVersionSTRINGTerminalRuleCall_0_1_0; }
		
		//('xla:' xla=BOOLEAN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'xla:'
		public Keyword getXlaKeyword_1_0() { return cXlaKeyword_1_0; }
		
		//xla=BOOLEAN
		public Assignment getXlaAssignment_1_1() { return cXlaAssignment_1_1; }
		
		//BOOLEAN
		public RuleCall getXlaBOOLEANTerminalRuleCall_1_1_0() { return cXlaBOOLEANTerminalRuleCall_1_1_0; }
	}
	public class EPyTorchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EPyTorch");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cVersionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVersionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cVersionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cGlowKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGlowAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGlowBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cGlowAssignment_1_1.eContents().get(0);
		
		//EPyTorch:
		//	('version:' version=STRING)? & ('glow:' glow=BOOLEAN)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('version:' version=STRING)? & ('glow:' glow=BOOLEAN)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('version:' version=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'version:'
		public Keyword getVersionKeyword_0_0() { return cVersionKeyword_0_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_0_1() { return cVersionAssignment_0_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_0_1_0() { return cVersionSTRINGTerminalRuleCall_0_1_0; }
		
		//('glow:' glow=BOOLEAN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'glow:'
		public Keyword getGlowKeyword_1_0() { return cGlowKeyword_1_0; }
		
		//glow=BOOLEAN
		public Assignment getGlowAssignment_1_1() { return cGlowAssignment_1_1; }
		
		//BOOLEAN
		public RuleCall getGlowBOOLEANTerminalRuleCall_1_1_0() { return cGlowBOOLEANTerminalRuleCall_1_1_0; }
	}
	public class EHPCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EHPC");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cConfigKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cConfigAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cConfigEHPCConfigParserRuleCall_0_0_2_0 = (RuleCall)cConfigAssignment_0_0_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cDataKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cDataAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cDataEHPCDataParserRuleCall_0_1_2_0 = (RuleCall)cDataAssignment_0_1_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final Assignment cMpiAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cMpiEMPICaseParserRuleCall_0_2_0 = (RuleCall)cMpiAssignment_0_2.eContents().get(0);
		private final Assignment cOpenmpAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cOpenmpEOPENMPCaseParserRuleCall_1_0 = (RuleCall)cOpenmpAssignment_1.eContents().get(0);
		private final Assignment cOpenaccAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cOpenaccEOPENACCCaseParserRuleCall_2_0 = (RuleCall)cOpenaccAssignment_2.eContents().get(0);
		private final Assignment cOpenclAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cOpenclEOPENCLCaseParserRuleCall_3_0 = (RuleCall)cOpenclAssignment_3.eContents().get(0);
		
		//EHPC:
		//	('config:'
		//	BEGIN
		//	config=EHPCConfig
		//	END) ('data:'
		//	BEGIN
		//	data=EHPCData
		//	END) mpi=EMPICase? & openmp=EOPENMPCase? & openacc=EOPENACCCase? & opencl=EOPENCLCase?;
		@Override public ParserRule getRule() { return rule; }
		
		//('config:' BEGIN config=EHPCConfig END) ('data:' BEGIN data=EHPCData END) mpi=EMPICase? & openmp=EOPENMPCase? &
		//openacc=EOPENACCCase? & opencl=EOPENCLCase?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('config:' BEGIN config=EHPCConfig END) ('data:' BEGIN data=EHPCData END) mpi=EMPICase?
		public Group getGroup_0() { return cGroup_0; }
		
		//('config:' BEGIN config=EHPCConfig END)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'config:'
		public Keyword getConfigKeyword_0_0_0() { return cConfigKeyword_0_0_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0_0_1() { return cBEGINTerminalRuleCall_0_0_1; }
		
		//config=EHPCConfig
		public Assignment getConfigAssignment_0_0_2() { return cConfigAssignment_0_0_2; }
		
		//EHPCConfig
		public RuleCall getConfigEHPCConfigParserRuleCall_0_0_2_0() { return cConfigEHPCConfigParserRuleCall_0_0_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_0_0_3() { return cENDTerminalRuleCall_0_0_3; }
		
		//('data:' BEGIN data=EHPCData END)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'data:'
		public Keyword getDataKeyword_0_1_0() { return cDataKeyword_0_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0_1_1() { return cBEGINTerminalRuleCall_0_1_1; }
		
		//data=EHPCData
		public Assignment getDataAssignment_0_1_2() { return cDataAssignment_0_1_2; }
		
		//EHPCData
		public RuleCall getDataEHPCDataParserRuleCall_0_1_2_0() { return cDataEHPCDataParserRuleCall_0_1_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_0_1_3() { return cENDTerminalRuleCall_0_1_3; }
		
		//mpi=EMPICase?
		public Assignment getMpiAssignment_0_2() { return cMpiAssignment_0_2; }
		
		//EMPICase
		public RuleCall getMpiEMPICaseParserRuleCall_0_2_0() { return cMpiEMPICaseParserRuleCall_0_2_0; }
		
		//openmp=EOPENMPCase?
		public Assignment getOpenmpAssignment_1() { return cOpenmpAssignment_1; }
		
		//EOPENMPCase
		public RuleCall getOpenmpEOPENMPCaseParserRuleCall_1_0() { return cOpenmpEOPENMPCaseParserRuleCall_1_0; }
		
		//openacc=EOPENACCCase?
		public Assignment getOpenaccAssignment_2() { return cOpenaccAssignment_2; }
		
		//EOPENACCCase
		public RuleCall getOpenaccEOPENACCCaseParserRuleCall_2_0() { return cOpenaccEOPENACCCaseParserRuleCall_2_0; }
		
		//opencl=EOPENCLCase?
		public Assignment getOpenclAssignment_3() { return cOpenclAssignment_3; }
		
		//EOPENCLCase
		public RuleCall getOpenclEOPENCLCaseParserRuleCall_3_0() { return cOpenclEOPENCLCaseParserRuleCall_3_0; }
	}
	public class EOPENCLCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENCLCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelisationOpenclKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOpenclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpenclEOPENCLParserRuleCall_2_0 = (RuleCall)cOpenclAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EOPENCLCase:
		//	'parallelisation-opencl:'
		//	BEGIN
		//	opencl=EOPENCL
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallelisation-opencl:' BEGIN opencl=EOPENCL END
		public Group getGroup() { return cGroup; }
		
		//'parallelisation-opencl:'
		public Keyword getParallelisationOpenclKeyword_0() { return cParallelisationOpenclKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//opencl=EOPENCL
		public Assignment getOpenclAssignment_2() { return cOpenclAssignment_2; }
		
		//EOPENCL
		public RuleCall getOpenclEOPENCLParserRuleCall_2_0() { return cOpenclEOPENCLParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EOPENACCCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENACCCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelisationOpenaccKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOpenaccAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpenaccEOPENACCParserRuleCall_2_0 = (RuleCall)cOpenaccAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EOPENACCCase:
		//	'parallelisation-openacc:'
		//	BEGIN
		//	openacc=EOPENACC
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallelisation-openacc:' BEGIN openacc=EOPENACC END
		public Group getGroup() { return cGroup; }
		
		//'parallelisation-openacc:'
		public Keyword getParallelisationOpenaccKeyword_0() { return cParallelisationOpenaccKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//openacc=EOPENACC
		public Assignment getOpenaccAssignment_2() { return cOpenaccAssignment_2; }
		
		//EOPENACC
		public RuleCall getOpenaccEOPENACCParserRuleCall_2_0() { return cOpenaccEOPENACCParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EOPENMPCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENMPCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelisationOpenmpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOpenmpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpenmpEOPENMPParserRuleCall_2_0 = (RuleCall)cOpenmpAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EOPENMPCase:
		//	'parallelisation-openmp:'
		//	BEGIN
		//	openmp=EOPENMP
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallelisation-openmp:' BEGIN openmp=EOPENMP END
		public Group getGroup() { return cGroup; }
		
		//'parallelisation-openmp:'
		public Keyword getParallelisationOpenmpKeyword_0() { return cParallelisationOpenmpKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//openmp=EOPENMP
		public Assignment getOpenmpAssignment_2() { return cOpenmpAssignment_2; }
		
		//EOPENMP
		public RuleCall getOpenmpEOPENMPParserRuleCall_2_0() { return cOpenmpEOPENMPParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EMPICaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EMPICase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelisationMpiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMpiAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMpiEMPIParserRuleCall_2_0 = (RuleCall)cMpiAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EMPICase:
		//	'parallelisation-mpi:'
		//	BEGIN
		//	mpi=EMPI
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallelisation-mpi:' BEGIN mpi=EMPI END
		public Group getGroup() { return cGroup; }
		
		//'parallelisation-mpi:'
		public Keyword getParallelisationMpiKeyword_0() { return cParallelisationMpiKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//mpi=EMPI
		public Assignment getMpiAssignment_2() { return cMpiAssignment_2; }
		
		//EMPI
		public RuleCall getMpiEMPIParserRuleCall_2_0() { return cMpiEMPIParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class EHPCConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EHPCConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelisationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParallelisationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParallelisationEParallelisationParserRuleCall_1_0 = (RuleCall)cParallelisationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParallelisationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParallelisationEParallelisationParserRuleCall_2_1_0 = (RuleCall)cParallelisationAssignment_2_1.eContents().get(0);
		
		//EHPCConfig:
		//	'parallelisation:' parallelisation+=EParallelisation (',' parallelisation+=EParallelisation)* //Multiple selections are supported
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallelisation:' parallelisation+=EParallelisation (',' parallelisation+=EParallelisation)*
		public Group getGroup() { return cGroup; }
		
		//'parallelisation:'
		public Keyword getParallelisationKeyword_0() { return cParallelisationKeyword_0; }
		
		//parallelisation+=EParallelisation
		public Assignment getParallelisationAssignment_1() { return cParallelisationAssignment_1; }
		
		//EParallelisation
		public RuleCall getParallelisationEParallelisationParserRuleCall_1_0() { return cParallelisationEParallelisationParserRuleCall_1_0; }
		
		//(',' parallelisation+=EParallelisation)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//parallelisation+=EParallelisation
		public Assignment getParallelisationAssignment_2_1() { return cParallelisationAssignment_2_1; }
		
		//EParallelisation
		public RuleCall getParallelisationEParallelisationParserRuleCall_2_1_0() { return cParallelisationEParallelisationParserRuleCall_2_1_0; }
	}
	public class EParallelisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EParallelisation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMpiKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOpenmpKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOpenaccKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOpenclKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EParallelisation:
		//	'mpi' | 'openmp' | 'openacc' | 'opencl';
		@Override public ParserRule getRule() { return rule; }
		
		//'mpi' | 'openmp' | 'openacc' | 'opencl'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'mpi'
		public Keyword getMpiKeyword_0() { return cMpiKeyword_0; }
		
		//'openmp'
		public Keyword getOpenmpKeyword_1() { return cOpenmpKeyword_1; }
		
		//'openacc'
		public Keyword getOpenaccKeyword_2() { return cOpenaccKeyword_2; }
		
		//'opencl'
		public Keyword getOpenclKeyword_3() { return cOpenclKeyword_3; }
	}
	public class EHPCDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EHPCData");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLocationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLocationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLocationSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cLocationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cBasedataKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBasedataAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBasedataEHPCBasedataParserRuleCall_1_1_0 = (RuleCall)cBasedataAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cSizeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCountKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCountAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_3_1_0 = (RuleCall)cCountAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cEtlKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cEtlAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEtlEHPCETLParserRuleCall_4_2_0 = (RuleCall)cEtlAssignment_4_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//EHPCData:
		//	('location:' location=STRING)? & ('basedata:' basedata=EHPCBasedata)? & ('size:' size=INT)? & ('count:' count=INT)? &
		//	('etl:'
		//	BEGIN
		//	etl=EHPCETL
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('location:' location=STRING)? & ('basedata:' basedata=EHPCBasedata)? & ('size:' size=INT)? & ('count:' count=INT)? &
		//('etl:' BEGIN etl=EHPCETL END)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('location:' location=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'location:'
		public Keyword getLocationKeyword_0_0() { return cLocationKeyword_0_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_0_1() { return cLocationAssignment_0_1; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_0_1_0() { return cLocationSTRINGTerminalRuleCall_0_1_0; }
		
		//('basedata:' basedata=EHPCBasedata)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'basedata:'
		public Keyword getBasedataKeyword_1_0() { return cBasedataKeyword_1_0; }
		
		//basedata=EHPCBasedata
		public Assignment getBasedataAssignment_1_1() { return cBasedataAssignment_1_1; }
		
		//EHPCBasedata
		public RuleCall getBasedataEHPCBasedataParserRuleCall_1_1_0() { return cBasedataEHPCBasedataParserRuleCall_1_1_0; }
		
		//('size:' size=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'size:'
		public Keyword getSizeKeyword_2_0() { return cSizeKeyword_2_0; }
		
		//size=INT
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_1_0() { return cSizeINTTerminalRuleCall_2_1_0; }
		
		//('count:' count=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'count:'
		public Keyword getCountKeyword_3_0() { return cCountKeyword_3_0; }
		
		//count=INT
		public Assignment getCountAssignment_3_1() { return cCountAssignment_3_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_3_1_0() { return cCountINTTerminalRuleCall_3_1_0; }
		
		//('etl:' BEGIN etl=EHPCETL END)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'etl:'
		public Keyword getEtlKeyword_4_0() { return cEtlKeyword_4_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4_1() { return cBEGINTerminalRuleCall_4_1; }
		
		//etl=EHPCETL
		public Assignment getEtlAssignment_4_2() { return cEtlAssignment_4_2; }
		
		//EHPCETL
		public RuleCall getEtlEHPCETLParserRuleCall_4_2_0() { return cEtlEHPCETLParserRuleCall_4_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4_3() { return cENDTerminalRuleCall_4_3; }
	}
	public class EHPCETLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EHPCETL");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cPrefetchKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPrefetchAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrefetchBOOLEANTerminalRuleCall_0_1_0 = (RuleCall)cPrefetchAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cCacheKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCacheAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCacheBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cCacheAssignment_1_1.eContents().get(0);
		
		//EHPCETL:
		//	('prefetch:' prefetch=BOOLEAN)? & ('cache:' cache=BOOLEAN)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('prefetch:' prefetch=BOOLEAN)? & ('cache:' cache=BOOLEAN)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('prefetch:' prefetch=BOOLEAN)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'prefetch:'
		public Keyword getPrefetchKeyword_0_0() { return cPrefetchKeyword_0_0; }
		
		//prefetch=BOOLEAN
		public Assignment getPrefetchAssignment_0_1() { return cPrefetchAssignment_0_1; }
		
		//BOOLEAN
		public RuleCall getPrefetchBOOLEANTerminalRuleCall_0_1_0() { return cPrefetchBOOLEANTerminalRuleCall_0_1_0; }
		
		//('cache:' cache=BOOLEAN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'cache:'
		public Keyword getCacheKeyword_1_0() { return cCacheKeyword_1_0; }
		
		//cache=BOOLEAN
		public Assignment getCacheAssignment_1_1() { return cCacheAssignment_1_1; }
		
		//BOOLEAN
		public RuleCall getCacheBOOLEANTerminalRuleCall_1_1_0() { return cCacheBOOLEANTerminalRuleCall_1_1_0; }
	}
	public class EHPCBasedataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EHPCBasedata");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRestartKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EHPCBasedata:
		//	'image' | 'restart';
		@Override public ParserRule getRule() { return rule; }
		
		//'image' | 'restart'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//'restart'
		public Keyword getRestartKeyword_1() { return cRestartKeyword_1; }
	}
	public class EMPIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EMPI");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLibraryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLibraryAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLibraryEMPILibraryParserRuleCall_0_1_0 = (RuleCall)cLibraryAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cVersionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cScaling_efficiencyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScaling_efficiencyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScaling_efficiencyRealValueParserRuleCall_2_1_0 = (RuleCall)cScaling_efficiencyAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cCore_subscriptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCore_subscriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCore_subscriptionINTTerminalRuleCall_3_1_0 = (RuleCall)cCore_subscriptionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cMessage_sizeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMessage_sizeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMessage_sizeEMPIMessageSizeParserRuleCall_4_1_0 = (RuleCall)cMessage_sizeAssignment_4_1.eContents().get(0);
		
		//EMPI:
		//	'library:' library=EMPILibrary & ('version:' version=STRING)? & ('scaling_efficiency:' scaling_efficiency=RealValue)?
		//	& ('core_subscription:' core_subscription=INT)? & ('message_size:' message_size=EMPIMessageSize)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'library:' library=EMPILibrary & ('version:' version=STRING)? & ('scaling_efficiency:' scaling_efficiency=RealValue)? &
		//('core_subscription:' core_subscription=INT)? & ('message_size:' message_size=EMPIMessageSize)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'library:' library=EMPILibrary
		public Group getGroup_0() { return cGroup_0; }
		
		//'library:'
		public Keyword getLibraryKeyword_0_0() { return cLibraryKeyword_0_0; }
		
		//library=EMPILibrary
		public Assignment getLibraryAssignment_0_1() { return cLibraryAssignment_0_1; }
		
		//EMPILibrary
		public RuleCall getLibraryEMPILibraryParserRuleCall_0_1_0() { return cLibraryEMPILibraryParserRuleCall_0_1_0; }
		
		//('version:' version=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'version:'
		public Keyword getVersionKeyword_1_0() { return cVersionKeyword_1_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_1_0() { return cVersionSTRINGTerminalRuleCall_1_1_0; }
		
		//('scaling_efficiency:' scaling_efficiency=RealValue)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'scaling_efficiency:'
		public Keyword getScaling_efficiencyKeyword_2_0() { return cScaling_efficiencyKeyword_2_0; }
		
		//scaling_efficiency=RealValue
		public Assignment getScaling_efficiencyAssignment_2_1() { return cScaling_efficiencyAssignment_2_1; }
		
		//RealValue
		public RuleCall getScaling_efficiencyRealValueParserRuleCall_2_1_0() { return cScaling_efficiencyRealValueParserRuleCall_2_1_0; }
		
		//('core_subscription:' core_subscription=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'core_subscription:'
		public Keyword getCore_subscriptionKeyword_3_0() { return cCore_subscriptionKeyword_3_0; }
		
		//core_subscription=INT
		public Assignment getCore_subscriptionAssignment_3_1() { return cCore_subscriptionAssignment_3_1; }
		
		//INT
		public RuleCall getCore_subscriptionINTTerminalRuleCall_3_1_0() { return cCore_subscriptionINTTerminalRuleCall_3_1_0; }
		
		//('message_size:' message_size=EMPIMessageSize)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'message_size:'
		public Keyword getMessage_sizeKeyword_4_0() { return cMessage_sizeKeyword_4_0; }
		
		//message_size=EMPIMessageSize
		public Assignment getMessage_sizeAssignment_4_1() { return cMessage_sizeAssignment_4_1; }
		
		//EMPIMessageSize
		public RuleCall getMessage_sizeEMPIMessageSizeParserRuleCall_4_1_0() { return cMessage_sizeEMPIMessageSizeParserRuleCall_4_1_0; }
	}
	public class EMPILibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EMPILibrary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMvapchKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOpnmpiKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EMPILibrary:
		//	'mvapch' | 'opnmpi';
		@Override public ParserRule getRule() { return rule; }
		
		//'mvapch' | 'opnmpi'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'mvapch'
		public Keyword getMvapchKeyword_0() { return cMvapchKeyword_0; }
		
		//'opnmpi'
		public Keyword getOpnmpiKeyword_1() { return cOpnmpiKeyword_1; }
	}
	public class EMPIMessageSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EMPIMessageSize");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSmallKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMediumKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLargeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EMPIMessageSize:
		//	'small' | 'medium' | 'large';
		@Override public ParserRule getRule() { return rule; }
		
		//'small' | 'medium' | 'large'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'small'
		public Keyword getSmallKeyword_0() { return cSmallKeyword_0; }
		
		//'medium'
		public Keyword getMediumKeyword_1() { return cMediumKeyword_1; }
		
		//'large'
		public Keyword getLargeKeyword_2() { return cLargeKeyword_2; }
	}
	public class EOPENMPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENMP");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cNumber_of_threadsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNumber_of_threadsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumber_of_threadsINTTerminalRuleCall_0_1_0 = (RuleCall)cNumber_of_threadsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cScaling_efficiencyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cScaling_efficiencyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cScaling_efficiencyRealValueParserRuleCall_1_1_0 = (RuleCall)cScaling_efficiencyAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cAffinityKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAffinityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAffinityEOPENAffinityParserRuleCall_2_1_0 = (RuleCall)cAffinityAssignment_2_1.eContents().get(0);
		
		//EOPENMP:
		//	'number_of_threads:' number_of_threads=INT & ('scaling_efficiency:' scaling_efficiency=RealValue)? & ('affinity:'
		//	affinity=EOPENAffinity)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'number_of_threads:' number_of_threads=INT & ('scaling_efficiency:' scaling_efficiency=RealValue)? & ('affinity:'
		//affinity=EOPENAffinity)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'number_of_threads:' number_of_threads=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'number_of_threads:'
		public Keyword getNumber_of_threadsKeyword_0_0() { return cNumber_of_threadsKeyword_0_0; }
		
		//number_of_threads=INT
		public Assignment getNumber_of_threadsAssignment_0_1() { return cNumber_of_threadsAssignment_0_1; }
		
		//INT
		public RuleCall getNumber_of_threadsINTTerminalRuleCall_0_1_0() { return cNumber_of_threadsINTTerminalRuleCall_0_1_0; }
		
		//('scaling_efficiency:' scaling_efficiency=RealValue)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'scaling_efficiency:'
		public Keyword getScaling_efficiencyKeyword_1_0() { return cScaling_efficiencyKeyword_1_0; }
		
		//scaling_efficiency=RealValue
		public Assignment getScaling_efficiencyAssignment_1_1() { return cScaling_efficiencyAssignment_1_1; }
		
		//RealValue
		public RuleCall getScaling_efficiencyRealValueParserRuleCall_1_1_0() { return cScaling_efficiencyRealValueParserRuleCall_1_1_0; }
		
		//('affinity:' affinity=EOPENAffinity)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'affinity:'
		public Keyword getAffinityKeyword_2_0() { return cAffinityKeyword_2_0; }
		
		//affinity=EOPENAffinity
		public Assignment getAffinityAssignment_2_1() { return cAffinityAssignment_2_1; }
		
		//EOPENAffinity
		public RuleCall getAffinityEOPENAffinityParserRuleCall_2_1_0() { return cAffinityEOPENAffinityParserRuleCall_2_1_0; }
	}
	public class EOPENAffinityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENAffinity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBlockKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSimpleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EOPENAffinity:
		//	'block' | 'simple';
		@Override public ParserRule getRule() { return rule; }
		
		//'block' | 'simple'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'block'
		public Keyword getBlockKeyword_0() { return cBlockKeyword_0; }
		
		//'simple'
		public Keyword getSimpleKeyword_1() { return cSimpleKeyword_1; }
	}
	public class EOPENACCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENACC");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cCompilerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCompilerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCompilerECompilerParserRuleCall_0_1_0 = (RuleCall)cCompilerAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cVersionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cNumber_of_accKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumber_of_accAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumber_of_accINTTerminalRuleCall_2_1_0 = (RuleCall)cNumber_of_accAssignment_2_1.eContents().get(0);
		
		//EOPENACC:
		//	'compiler:' compiler=ECompiler & ('version:' version=STRING)? & ('number_of_acc:' number_of_acc=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'compiler:' compiler=ECompiler & ('version:' version=STRING)? & ('number_of_acc:' number_of_acc=INT)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'compiler:' compiler=ECompiler
		public Group getGroup_0() { return cGroup_0; }
		
		//'compiler:'
		public Keyword getCompilerKeyword_0_0() { return cCompilerKeyword_0_0; }
		
		//compiler=ECompiler
		public Assignment getCompilerAssignment_0_1() { return cCompilerAssignment_0_1; }
		
		//ECompiler
		public RuleCall getCompilerECompilerParserRuleCall_0_1_0() { return cCompilerECompilerParserRuleCall_0_1_0; }
		
		//('version:' version=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'version:'
		public Keyword getVersionKeyword_1_0() { return cVersionKeyword_1_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_1_0() { return cVersionSTRINGTerminalRuleCall_1_1_0; }
		
		//('number_of_acc:' number_of_acc=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'number_of_acc:'
		public Keyword getNumber_of_accKeyword_2_0() { return cNumber_of_accKeyword_2_0; }
		
		//number_of_acc=INT
		public Assignment getNumber_of_accAssignment_2_1() { return cNumber_of_accAssignment_2_1; }
		
		//INT
		public RuleCall getNumber_of_accINTTerminalRuleCall_2_1_0() { return cNumber_of_accINTTerminalRuleCall_2_1_0; }
	}
	public class EOPENCLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EOPENCL");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cCompilerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCompilerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCompilerECompilerParserRuleCall_0_1_0 = (RuleCall)cCompilerAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cVersionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cNumber_of_accKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumber_of_accAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumber_of_accINTTerminalRuleCall_2_1_0 = (RuleCall)cNumber_of_accAssignment_2_1.eContents().get(0);
		
		//EOPENCL:
		//	'compiler:' compiler=ECompiler & ('version:' version=STRING)? & ('number_of_acc:' number_of_acc=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'compiler:' compiler=ECompiler & ('version:' version=STRING)? & ('number_of_acc:' number_of_acc=INT)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'compiler:' compiler=ECompiler
		public Group getGroup_0() { return cGroup_0; }
		
		//'compiler:'
		public Keyword getCompilerKeyword_0_0() { return cCompilerKeyword_0_0; }
		
		//compiler=ECompiler
		public Assignment getCompilerAssignment_0_1() { return cCompilerAssignment_0_1; }
		
		//ECompiler
		public RuleCall getCompilerECompilerParserRuleCall_0_1_0() { return cCompilerECompilerParserRuleCall_0_1_0; }
		
		//('version:' version=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'version:'
		public Keyword getVersionKeyword_1_0() { return cVersionKeyword_1_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_1_0() { return cVersionSTRINGTerminalRuleCall_1_1_0; }
		
		//('number_of_acc:' number_of_acc=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'number_of_acc:'
		public Keyword getNumber_of_accKeyword_2_0() { return cNumber_of_accKeyword_2_0; }
		
		//number_of_acc=INT
		public Assignment getNumber_of_accAssignment_2_1() { return cNumber_of_accAssignment_2_1; }
		
		//INT
		public RuleCall getNumber_of_accINTTerminalRuleCall_2_1_0() { return cNumber_of_accINTTerminalRuleCall_2_1_0; }
	}
	public class ECompilerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.ECompiler");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPgiKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCrayKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ECompiler:
		//	'pgi' | 'cray';
		@Override public ParserRule getRule() { return rule; }
		
		//'pgi' | 'cray'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pgi'
		public Keyword getPgiKeyword_0() { return cPgiKeyword_0; }
		
		//'cray'
		public Keyword getCrayKeyword_1() { return cCrayKeyword_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cEXT_INTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//REAL hidden():
		//	INT? '.' (EXT_INT | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//INT? '.' (EXT_INT | INT)
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(EXT_INT | INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_0() { return cEXT_INTTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.RealValue");
		private final RuleCall cREALParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RealValue ecore::EDoubleObject:
		//	REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//REAL
		public RuleCall getREALParserRuleCall() { return cREALParserRuleCall; }
	}
	
	
	private final Optimization_ModelElements pOptimization_Model;
	private final EOptimizationElements pEOptimization;
	private final EOptimizationCasesElements pEOptimizationCases;
	private final EAITrainingCaseElements pEAITrainingCase;
	private final EHPCCaseElements pEHPCCase;
	private final EAppTypeElements pEAppType;
	private final EOptBuildElements pEOptBuild;
	private final ECPUTypeElements pECPUType;
	private final EACCTypeElements pEACCType;
	private final EAutotuningElements pEAutotuning;
	private final ETunerElements pETuner;
	private final EAITrainingElements pEAITraining;
	private final EAITrainingCasesElements pEAITrainingCases;
	private final EPyTorchCaseElements pEPyTorchCase;
	private final ETensorFlowCaseElements pETensorFlowCase;
	private final EKerasCaseElements pEKerasCase;
	private final EAITrainingConfigElements pEAITrainingConfig;
	private final EAIFrameworkElements pEAIFramework;
	private final EAITrainingTypeElements pEAITrainingType;
	private final EAITrainingDataElements pEAITrainingData;
	private final EBasedataElements pEBasedata;
	private final EAITrainingETLElements pEAITrainingETL;
	private final EKerasElements pEKeras;
	private final ETensorFlowElements pETensorFlow;
	private final EPyTorchElements pEPyTorch;
	private final EHPCElements pEHPC;
	private final EOPENCLCaseElements pEOPENCLCase;
	private final EOPENACCCaseElements pEOPENACCCase;
	private final EOPENMPCaseElements pEOPENMPCase;
	private final EMPICaseElements pEMPICase;
	private final EHPCConfigElements pEHPCConfig;
	private final EParallelisationElements pEParallelisation;
	private final EHPCDataElements pEHPCData;
	private final EHPCETLElements pEHPCETL;
	private final EHPCBasedataElements pEHPCBasedata;
	private final EMPIElements pEMPI;
	private final EMPILibraryElements pEMPILibrary;
	private final EMPIMessageSizeElements pEMPIMessageSize;
	private final EOPENMPElements pEOPENMP;
	private final EOPENAffinityElements pEOPENAffinity;
	private final EOPENACCElements pEOPENACC;
	private final EOPENCLElements pEOPENCL;
	private final ECompilerElements pECompiler;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final TerminalRule tBOOLEAN;
	private final REALElements pREAL;
	private final TerminalRule tEXT_INT;
	private final RealValueElements pRealValue;
	private final TerminalRule tQUALIFIED_NAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OptimizationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOptimization_Model = new Optimization_ModelElements();
		this.pEOptimization = new EOptimizationElements();
		this.pEOptimizationCases = new EOptimizationCasesElements();
		this.pEAITrainingCase = new EAITrainingCaseElements();
		this.pEHPCCase = new EHPCCaseElements();
		this.pEAppType = new EAppTypeElements();
		this.pEOptBuild = new EOptBuildElements();
		this.pECPUType = new ECPUTypeElements();
		this.pEACCType = new EACCTypeElements();
		this.pEAutotuning = new EAutotuningElements();
		this.pETuner = new ETunerElements();
		this.pEAITraining = new EAITrainingElements();
		this.pEAITrainingCases = new EAITrainingCasesElements();
		this.pEPyTorchCase = new EPyTorchCaseElements();
		this.pETensorFlowCase = new ETensorFlowCaseElements();
		this.pEKerasCase = new EKerasCaseElements();
		this.pEAITrainingConfig = new EAITrainingConfigElements();
		this.pEAIFramework = new EAIFrameworkElements();
		this.pEAITrainingType = new EAITrainingTypeElements();
		this.pEAITrainingData = new EAITrainingDataElements();
		this.pEBasedata = new EBasedataElements();
		this.pEAITrainingETL = new EAITrainingETLElements();
		this.pEKeras = new EKerasElements();
		this.pETensorFlow = new ETensorFlowElements();
		this.pEPyTorch = new EPyTorchElements();
		this.pEHPC = new EHPCElements();
		this.pEOPENCLCase = new EOPENCLCaseElements();
		this.pEOPENACCCase = new EOPENACCCaseElements();
		this.pEOPENMPCase = new EOPENMPCaseElements();
		this.pEMPICase = new EMPICaseElements();
		this.pEHPCConfig = new EHPCConfigElements();
		this.pEParallelisation = new EParallelisationElements();
		this.pEHPCData = new EHPCDataElements();
		this.pEHPCETL = new EHPCETLElements();
		this.pEHPCBasedata = new EHPCBasedataElements();
		this.pEMPI = new EMPIElements();
		this.pEMPILibrary = new EMPILibraryElements();
		this.pEMPIMessageSize = new EMPIMessageSizeElements();
		this.pEOPENMP = new EOPENMPElements();
		this.pEOPENAffinity = new EOPENAffinityElements();
		this.pEOPENACC = new EOPENACCElements();
		this.pEOPENCL = new EOPENCLElements();
		this.pECompiler = new ECompilerElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.END");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.BOOLEAN");
		this.pREAL = new REALElements();
		this.tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.EXT_INT");
		this.pRealValue = new RealValueElements();
		this.tQUALIFIED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sodalite.dsl.optimization.Optimization.QUALIFIED_NAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sodalite.dsl.optimization.Optimization".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Optimization_Model:
	//	'optimization' name=QUALIFIED_NAME ':'
	//	BEGIN
	//	optimization=EOptimization
	//	END;
	public Optimization_ModelElements getOptimization_ModelAccess() {
		return pOptimization_Model;
	}
	
	public ParserRule getOptimization_ModelRule() {
		return getOptimization_ModelAccess().getRule();
	}
	
	//EOptimization:
	//	('enable_opt_build:' enable_opt_build=BOOLEAN) ('enable_autotuning:' enable_autotuning=BOOLEAN) ('app_type:'
	//	app_type=EAppType) ('opt_build:'
	//	BEGIN
	//	opt_build=EOptBuild
	//	END)? ('autotuning:'
	//	BEGIN
	//	autotuning=EAutotuning
	//	END)?
	//	app_optimization=EOptimizationCases;
	public EOptimizationElements getEOptimizationAccess() {
		return pEOptimization;
	}
	
	public ParserRule getEOptimizationRule() {
		return getEOptimizationAccess().getRule();
	}
	
	//EOptimizationCases:
	//	EAITrainingCase | EHPCCase;
	public EOptimizationCasesElements getEOptimizationCasesAccess() {
		return pEOptimizationCases;
	}
	
	public ParserRule getEOptimizationCasesRule() {
		return getEOptimizationCasesAccess().getRule();
	}
	
	//EAITrainingCase:
	//	'app_type-ai_training:'
	//	BEGIN
	//	ai_training=EAITraining
	//	END;
	public EAITrainingCaseElements getEAITrainingCaseAccess() {
		return pEAITrainingCase;
	}
	
	public ParserRule getEAITrainingCaseRule() {
		return getEAITrainingCaseAccess().getRule();
	}
	
	//EHPCCase:
	//	'app_type-hpc:'
	//	BEGIN
	//	hpc=EHPC
	//	END;
	public EHPCCaseElements getEHPCCaseAccess() {
		return pEHPCCase;
	}
	
	public ParserRule getEHPCCaseRule() {
		return getEHPCCaseAccess().getRule();
	}
	
	//EAppType:
	//	'ai_training' | 'hpc' | 'big_data' | 'ai_inference';
	public EAppTypeElements getEAppTypeAccess() {
		return pEAppType;
	}
	
	public ParserRule getEAppTypeRule() {
		return getEAppTypeAccess().getRule();
	}
	
	//EOptBuild:
	//	'cpu_type:' cpu_type=ECPUType & 'acc_type:' acc_type=EACCType;
	public EOptBuildElements getEOptBuildAccess() {
		return pEOptBuild;
	}
	
	public ParserRule getEOptBuildRule() {
		return getEOptBuildAccess().getRule();
	}
	
	//ECPUType:
	//	'x86' | 'arm' | 'amd' | 'power';
	public ECPUTypeElements getECPUTypeAccess() {
		return pECPUType;
	}
	
	public ParserRule getECPUTypeRule() {
		return getECPUTypeAccess().getRule();
	}
	
	//EACCType:
	//	'nvidia' | 'amd' | 'fpga';
	public EACCTypeElements getEACCTypeAccess() {
		return pEACCType;
	}
	
	public ParserRule getEACCTypeRule() {
		return getEACCTypeAccess().getRule();
	}
	
	//EAutotuning:
	//	'tuner:' tuner=ETuner & 'input:' input=STRING;
	public EAutotuningElements getEAutotuningAccess() {
		return pEAutotuning;
	}
	
	public ParserRule getEAutotuningRule() {
		return getEAutotuningAccess().getRule();
	}
	
	//ETuner:
	//	'cresta' | 'autotune';
	public ETunerElements getETunerAccess() {
		return pETuner;
	}
	
	public ParserRule getETunerRule() {
		return getETunerAccess().getRule();
	}
	
	//EAITraining:
	//	('config:'
	//	BEGIN
	//	config=EAITrainingConfig
	//	END) ('data:'
	//	BEGIN
	//	data=EAITrainingData
	//	END) aitrainingcase=EAITrainingCases;
	public EAITrainingElements getEAITrainingAccess() {
		return pEAITraining;
	}
	
	public ParserRule getEAITrainingRule() {
		return getEAITrainingAccess().getRule();
	}
	
	//EAITrainingCases:
	//	EKerasCase | ETensorFlowCase | EPyTorchCase;
	public EAITrainingCasesElements getEAITrainingCasesAccess() {
		return pEAITrainingCases;
	}
	
	public ParserRule getEAITrainingCasesRule() {
		return getEAITrainingCasesAccess().getRule();
	}
	
	//EPyTorchCase:
	//	'ai_framework-pytorch:'
	//	BEGIN
	//	pytorch=EPyTorch
	//	END;
	public EPyTorchCaseElements getEPyTorchCaseAccess() {
		return pEPyTorchCase;
	}
	
	public ParserRule getEPyTorchCaseRule() {
		return getEPyTorchCaseAccess().getRule();
	}
	
	//ETensorFlowCase:
	//	'ai_framework-tensorflow:'
	//	BEGIN
	//	tensorflow=ETensorFlow
	//	END;
	public ETensorFlowCaseElements getETensorFlowCaseAccess() {
		return pETensorFlowCase;
	}
	
	public ParserRule getETensorFlowCaseRule() {
		return getETensorFlowCaseAccess().getRule();
	}
	
	//EKerasCase:
	//	'ai_framework-keras:'
	//	BEGIN
	//	keras=EKeras
	//	END;
	public EKerasCaseElements getEKerasCaseAccess() {
		return pEKerasCase;
	}
	
	public ParserRule getEKerasCaseRule() {
		return getEKerasCaseAccess().getRule();
	}
	
	//EAITrainingConfig:
	//	'ai_framework:' ai_framework=EAIFramework & ('type:' type=EAITrainingType)? & ('distributed_training:'
	//	distributed_training=BOOLEAN)? & ('layers:' layers=INT)? & ('parameters:' parameters=INT)?;
	public EAITrainingConfigElements getEAITrainingConfigAccess() {
		return pEAITrainingConfig;
	}
	
	public ParserRule getEAITrainingConfigRule() {
		return getEAITrainingConfigAccess().getRule();
	}
	
	//EAIFramework:
	//	'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet';
	public EAIFrameworkElements getEAIFrameworkAccess() {
		return pEAIFramework;
	}
	
	public ParserRule getEAIFrameworkRule() {
		return getEAIFrameworkAccess().getRule();
	}
	
	//EAITrainingType:
	//	'image_classification' | 'object_detection' | 'translation' | 'recommendation' | 'reinforncement_learning';
	public EAITrainingTypeElements getEAITrainingTypeAccess() {
		return pEAITrainingType;
	}
	
	public ParserRule getEAITrainingTypeRule() {
		return getEAITrainingTypeAccess().getRule();
	}
	
	//EAITrainingData:
	//	('location:' location=STRING)? & ('basedata:' basedata=EBasedata)? & ('size:' size=INT)? & ('count:' count=INT)? &
	//	('etl:'
	//	BEGIN
	//	etl=EAITrainingETL
	//	END)?;
	public EAITrainingDataElements getEAITrainingDataAccess() {
		return pEAITrainingData;
	}
	
	public ParserRule getEAITrainingDataRule() {
		return getEAITrainingDataAccess().getRule();
	}
	
	//EBasedata:
	//	'imagenet' | 'cifar' | 'mnist';
	public EBasedataElements getEBasedataAccess() {
		return pEBasedata;
	}
	
	public ParserRule getEBasedataRule() {
		return getEBasedataAccess().getRule();
	}
	
	//EAITrainingETL:
	//	('prefetch:' prefetch=INT)? & ('cache:' cache=INT)?;
	public EAITrainingETLElements getEAITrainingETLAccess() {
		return pEAITrainingETL;
	}
	
	public ParserRule getEAITrainingETLRule() {
		return getEAITrainingETLAccess().getRule();
	}
	
	//EKeras:
	//	('version:' version=STRING)? & ('backend:' backend=EAIFramework)?;
	public EKerasElements getEKerasAccess() {
		return pEKeras;
	}
	
	public ParserRule getEKerasRule() {
		return getEKerasAccess().getRule();
	}
	
	////EBackend:
	////	'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet';
	//ETensorFlow:
	//	('version:' version=STRING)? & ('xla:' xla=BOOLEAN)?;
	public ETensorFlowElements getETensorFlowAccess() {
		return pETensorFlow;
	}
	
	public ParserRule getETensorFlowRule() {
		return getETensorFlowAccess().getRule();
	}
	
	//EPyTorch:
	//	('version:' version=STRING)? & ('glow:' glow=BOOLEAN)?;
	public EPyTorchElements getEPyTorchAccess() {
		return pEPyTorch;
	}
	
	public ParserRule getEPyTorchRule() {
		return getEPyTorchAccess().getRule();
	}
	
	//EHPC:
	//	('config:'
	//	BEGIN
	//	config=EHPCConfig
	//	END) ('data:'
	//	BEGIN
	//	data=EHPCData
	//	END) mpi=EMPICase? & openmp=EOPENMPCase? & openacc=EOPENACCCase? & opencl=EOPENCLCase?;
	public EHPCElements getEHPCAccess() {
		return pEHPC;
	}
	
	public ParserRule getEHPCRule() {
		return getEHPCAccess().getRule();
	}
	
	//EOPENCLCase:
	//	'parallelisation-opencl:'
	//	BEGIN
	//	opencl=EOPENCL
	//	END;
	public EOPENCLCaseElements getEOPENCLCaseAccess() {
		return pEOPENCLCase;
	}
	
	public ParserRule getEOPENCLCaseRule() {
		return getEOPENCLCaseAccess().getRule();
	}
	
	//EOPENACCCase:
	//	'parallelisation-openacc:'
	//	BEGIN
	//	openacc=EOPENACC
	//	END;
	public EOPENACCCaseElements getEOPENACCCaseAccess() {
		return pEOPENACCCase;
	}
	
	public ParserRule getEOPENACCCaseRule() {
		return getEOPENACCCaseAccess().getRule();
	}
	
	//EOPENMPCase:
	//	'parallelisation-openmp:'
	//	BEGIN
	//	openmp=EOPENMP
	//	END;
	public EOPENMPCaseElements getEOPENMPCaseAccess() {
		return pEOPENMPCase;
	}
	
	public ParserRule getEOPENMPCaseRule() {
		return getEOPENMPCaseAccess().getRule();
	}
	
	//EMPICase:
	//	'parallelisation-mpi:'
	//	BEGIN
	//	mpi=EMPI
	//	END;
	public EMPICaseElements getEMPICaseAccess() {
		return pEMPICase;
	}
	
	public ParserRule getEMPICaseRule() {
		return getEMPICaseAccess().getRule();
	}
	
	//EHPCConfig:
	//	'parallelisation:' parallelisation+=EParallelisation (',' parallelisation+=EParallelisation)* //Multiple selections are supported
	//;
	public EHPCConfigElements getEHPCConfigAccess() {
		return pEHPCConfig;
	}
	
	public ParserRule getEHPCConfigRule() {
		return getEHPCConfigAccess().getRule();
	}
	
	//EParallelisation:
	//	'mpi' | 'openmp' | 'openacc' | 'opencl';
	public EParallelisationElements getEParallelisationAccess() {
		return pEParallelisation;
	}
	
	public ParserRule getEParallelisationRule() {
		return getEParallelisationAccess().getRule();
	}
	
	//EHPCData:
	//	('location:' location=STRING)? & ('basedata:' basedata=EHPCBasedata)? & ('size:' size=INT)? & ('count:' count=INT)? &
	//	('etl:'
	//	BEGIN
	//	etl=EHPCETL
	//	END)?;
	public EHPCDataElements getEHPCDataAccess() {
		return pEHPCData;
	}
	
	public ParserRule getEHPCDataRule() {
		return getEHPCDataAccess().getRule();
	}
	
	//EHPCETL:
	//	('prefetch:' prefetch=BOOLEAN)? & ('cache:' cache=BOOLEAN)?;
	public EHPCETLElements getEHPCETLAccess() {
		return pEHPCETL;
	}
	
	public ParserRule getEHPCETLRule() {
		return getEHPCETLAccess().getRule();
	}
	
	//EHPCBasedata:
	//	'image' | 'restart';
	public EHPCBasedataElements getEHPCBasedataAccess() {
		return pEHPCBasedata;
	}
	
	public ParserRule getEHPCBasedataRule() {
		return getEHPCBasedataAccess().getRule();
	}
	
	//EMPI:
	//	'library:' library=EMPILibrary & ('version:' version=STRING)? & ('scaling_efficiency:' scaling_efficiency=RealValue)?
	//	& ('core_subscription:' core_subscription=INT)? & ('message_size:' message_size=EMPIMessageSize)?;
	public EMPIElements getEMPIAccess() {
		return pEMPI;
	}
	
	public ParserRule getEMPIRule() {
		return getEMPIAccess().getRule();
	}
	
	//EMPILibrary:
	//	'mvapch' | 'opnmpi';
	public EMPILibraryElements getEMPILibraryAccess() {
		return pEMPILibrary;
	}
	
	public ParserRule getEMPILibraryRule() {
		return getEMPILibraryAccess().getRule();
	}
	
	//EMPIMessageSize:
	//	'small' | 'medium' | 'large';
	public EMPIMessageSizeElements getEMPIMessageSizeAccess() {
		return pEMPIMessageSize;
	}
	
	public ParserRule getEMPIMessageSizeRule() {
		return getEMPIMessageSizeAccess().getRule();
	}
	
	//EOPENMP:
	//	'number_of_threads:' number_of_threads=INT & ('scaling_efficiency:' scaling_efficiency=RealValue)? & ('affinity:'
	//	affinity=EOPENAffinity)?;
	public EOPENMPElements getEOPENMPAccess() {
		return pEOPENMP;
	}
	
	public ParserRule getEOPENMPRule() {
		return getEOPENMPAccess().getRule();
	}
	
	//EOPENAffinity:
	//	'block' | 'simple';
	public EOPENAffinityElements getEOPENAffinityAccess() {
		return pEOPENAffinity;
	}
	
	public ParserRule getEOPENAffinityRule() {
		return getEOPENAffinityAccess().getRule();
	}
	
	//EOPENACC:
	//	'compiler:' compiler=ECompiler & ('version:' version=STRING)? & ('number_of_acc:' number_of_acc=INT)?;
	public EOPENACCElements getEOPENACCAccess() {
		return pEOPENACC;
	}
	
	public ParserRule getEOPENACCRule() {
		return getEOPENACCAccess().getRule();
	}
	
	//EOPENCL:
	//	'compiler:' compiler=ECompiler & ('version:' version=STRING)? & ('number_of_acc:' number_of_acc=INT)?;
	public EOPENCLElements getEOPENCLAccess() {
		return pEOPENCL;
	}
	
	public ParserRule getEOPENCLRule() {
		return getEOPENCLAccess().getRule();
	}
	
	//ECompiler:
	//	'pgi' | 'cray';
	public ECompilerElements getECompilerAccess() {
		return pECompiler;
	}
	
	public ParserRule getECompilerRule() {
		return getECompilerAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//REAL hidden():
	//	INT? '.' (EXT_INT | INT);
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//terminal EXT_INT:
	//	INT ('e' | 'E') ('-' | '+') INT;
	public TerminalRule getEXT_INTRule() {
		return tEXT_INT;
	}
	
	//RealValue ecore::EDoubleObject:
	//	REAL;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//terminal QUALIFIED_NAME:
	//	ID ('.' ID)+;
	public TerminalRule getQUALIFIED_NAMERule() {
		return tQUALIFIED_NAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
