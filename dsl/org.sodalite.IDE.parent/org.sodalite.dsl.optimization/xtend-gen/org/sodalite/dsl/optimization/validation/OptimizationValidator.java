/**
 * generated by Xtext 2.19.0
 */
package org.sodalite.dsl.optimization.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.sodalite.dsl.optimization.optimization.EAITraining;
import org.sodalite.dsl.optimization.optimization.EAITrainingCase;
import org.sodalite.dsl.optimization.optimization.EAITrainingConfig;
import org.sodalite.dsl.optimization.optimization.EHPC;
import org.sodalite.dsl.optimization.optimization.EHPCCase;
import org.sodalite.dsl.optimization.optimization.EHPCConfig;
import org.sodalite.dsl.optimization.optimization.EKerasCase;
import org.sodalite.dsl.optimization.optimization.EOptimization;
import org.sodalite.dsl.optimization.optimization.EPyTorchCase;
import org.sodalite.dsl.optimization.optimization.ETensorFlowCase;
import org.sodalite.dsl.optimization.optimization.OptimizationPackage;
import org.sodalite.dsl.optimization.validation.AbstractOptimizationValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class OptimizationValidator extends AbstractOptimizationValidator {
  public static final String MANDATORY_ELEMENT = "MandatoryElement";
  
  @Check
  public void checkOptimizationMandatoryElement(final EOptimization opt) {
    if ((opt.isEnable_opt_build() && (opt.getOpt_build() == null))) {
      this.error("opt_build property should be present if enable_opt_build is true", 
        OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_OPT_BUILD, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((!opt.isEnable_opt_build()) && (opt.getOpt_build() != null))) {
      this.error("An opt_build property is present but enable_opt_build is false", 
        OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_OPT_BUILD, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((opt.isEnable_autotuning() && (opt.getAutotuning() == null))) {
      this.error("autotuning property should be present if enable_autotuning is true", 
        OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_AUTOTUNING, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((!opt.isEnable_autotuning()) && (opt.getAutotuning() != null))) {
      this.error("An autotuning property is present but enable_autotuning is false", 
        OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_AUTOTUNING, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((Objects.equal(opt.getApp_type(), "ai_training") && (!(opt.getApp_optimization() instanceof EAITrainingCase))) || ((opt.getApp_optimization() instanceof EAITrainingCase) && (!Objects.equal(opt.getApp_type(), "ai_training"))))) {
      this.error("A app_type-ai_training property should be present if app_type is ai_training", 
        OptimizationPackage.Literals.EOPTIMIZATION__APP_TYPE, 
        OptimizationValidator.MANDATORY_ELEMENT);
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EOPTIMIZATION__APP_OPTIMIZATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((Objects.equal(opt.getApp_type(), "hpc") && (!(opt.getApp_optimization() instanceof EHPCCase))) || Objects.equal(Boolean.valueOf((!Objects.equal(Boolean.valueOf((opt.getApp_optimization() instanceof EHPCCase)), opt.getApp_type()))), "hpc"))) {
      this.error("Ah app_type-hpc property should be present if app_type is hpc", 
        OptimizationPackage.Literals.EOPTIMIZATION__APP_TYPE, 
        OptimizationValidator.MANDATORY_ELEMENT);
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EOPTIMIZATION__APP_OPTIMIZATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(opt.getApp_type(), "ai_inference") || Objects.equal(opt.getApp_type(), "big_data"))) {
      this.error("This app_type is not supported in current version", 
        OptimizationPackage.Literals.EOPTIMIZATION__APP_TYPE, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
  }
  
  @Check
  public void checkAITrainingConfigMandatoryElement(final EAITrainingConfig conf) {
    EObject _eContainer = conf.eContainer();
    final EAITraining parent = ((EAITraining) _eContainer);
    if ((Objects.equal(conf.getAi_framework(), "pytorch") && (!(parent.getAitrainingcase() instanceof EPyTorchCase)))) {
      this.error("An ai_framework-pytorch property should be present if ai_framework is pytorch", 
        OptimizationPackage.Literals.EAI_TRAINING_CONFIG__AI_FRAMEWORK, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(conf.getAi_framework(), "tensorflow") && (!(parent.getAitrainingcase() instanceof ETensorFlowCase)))) {
      this.error("An ai_framework-tensorflow property should be present if ai_framework is tensorflow", 
        OptimizationPackage.Literals.EAI_TRAINING_CONFIG__AI_FRAMEWORK, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(conf.getAi_framework(), "keras") && (!(parent.getAitrainingcase() instanceof EKerasCase)))) {
      this.error("An ai_framework-keras property should be present if ai_framework is Keras", 
        OptimizationPackage.Literals.EAI_TRAINING_CONFIG__AI_FRAMEWORK, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
  }
  
  @Check
  public void checkAITrainingMandatoryElement(final EAITraining ai_training) {
    if ((Objects.equal(ai_training.getConfig().getAi_framework(), "pytorch") && (!(ai_training.getAitrainingcase() instanceof EPyTorchCase)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EAI_TRAINING__AITRAININGCASE, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(ai_training.getConfig().getAi_framework(), "tensorflow") && (!(ai_training.getAitrainingcase() instanceof ETensorFlowCase)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EAI_TRAINING__AITRAININGCASE, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(ai_training.getConfig().getAi_framework(), "keras") && (!(ai_training.getAitrainingcase() instanceof EKerasCase)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EAI_TRAINING__AITRAININGCASE, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
  }
  
  @Check
  public void checkHPCConfigMandatoryElement(final EHPCConfig conf) {
    EObject _eContainer = conf.eContainer();
    final EHPC parent = ((EHPC) _eContainer);
    if ((conf.getParallelisation().contains("mpi") && (parent.getMpi() == null))) {
      this.error("A parallelisation-mpi property should be present if parallelisation contains mpi", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((conf.getParallelisation().contains("openmp") && (parent.getOpenmp() == null))) {
      this.error("A parallelisation-openmp property should be present if parallelisation contains openmp", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((conf.getParallelisation().contains("openacc") && (parent.getOpenacc() == null))) {
      this.error("A parallelisation-openacc property should be present if parallelisation contains openacc", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((conf.getParallelisation().contains("opencl") && (parent.getOpencl() == null))) {
      this.error("A parallelisation-opencl property should be present if parallelisation contains opencl", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((parent.getMpi() != null) && (!conf.getParallelisation().contains("mpi")))) {
      this.error("Parallelisation should contains mpi as an parallelisation-mpi property exists", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((parent.getOpenmp() != null) && (!conf.getParallelisation().contains("openmp")))) {
      this.error("Parallelisation should contains openmp as an parallelisation-openmp property exists", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((parent.getOpenacc() != null) && (!conf.getParallelisation().contains("openacc")))) {
      this.error("Parallelisation should contains openacc as an parallelisation-openacc property exists", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if (((parent.getOpencl() != null) && (!conf.getParallelisation().contains("opencl")))) {
      this.error("Parallelisation should contains opencl as an parallelisation-opencl property exists", 
        OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
  }
  
  @Check
  public void checkHPCMandatoryElement(final EHPC hpc) {
    if ((Objects.equal(hpc.getConfig().getParallelisation(), "mpi") && (!(hpc.getMpi() != null)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EHPC__MPI, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(hpc.getConfig().getParallelisation(), "openmp") && (!(hpc.getOpenmp() != null)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EHPC__OPENMP, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(hpc.getConfig().getParallelisation(), "openacc") && (!(hpc.getOpenacc() != null)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EHPC__OPENACC, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
    if ((Objects.equal(hpc.getConfig().getParallelisation(), "opencl") && (!(hpc.getOpencl() != null)))) {
      this.error("This property is not compatible with selected app_type", 
        OptimizationPackage.Literals.EHPC__OPENCL, 
        OptimizationValidator.MANDATORY_ELEMENT);
    }
  }
}
