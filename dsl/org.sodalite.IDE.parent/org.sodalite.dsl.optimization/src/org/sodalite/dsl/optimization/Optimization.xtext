/*******************************************************************************
 * Copyright (c) 2019 Atos Spain S.A.
 * This program and the accompanying materials
 * are made available under the terms of the Apache Public License 2.0 (APL2)
 * which accompanies this distribution, and is available at
 * https://apache.org/licenses/LICENSE-2.0
 *
 * Contributors:
 *     Jesús Gorroñogoitia - Design and implementation
 *******************************************************************************/
grammar org.sodalite.dsl.optimization.Optimization with org.eclipse.xtext.common.Terminals

generate optimization "http://www.sodalite.org/dsl/optimization/Optimization"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Optimization_Model:
	'optimization' name=QUALIFIED_NAME ':'
		BEGIN
		optimization = EOptimization
		END
;

EOptimization:
	('enable_opt_build:' enable_opt_build=BOOLEAN) 
	('enable_autotuning:' enable_autotuning=BOOLEAN) 
	('app_type:' app_type=EAppType)
	('opt_build:'
		BEGIN
		opt_build=EOptBuild
		END
	)?  
	('autotuning:'
		BEGIN
		autotuning=EAutotuning
		END
	)?  
	app_optimization = EOptimizationCases
;

EOptimizationCases:
	EAITrainingCase | EHPCCase
;

EAITrainingCase:
	('app_type-ai_training:'
		BEGIN
		ai_training=EAITraining
		END
	)  
;

EHPCCase:
	('app_type-hpc:'
		BEGIN
		hpc=EHPC
		END
	) 
;

EAppType:
	'ai_training' | 'hpc' | 'big_data' | 'ai_inference' ;
	
EOptBuild:
	('cpu_type:' cpu_type=ECPUType) &
	('acc_type:' acc_type=EACCType)
;

ECPUType:
	'x86' | 'arm' | 'amd' | 'power' ;
	
EACCType:
	'nvidia' | 'amd' | 'fpga' | 'none';

EAutotuning:
	('tuner:' tuner=ETuner) &
	('input:' input=STRING) //TODO Prompt user with UI to select Autotuning model from the filesystem
;

ETuner:
	'cresta' | 'autotune'  ;

EAITraining:
	('config:'
		BEGIN 
		config=EAITrainingConfig
		END
	)
	('data:' 
		BEGIN
		data=EAITrainingData
		END
	)
	aitrainingcase = EAITrainingCases
;

EAITrainingCases:
	EKerasCase | ETensorFlowCase | EPyTorchCase
;

EPyTorchCase:
	('ai_framework-pytorch:' 
		BEGIN
		pytorch=EPyTorch
		END
	) 
;

ETensorFlowCase:
	('ai_framework-tensorflow:' 
		BEGIN
		tensorflow=ETensorFlow
		END
	) 
;

EKerasCase:
	('ai_framework-keras:' 
		BEGIN
		keras=EKeras
		END
	) 
;
	
EAITrainingConfig:
	('ai_framework:' ai_framework=EAIFramework) &
	('type:' type=EAITrainingType)? &
	(('distributed_training:' distributed_training=BOOLEAN))? &
	('layers:' layers=INT)? &
	('parameters:' parameters=INT)? 
;	

EAIFramework:
	'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet';
	
EAITrainingType:
	'image_classification' | 'object_detection' | 'translation' | 'recommendation' | 'reinforncement_learning';

EAITrainingData:
	('location:' location=STRING)? &
	('basedata:' basedata=EBasedata)? &
	('size:' size=INT)? &
	('count:' count=INT)? &
	('etl:'
		BEGIN
		etl=EAITrainingETL
		END
	)? 
;

EBasedata:
	'imagenet' | 'cifar' | 'mnist' ;

EAITrainingETL:
	('prefetch:' prefetch=INT)? &
	('cache:' cache=INT)? 
;

EKeras:
	('version:' version=STRING)? &
	('backend:' backend=EAIFramework)? 
;

//EBackend:
//	'tensorflow' | 'pytorch' | 'keras' | 'cntk' | 'mxnet';

ETensorFlow:
	('version:' version=STRING)? &
	(('xla:' xla=BOOLEAN))? 
;

EPyTorch:
	('version:' version=STRING)? &
	(('glow:' glow=BOOLEAN))? 
;

EHPC:
	('config:' 
		BEGIN
		config=EHPCConfig
		END
	)
	('data:' 
		BEGIN
		data=EHPCData
		END
	)
	(mpi = EMPICase)? &
	(openmp = EOPENMPCase)? &
	(openacc = EOPENACCCase)? &
	(opencl = EOPENCLCase)? 
;

EOPENCLCase:
	('parallelisation-opencl:'
		BEGIN
		opencl=EOPENCL
		END
	) 
;

EOPENACCCase:
	('parallelisation-openacc:'
		BEGIN
		openacc=EOPENACC
		END
	) 
;

EOPENMPCase:
	('parallelisation-openmp:' 
		BEGIN
		openmp=EOPENMP
		END
	) 
;

EMPICase:
	('parallelisation-mpi:' 
		BEGIN
		mpi=EMPI
		END
	) 
;

EHPCConfig:
	'parallelisation:' parallelisation=EParallelisation
;	

EParallelisation:
	'mpi' | 'openmp' | 'openacc' | 'opencl' ;
	
EHPCData:
	('location:' location=STRING)? &
	('basedata:' basedata=EHPCBasedata)? &
	('size:' size=INT)? &
	('count:' count=INT)? &
	('etl:'
		BEGIN 
		etl=EHPCETL
		END
	)?
;

EHPCETL:
	('prefetch:' prefetch=BOOLEAN)? &
	('cache:' cache=BOOLEAN)? 
;

EHPCBasedata:
	'image' | 'restart' ;

EMPI:
	('library:' library=EMPILibrary) &
	('version:' version=STRING)? &
	('scaling_efficiency:' scaling_efficiency=RealValue)? & 
	('core_subscription:' core_subscription=INT)? &
	('message_size:' message_size=EMPIMessageSize)? 
;

EMPILibrary:
	'mvapch' | 'openmpi' | 'mpich';
	
EMPIMessageSize:
	'small' | 'medium' | 'large';

EOPENMP:
	('number_of_threads:' number_of_threads=INT) &
	('scaling_efficiency:' scaling_efficiency=RealValue)? & 
	('affinity:' affinity=EOPENAffinity)? 
;

EOPENAffinity:
	'block' | 'simple' ;
	
EOPENACC:
	('compiler:' compiler=ECompiler) &
	('version:' version=STRING)? &
	('number_of_acc:' number_of_acc=INT)? 
;

EOPENCL:
	('compiler:' compiler=ECompiler) &
	('version:' version=STRING)? &
	('number_of_acc:' number_of_acc=INT)? 
;

ECompiler:
	'pgi' | 'cray' ;

	
//Positional blocks delimited with indentation
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';
	
REAL hidden(): INT ? '.' (EXT_INT | INT);
terminal EXT_INT: INT ('e'|'E')('-'|'+') INT;
RealValue returns ecore::EDoubleObject: REAL ;

terminal QUALIFIED_NAME: //FIXME convert to data type rule, remove terminal
	ID ('.' ID)+;
