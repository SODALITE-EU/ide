/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ui.contentassist;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.sodalite.dsl.rM.ENodeType;
import org.sodalite.dsl.rM.EOperationDefinition;
import org.sodalite.dsl.rM.EProperties;
import org.sodalite.dsl.rM.EPropertyDefinition;
import org.sodalite.dsl.rM.impl.EInterfaceDefinitionBodyImpl;
import org.sodalite.dsl.rM.impl.EInterfaceDefinitionImpl;
import org.sodalite.dsl.rM.impl.EOperationDefinitionImpl;
import org.sodalite.dsl.rM.impl.EParameterDefinitionImpl;
import org.sodalite.sdl.ansible.ansibleDsl.EParameter;
import org.sodalite.sdl.ansible.ansibleDsl.EUsedByBody;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EHandlerImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EIndexOrLoopVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EModuleCallImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ENotifiedTopicImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EParameterImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlaybookImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERegisterVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EVariableDeclarationImpl;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class AnsibleDslProposalProvider extends AbstractAnsibleDslProposalProvider {
  private final String PRIVILEGE_ESCALATION_DESCRIPTION = (((((("This is used for setting up the privilege escalation.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- become   -> bool\n") + 
    "\t- become_exe   -> string\n") + 
    "\t- become_flags   -> string\n") + 
    "\t- become_method   -> string\n") + 
    "\t- become_user   -> string");
  
  private final String VALIDATION_MODE_DESCRIPTION = ((("This is used for setting up the two modes of execution that validate tasks.\n\n" + 
    "The two modes, and the correspondent attributes that can be set, are:\n\n") + 
    "\t- check_mode   -> bool\n") + 
    "\t- diff   -> bool");
  
  private final String CONNECTION_INFO_DESCRIPTION = (((("This is used for defining the settings of the connection.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- connection   -> string\n") + 
    "\t- port_attribute (\"port\" in classic Ansible)   -> int\n") + 
    "\t- remote_user   -> string");
  
  private final String PLAY_EXE_SETTINGS_DESCRIPTION = (((((("This is used for controlling the execution of the play.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- strategy   -> string\n") + 
    "\t- serial   -> list\n") + 
    "\t- order   -> string\n") + 
    "\t- throttle   -> int\n") + 
    "\t- run_once   -> bool");
  
  private final String PLAY_ERROR_HANDLING_DESCRIPTION = ((((("This is used for setting up how to handle the errors in a play.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- max_fail_percentage   -> percentage\n") + 
    "\t- any_errors_fatal   -> bool\n") + 
    "\t- ignore_errors   -> bool\n") + 
    "\t- ignore_unreachable   -> bool");
  
  private final String FACTS_SETTINGS_DESCRIPTION = ((((("This is used for setting up how the gathering of facts is handled.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- gather_facts   -> bool\n") + 
    "\t- gather_subset   -> list\n") + 
    "\t- gather_timeout   -> int\n") + 
    "\t- fact_path   -> string");
  
  private final String EXECUTION_EXE_SETTINGS_DESCRIPTION = ((("This is used for controlling the execution of the task/block/handler/role.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- throttle   -> int\n") + 
    "\t- run_once   -> bool");
  
  private final String DELEGATION_DESCRIPTION = ((("This is used for setting up the delegation settings.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- delegate_to   -> string\n") + 
    "\t- delegate_facts   -> bool");
  
  private final String BLOCK_AND_ROLE_ERROR_HANDLING_DESCRIPTION = (((("This is used for setting up how to handle the errors in a block/role inclusion.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- any_errors_fatal   -> bool\n") + 
    "\t- ignore_errors   -> bool\n") + 
    "\t- ignore_unreachable   -> bool");
  
  private final String TASK_HANDLER_ERROR_HANDLING_DESCRIPTION = (((((("This is used for setting up how to handle the errors in a task/handler.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- changed_when   -> condition\n") + 
    "\t- failed_when   -> condition\n") + 
    "\t- any_errors_fatal   -> bool\n") + 
    "\t- ignore_errors   -> bool\n") + 
    "\t- ignore_unreachable   -> bool");
  
  private final String ASYNCHRONOUS_SETTINGS_DESCRIPTION = ((("This is used for setting up the asynchronous behavior of a task/handler.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- async   -> int\n") + 
    "\t- poll   -> int");
  
  private final String MODULE_CALL_DESCRIPTION = ((((((("This is used for defining which is the module to be used in this task/handler.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- module: it\'s the identifier (string) of the module to be used.\n") + 
    "\t- direct_parameter: it\'s a value passed to the module without an explicit\n") + 
    "\t  \t  name of the parameter, like it\'s done for example with shell module.\n") + 
    "\t  \t  This attribute isn\'t mandatory.\n") + 
    "\t- parameters: it\'s just the keyword for defining the list of couples\n") + 
    "\t  \t  \'identifier of the parameter\'-\'value passed to it\'");
  
  private final String LOOP_DESCRIPTION = ((((((((((("This is used for defining a loop over the current task/handler.\n\n" + 
    "There are 3 types of loops and 3 correspondent attributes:\n\n") + 
    "\t- loop_over: when the loop is done over a list of values.\n") + 
    "\t  \t  This attribute allows to specify which is the list.\n") + 
    "\t  \t  In this case the additional entity \'loop_control\' can be used\n") + 
    "\t  \t  for specifying additional properties of the loop.\n") + 
    "\t- with: the \'with_<lookup>\' keyword for doing loops in Ansible.\n") + 
    "\t- until: when the operations are repeated until a condition is met.\n") + 
    "\t  \t  The attributes that can be set in this case are:\n") + 
    "\t   \t  \t - until_condition   -> the end condition to meet.\n") + 
    "\t   \t  \t - retries   -> int\n") + 
    "\t   \t   \t - delay_attribute (\"delay\" in classic Ansible)  -> int\n");
  
  private final String LOOP_CONTROL_DESCRIPTION = (((((("This is used for setting up how the loop over a list is done.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- label   -> string\n") + 
    "\t- pause   -> float\n") + 
    "\t- index_var   -> identifier of the var\n") + 
    "\t- loop_var   -> identifier of the var\n") + 
    "\t- extended   -> bool");
  
  private final String USED_BY_DESCRIPTION = ((((((("This is the bridge between this Ansible model and the TOSCA RM.\n\n" + 
    "Here it can be defined which is the TOSCA operation that will use this\n") + 
    "playbook for its implementation.\n\n") + 
    "The attributes that can be set are (they are both strings):\n\n") + 
    "\t- node_type: the node type containing the operation.\n") + 
    "\t- operation: the operation that uses this playbook for its implementation\n.") + 
    "\t\t\tThe operation must be contained in an interface of the selected\n") + 
    "\t\t\tnode type.");
  
  private final String EXTERNAL_FILE_INCLUSION_DESCRIPTION = (((((("This is used for importing/including a yaml file.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- import_playbook   -> the name of the yaml file\n") + 
    "\t- include   -> the name of the yaml file\n") + 
    "\t- when   -> condition\n\n") + 
    "It can be selected either \"import_playbook\" or \"include\",\n") + 
    "while \"when\" is not mandatory.");
  
  private final String WITH_LOOKUP_DESCRIPTION = (("This is the classic \'with_<lookup>\' keyword in Ansible.\n" + 
    "The user is supposed to write \'with\' followed by a space and the <lookup>.\n") + 
    "Writing for example \'with items:\' will be translated into \'with_items:\'.");
  
  public void complete_EPrivilegeEscalation(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("privilege_escalation:");
    this.createNonEditableCompletionProposal("privilege_escalation:", _styledString, context, this.PRIVILEGE_ESCALATION_DESCRIPTION, acceptor);
  }
  
  public void complete_EValidationMode(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("validation_mode:");
    this.createNonEditableCompletionProposal("validation_mode:", _styledString, context, this.VALIDATION_MODE_DESCRIPTION, acceptor);
  }
  
  public void complete_EConnection(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("connection_info:");
    this.createNonEditableCompletionProposal("connection_info:", _styledString, context, this.CONNECTION_INFO_DESCRIPTION, acceptor);
  }
  
  public void complete_EPlayExeSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("play_exe_settings:");
    this.createNonEditableCompletionProposal("play_exe_settings:", _styledString, context, this.PLAY_EXE_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EPlayErrorHandling(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("error_handling:");
    this.createNonEditableCompletionProposal("error_handling:", _styledString, context, this.PLAY_ERROR_HANDLING_DESCRIPTION, acceptor);
  }
  
  public void complete_EFactsSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("facts_settings:");
    this.createNonEditableCompletionProposal("facts_settings:", _styledString, context, this.FACTS_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EExecutionExeSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("exe_settings:");
    this.createNonEditableCompletionProposal("exe_settings:", _styledString, context, this.EXECUTION_EXE_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EDelegation(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("delegation:");
    this.createNonEditableCompletionProposal("delegation:", _styledString, context, this.DELEGATION_DESCRIPTION, acceptor);
  }
  
  public void complete_EBlockAndRoleErrorHandling(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("error_handling:");
    this.createNonEditableCompletionProposal("error_handling:", _styledString, context, this.BLOCK_AND_ROLE_ERROR_HANDLING_DESCRIPTION, acceptor);
  }
  
  public void complete_ETaskHandlerErrorHandling(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("error_handling:");
    this.createNonEditableCompletionProposal("error_handling:", _styledString, context, this.TASK_HANDLER_ERROR_HANDLING_DESCRIPTION, acceptor);
  }
  
  public void complete_EAsynchronousSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("asynchronous_settings:");
    this.createNonEditableCompletionProposal("asynchronous_settings:", _styledString, context, this.ASYNCHRONOUS_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EModuleCall(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("module:");
    this.createNonEditableCompletionProposal("module:", _styledString, context, this.MODULE_CALL_DESCRIPTION, acceptor);
  }
  
  public void complete_ELoop(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("loop:");
    this.createNonEditableCompletionProposal("loop:", _styledString, context, this.LOOP_DESCRIPTION, acceptor);
  }
  
  public void complete_ELoopControl(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("loop_control:");
    this.createNonEditableCompletionProposal("loop_control:", _styledString, context, this.LOOP_CONTROL_DESCRIPTION, acceptor);
  }
  
  public void complete_EExternalFileInclusion(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("external_file_inclusion:");
    this.createNonEditableCompletionProposal("external_file_inclusion:", _styledString, context, this.EXTERNAL_FILE_INCLUSION_DESCRIPTION, acceptor);
  }
  
  public void complete_EUsedByBody(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("used_by:");
    this.createNonEditableCompletionProposal("used_by:", _styledString, context, this.USED_BY_DESCRIPTION, acceptor);
  }
  
  public void complete_EWithLookup(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("with");
    this.createNonEditableCompletionProposal("with", _styledString, context, this.WITH_LOOKUP_DESCRIPTION, acceptor);
  }
  
  public void complete_BOOLEAN(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("False", context));
    acceptor.accept(this.createCompletionProposal("True", context));
    acceptor.accept(this.createCompletionProposal("false", context));
    acceptor.accept(this.createCompletionProposal("true", context));
  }
  
  public void complete_BOOLEAN_ONLY_ANSIBLE(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("no", context));
    acceptor.accept(this.createCompletionProposal("yes", context));
  }
  
  public void complete_NULL(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("null", context));
  }
  
  public void complete_SIMPLE_NUMBER(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("0", "0 - NUMBER", context, "A number", acceptor);
  }
  
  public void completeEForStatement_Recursive(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("recursive", context));
  }
  
  public void completeEParameter_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("Parameter_Name", "Parameter_Name - ID", context, "The identifier of the module parameter.", acceptor);
  }
  
  public void completeEVariableDeclaration_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("Variable_Name", "Variable_Name - ID", context, "The identifier of the variable to be declared.", acceptor);
  }
  
  public void completeEDictionaryPair_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("Name", "Name - ID", context, "The identifier of a key of the dictionary.", acceptor);
  }
  
  public void completeEVariableDeclarationVariableReference_Variable_declaration_variable_reference(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeDeclaredVariableReference(model, context, acceptor, false);
  }
  
  public void completeERegisterVariableReference_Register_variable_reference(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeRegisteredVariableReference(model, context, acceptor, false);
  }
  
  public void completeEIndexOrLoopVariableReference_Index_or_loop_variable_reference(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeIndexOrLoopVariableReference(model, context, acceptor, false);
  }
  
  public void completeESetFactVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeSetFactVariableReference(model, context, acceptor, false);
  }
  
  public void completeEInputOperationVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeInputOperationVariableReference(model, context, acceptor, false);
  }
  
  public void completeEInputInterfaceVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeInputInterfaceVariableReference(model, context, acceptor, false);
  }
  
  public void complete_EVariableReference(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeDeclaredVariableReference(model, context, acceptor, true);
    this.completeRegisteredVariableReference(model, context, acceptor, true);
    this.completeIndexOrLoopVariableReference(model, context, acceptor, true);
    this.completeSetFactVariableReference(model, context, acceptor, true);
    this.completeInputOperationVariableReference(model, context, acceptor, true);
    this.completeInputInterfaceVariableReference(model, context, acceptor, true);
  }
  
  public void completeEUsedByBody_Operation(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlaybookImpl playbook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    if ((playbook != null)) {
      final EUsedByBody usedByBody = playbook.getUsed_by();
      if ((usedByBody != null)) {
        final ENodeType nodeType = usedByBody.getNode_type();
        if ((nodeType != null)) {
          final List<EOperationDefinitionImpl> candidatesOperation = EcoreUtil2.<EOperationDefinitionImpl>getAllContentsOfType(nodeType, EOperationDefinitionImpl.class);
          for (final EOperationDefinitionImpl candidate : candidatesOperation) {
            {
              final EInterfaceDefinitionImpl interfaceDefinition = EcoreUtil2.<EInterfaceDefinitionImpl>getContainerOfType(candidate, EInterfaceDefinitionImpl.class);
              String _concat = candidate.getName().concat(" - Interface: ");
              this.createNonEditableCompletionProposal("\"".concat(candidate.getName()).concat("\""), new StyledString(_concat).append(interfaceDefinition.getName(), StyledString.COUNTER_STYLER), context, "One of the operations belonging to the selected node type.", acceptor);
            }
          }
        }
      }
    }
  }
  
  public void completeENotifiedHandler_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EHandlerImpl> candidates = EcoreUtil2.<EHandlerImpl>getAllContentsOfType(rootPlay, EHandlerImpl.class);
      for (final EHandlerImpl candidate : candidates) {
        acceptor.accept(this.createCompletionProposal("\"".concat(candidate.getName()).concat("\""), context));
      }
    }
  }
  
  public void completeEHandler_Listen_to(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<ENotifiedTopicImpl> candidatesTopics = EcoreUtil2.<ENotifiedTopicImpl>getAllContentsOfType(rootPlay, ENotifiedTopicImpl.class);
      for (final ENotifiedTopicImpl candidate : candidatesTopics) {
        acceptor.accept(this.createCompletionProposal("\"".concat(candidate.getName()).concat("\""), context));
      }
    }
  }
  
  public void completeEWithLookup_Lookup(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ArrayList<String> lookups = new ArrayList<String>();
    lookups.add("list");
    lookups.add("items");
    lookups.add("indexed_items");
    lookups.add("flattened");
    lookups.add("together");
    lookups.add("dict");
    lookups.add("sequence");
    lookups.add("subelements");
    lookups.add("nested");
    lookups.add("cartesian");
    lookups.add("random_choice");
    for (final String lookup : lookups) {
      acceptor.accept(this.createCompletionProposal(lookup, context));
    }
  }
  
  public void completeESpecialVariable_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ArrayList<String> specialVariables = new ArrayList<String>();
    specialVariables.add("item");
    specialVariables.add("ansible_check_mode");
    specialVariables.add("ansible_config_file");
    specialVariables.add("ansible_dependent_role_names");
    specialVariables.add("ansible_diff_mode");
    specialVariables.add("ansible_forks");
    specialVariables.add("ansible_inventory_sources");
    specialVariables.add("ansible_limit");
    specialVariables.add("ansible_loop");
    specialVariables.add("ansible_loop_var");
    specialVariables.add("ansible_index_var");
    specialVariables.add("ansible_parent_role_names");
    specialVariables.add("ansible_parent_role_paths");
    specialVariables.add("ansible_play_batch");
    specialVariables.add("ansible_play_hosts");
    specialVariables.add("ansible_play_hosts_all");
    specialVariables.add("ansible_play_roles_names");
    specialVariables.add("ansible_playbook_python");
    specialVariables.add("ansible_role_names");
    specialVariables.add("ansible_role_name");
    specialVariables.add("ansible_collection_name");
    specialVariables.add("ansible_run_tags");
    specialVariables.add("ansible_search_path");
    specialVariables.add("ansible_skip_tags");
    specialVariables.add("ansible_verbosity");
    specialVariables.add("ansible_version");
    specialVariables.add("group_names");
    specialVariables.add("groups");
    specialVariables.add("hostvars");
    specialVariables.add("inventory_hostname");
    specialVariables.add("inventory_hostname_short");
    specialVariables.add("inventory_dir");
    specialVariables.add("inventory_file");
    specialVariables.add("omit");
    specialVariables.add("play_hosts");
    specialVariables.add("ansible_play_name");
    specialVariables.add("playbook_dir");
    specialVariables.add("role_name");
    specialVariables.add("role_names");
    specialVariables.add("role_path");
    specialVariables.add("ansible_facts");
    specialVariables.add("ansible_local");
    specialVariables.add("ansible_become_user");
    specialVariables.add("ansible_connection");
    specialVariables.add("ansible_host");
    specialVariables.add("ansible_python_interpreter");
    specialVariables.add("ansible_user");
    for (final String specialVariable : specialVariables) {
      acceptor.accept(this.createCompletionProposal(specialVariable, context));
    }
  }
  
  public void completeDeclaredVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EVariableDeclarationImpl> candidates = EcoreUtil2.<EVariableDeclarationImpl>getAllContentsOfType(rootPlay, EVariableDeclarationImpl.class);
      for (final EVariableDeclarationImpl candidate : candidates) {
        if (needsPrefix) {
          this.createNonEditableCompletionProposal("declared_variable: ".concat(candidate.getName()), new StyledString("declared_variable: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable declared in this play.", acceptor);
        } else {
          String _name = candidate.getName();
          String _name_1 = candidate.getName();
          StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
          this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable declared in this play.", acceptor);
        }
      }
    }
  }
  
  public void completeRegisteredVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<ERegisterVariableImpl> candidates = EcoreUtil2.<ERegisterVariableImpl>getAllContentsOfType(rootPlay, ERegisterVariableImpl.class);
      for (final ERegisterVariableImpl candidate : candidates) {
        if (needsPrefix) {
          this.createNonEditableCompletionProposal("registered_variable: ".concat(candidate.getName()), new StyledString("registered_variable: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable registered in this play.", acceptor);
        } else {
          String _name = candidate.getName();
          String _name_1 = candidate.getName();
          StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
          this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable registered in this play.", acceptor);
        }
      }
    }
  }
  
  public void completeIndexOrLoopVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EIndexOrLoopVariableImpl> candidatesIndexOrLoopVariables = EcoreUtil2.<EIndexOrLoopVariableImpl>getAllContentsOfType(rootPlay, EIndexOrLoopVariableImpl.class);
      for (final EIndexOrLoopVariableImpl candidate : candidatesIndexOrLoopVariables) {
        if (needsPrefix) {
          this.createNonEditableCompletionProposal("index_or_loop_var: ".concat(candidate.getName()), new StyledString("index_or_loop_var: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable defined with the \'index_var\' or \'loop_var\' keyword.", acceptor);
        } else {
          String _name = candidate.getName();
          String _name_1 = candidate.getName();
          StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
          this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable defined with the \'index_var\' or \'loop_var\' keyword.", acceptor);
        }
      }
    }
  }
  
  public void completeSetFactVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlaybookImpl rootPlaybook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    final List<EParameterImpl> candidatesSetFactsVariables = EcoreUtil2.<EParameterImpl>getAllContentsOfType(rootPlaybook, EParameterImpl.class);
    ArrayList<EParameter> legitCandidatesSetFactsVariables = new ArrayList<EParameter>();
    for (final EParameterImpl parameter : candidatesSetFactsVariables) {
      {
        final EModuleCallImpl moduleCall = EcoreUtil2.<EModuleCallImpl>getContainerOfType(parameter, EModuleCallImpl.class);
        if ((moduleCall != null)) {
          String _name = moduleCall.getName();
          boolean _equals = Objects.equal(_name, "set_fact");
          if (_equals) {
            legitCandidatesSetFactsVariables.add(parameter);
          }
        }
      }
    }
    for (final EParameter candidate : legitCandidatesSetFactsVariables) {
      if (needsPrefix) {
        this.createNonEditableCompletionProposal("fact_set: ".concat(candidate.getName()), new StyledString("fact_set: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable set with the \'set_fact\' module in this playbook.", acceptor);
      } else {
        String _name = candidate.getName();
        String _name_1 = candidate.getName();
        StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
        this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable set with the \'set_fact\' module in this playbook.", acceptor);
      }
    }
  }
  
  public void completeInputOperationVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlaybookImpl rootPlaybook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    if ((rootPlaybook != null)) {
      final EUsedByBody usedByBody = rootPlaybook.getUsed_by();
      if ((usedByBody != null)) {
        final EOperationDefinition operation = usedByBody.getOperation();
        if ((operation != null)) {
          final List<EParameterDefinitionImpl> candidatesInputVariableOperation = EcoreUtil2.<EParameterDefinitionImpl>getAllContentsOfType(operation, EParameterDefinitionImpl.class);
          for (final EParameterDefinitionImpl candidate : candidatesInputVariableOperation) {
            if (needsPrefix) {
              String _concat = "operation_input: ".concat("\"").concat(candidate.getName()).concat("\"");
              StyledString _append = new StyledString("operation_input: ").append("\"".concat(candidate.getName()).concat("\""), StyledString.COUNTER_STYLER).append(" - RM input");
              String _name = operation.getName();
              String _plus = ("An input variable from the \'" + _name);
              String _plus_1 = (_plus + "\' operation.");
              this.createNonEditableCompletionProposal(_concat, _append, context, _plus_1, acceptor);
            } else {
              String _concat_1 = "\"".concat(candidate.getName()).concat("\"");
              String _concat_2 = "\"".concat(candidate.getName()).concat("\"");
              StyledString _append_1 = new StyledString(_concat_2, StyledString.COUNTER_STYLER).append(" - RM input");
              String _name_1 = operation.getName();
              String _plus_2 = ("An input variable from the \'" + _name_1);
              String _plus_3 = (_plus_2 + "\' operation.");
              this.createNonEditableCompletionProposal(_concat_1, _append_1, context, _plus_3, acceptor);
            }
          }
        }
      }
    }
  }
  
  public void completeInputInterfaceVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlaybookImpl rootPlaybook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    if ((rootPlaybook != null)) {
      final EUsedByBody usedByBody = rootPlaybook.getUsed_by();
      if ((usedByBody != null)) {
        final EOperationDefinition operation = usedByBody.getOperation();
        if ((operation != null)) {
          final EInterfaceDefinitionBodyImpl interfaceDefinitionBody = EcoreUtil2.<EInterfaceDefinitionBodyImpl>getContainerOfType(operation, EInterfaceDefinitionBodyImpl.class);
          final EInterfaceDefinitionImpl interfaceDefinition = EcoreUtil2.<EInterfaceDefinitionImpl>getContainerOfType(operation, EInterfaceDefinitionImpl.class);
          final EProperties inputsProperties = interfaceDefinitionBody.getInputs();
          if ((inputsProperties != null)) {
            EList<EPropertyDefinition> _properties = inputsProperties.getProperties();
            for (final EPropertyDefinition input : _properties) {
              if (needsPrefix) {
                String _concat = "interface_input: ".concat("\"").concat(input.getName()).concat("\"");
                StyledString _append = new StyledString("interface_input: ").append("\"".concat(input.getName()).concat("\""), StyledString.COUNTER_STYLER).append(" - RM input");
                String _name = interfaceDefinition.getName();
                String _plus = ("An input variable from the \'" + _name);
                String _plus_1 = (_plus + "\' interface.");
                this.createNonEditableCompletionProposal(_concat, _append, context, _plus_1, acceptor);
              } else {
                String _concat_1 = "\"".concat(input.getName()).concat("\"");
                String _concat_2 = "\"".concat(input.getName()).concat("\"");
                StyledString _append_1 = new StyledString(_concat_2, StyledString.COUNTER_STYLER).append(" - RM input");
                String _name_1 = interfaceDefinition.getName();
                String _plus_2 = ("An input variable from the \'" + _name_1);
                String _plus_3 = (_plus_2 + "\' interface.");
                this.createNonEditableCompletionProposal(_concat_1, _append_1, context, _plus_3, acceptor);
              }
            }
          }
        }
      }
    }
  }
  
  public void createNonEditableCompletionProposal(final String proposalText, final StyledString displayText, final ContentAssistContext context, final String additionalProposalInfo, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal proposal = this.createCompletionProposal(proposalText, displayText, null, context);
    if ((proposal instanceof ConfigurableCompletionProposal)) {
      final ConfigurableCompletionProposal configurable = ((ConfigurableCompletionProposal) proposal);
      configurable.setAdditionalProposalInfo(additionalProposalInfo);
      configurable.setAutoInsertable(false);
    }
    acceptor.accept(proposal);
  }
  
  public void createEditableCompletionProposal(final String proposalText, final String displayText, final ContentAssistContext context, final String additionalProposalInfo, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal proposal = this.createCompletionProposal(proposalText, displayText, null, context);
    if ((proposal instanceof ConfigurableCompletionProposal)) {
      final ConfigurableCompletionProposal configurable = ((ConfigurableCompletionProposal) proposal);
      configurable.setSelectionStart(configurable.getReplacementOffset());
      configurable.setSelectionLength(proposalText.length());
      configurable.setAutoInsertable(false);
      configurable.setSimpleLinkedMode(context.getViewer(), '\t', ' ');
      configurable.setAdditionalProposalInfo(additionalProposalInfo);
    }
    acceptor.accept(proposal);
  }
}
