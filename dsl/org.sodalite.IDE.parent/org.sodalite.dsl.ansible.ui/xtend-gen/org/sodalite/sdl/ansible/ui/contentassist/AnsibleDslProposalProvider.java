/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ui.contentassist;

import com.google.common.base.Objects;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Projections;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.TextStyle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.sodalite.dsl.ansible.helper.AnsibleHelper;
import org.sodalite.dsl.kb_reasoner_client.exceptions.SodaliteException;
import org.sodalite.dsl.kb_reasoner_client.types.InterfaceDefinition;
import org.sodalite.dsl.kb_reasoner_client.types.InterfaceDefinitionData;
import org.sodalite.dsl.kb_reasoner_client.types.OperationData;
import org.sodalite.dsl.kb_reasoner_client.types.ReasonerData;
import org.sodalite.dsl.kb_reasoner_client.types.Type;
import org.sodalite.dsl.rM.EInterfaceDefinition;
import org.sodalite.dsl.rM.ENodeType;
import org.sodalite.dsl.rM.EOperationDefinition;
import org.sodalite.dsl.rM.EProperties;
import org.sodalite.dsl.rM.EPropertyDefinition;
import org.sodalite.dsl.rM.impl.EInterfaceDefinitionImpl;
import org.sodalite.dsl.rM.impl.EOperationDefinitionImpl;
import org.sodalite.dsl.rM.impl.EParameterDefinitionImpl;
import org.sodalite.dsl.ui.helper.RMHelper;
import org.sodalite.ide.ui.backend.SodaliteBackendProxy;
import org.sodalite.ide.ui.logger.SodaliteLogger;
import org.sodalite.sdl.ansible.ansibleDsl.EBlock;
import org.sodalite.sdl.ansible.ansibleDsl.ECollectionFQN;
import org.sodalite.sdl.ansible.ansibleDsl.ECollectionListPassed;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPair;
import org.sodalite.sdl.ansible.ansibleDsl.EHandler;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaAndString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaOrString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaOrStringWithoutQuotes;
import org.sodalite.sdl.ansible.ansibleDsl.EModuleCall;
import org.sodalite.sdl.ansible.ansibleDsl.EPREFIX_TYPE;
import org.sodalite.sdl.ansible.ansibleDsl.EParameter;
import org.sodalite.sdl.ansible.ansibleDsl.EPlay;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleName;
import org.sodalite.sdl.ansible.ansibleDsl.EStringWithoutQuotesPassed;
import org.sodalite.sdl.ansible.ansibleDsl.ETask;
import org.sodalite.sdl.ansible.ansibleDsl.EUsedByBody;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclaration;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclarationVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.Node;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ECollectionFQNImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EDictionaryPairImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EHandlerImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EIndexOrLoopVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EJinjaOrStringWithoutQuotesImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EModuleCallImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ENotifiedTopicImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EParameterImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlaybookImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERegisterVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EVariableDeclarationImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.KBNodeImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.LocalNodeImpl;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class AnsibleDslProposalProvider extends AbstractAnsibleDslProposalProvider {
  private final String PRIVILEGE_ESCALATION_DESCRIPTION = (((((("This is used for setting up the privilege escalation.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- become   -> bool\n") + 
    "\t- become_exe   -> string\n") + 
    "\t- become_flags   -> string\n") + 
    "\t- become_method   -> string\n") + 
    "\t- become_user   -> string");
  
  private final String VALIDATION_MODE_DESCRIPTION = ((("This is used for setting up the two modes of execution that validate tasks.\n\n" + 
    "The two modes, and the correspondent attributes that can be set, are:\n\n") + 
    "\t- check_mode   -> bool\n") + 
    "\t- diff   -> bool");
  
  private final String CONNECTION_INFO_DESCRIPTION = (((("This is used for defining the settings of the connection.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- connection   -> string\n") + 
    "\t- port_attribute (\"port\" in classic Ansible)   -> int\n") + 
    "\t- remote_user   -> string");
  
  private final String PLAY_EXE_SETTINGS_DESCRIPTION = (((((("This is used for controlling the execution of the play.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- strategy   -> string\n") + 
    "\t- serial   -> list\n") + 
    "\t- order   -> string\n") + 
    "\t- throttle   -> int\n") + 
    "\t- run_once   -> bool");
  
  private final String PLAY_ERROR_HANDLING_DESCRIPTION = ((((("This is used for setting up how to handle the errors in a play.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- max_fail_percentage   -> percentage\n") + 
    "\t- any_errors_fatal   -> bool\n") + 
    "\t- ignore_errors   -> bool\n") + 
    "\t- ignore_unreachable   -> bool");
  
  private final String FACTS_SETTINGS_DESCRIPTION = ((((("This is used for setting up how the gathering of facts is handled.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- gather_facts   -> bool\n") + 
    "\t- gather_subset   -> list\n") + 
    "\t- gather_timeout   -> int\n") + 
    "\t- fact_path   -> string");
  
  private final String EXECUTION_EXE_SETTINGS_DESCRIPTION = ((("This is used for controlling the execution of the task/block/handler/role.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- throttle   -> int\n") + 
    "\t- run_once   -> bool");
  
  private final String DELEGATION_DESCRIPTION = ((("This is used for setting up the delegation settings.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- delegate_to   -> string\n") + 
    "\t- delegate_facts   -> bool");
  
  private final String BLOCK_AND_ROLE_ERROR_HANDLING_DESCRIPTION = (((("This is used for setting up how to handle the errors in a block/role inclusion.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- any_errors_fatal   -> bool\n") + 
    "\t- ignore_errors   -> bool\n") + 
    "\t- ignore_unreachable   -> bool");
  
  private final String TASK_HANDLER_ERROR_HANDLING_DESCRIPTION = (((((("This is used for setting up how to handle the errors in a task/handler.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- changed_when   -> condition\n") + 
    "\t- failed_when   -> condition\n") + 
    "\t- any_errors_fatal   -> bool\n") + 
    "\t- ignore_errors   -> bool\n") + 
    "\t- ignore_unreachable   -> bool");
  
  private final String ASYNCHRONOUS_SETTINGS_DESCRIPTION = ((("This is used for setting up the asynchronous behavior of a task/handler.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- async   -> int\n") + 
    "\t- poll   -> int");
  
  private final String MODULE_CALL_DESCRIPTION = ((((((("This is used for defining which is the module to be used in this task/handler.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- module: it\'s the identifier (string) of the module to be used.\n") + 
    "\t- direct_parameter: it\'s a value passed to the module without an explicit\n") + 
    "\t  \t  name of the parameter, like it\'s done for example with shell module.\n") + 
    "\t  \t  This attribute isn\'t mandatory.\n") + 
    "\t- parameters: it\'s just the keyword for defining the list of couples\n") + 
    "\t  \t  \'identifier of the parameter\'-\'value passed to it\'");
  
  private final String LOOP_DESCRIPTION = ((((((((((("This is used for defining a loop over the current task/handler.\n\n" + 
    "There are 3 types of loops and 3 correspondent attributes:\n\n") + 
    "\t- loop_over: when the loop is done over a list of values.\n") + 
    "\t  \t  This attribute allows to specify which is the list.\n") + 
    "\t  \t  In this case the additional entity \'loop_control\' can be used\n") + 
    "\t  \t  for specifying additional properties of the loop.\n") + 
    "\t- with: the \'with_<lookup>\' keyword for doing loops in Ansible.\n") + 
    "\t- until: when the operations are repeated until a condition is met.\n") + 
    "\t  \t  The attributes that can be set in this case are:\n") + 
    "\t   \t  \t - until_condition   -> the end condition to meet.\n") + 
    "\t   \t  \t - retries   -> int\n") + 
    "\t   \t   \t - delay_attribute (\"delay\" in classic Ansible)  -> int\n");
  
  private final String LOOP_CONTROL_DESCRIPTION = (((((("This is used for setting up how the loop over a list is done.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- label   -> string\n") + 
    "\t- pause   -> float\n") + 
    "\t- index_var   -> identifier of the var\n") + 
    "\t- loop_var   -> identifier of the var\n") + 
    "\t- extended   -> bool");
  
  private final String USED_BY_DESCRIPTION = ((((((("This is the bridge between this Ansible model and the TOSCA RM.\n\n" + 
    "Here it can be defined which is the TOSCA operation that will use this\n") + 
    "playbook for its implementation.\n\n") + 
    "The attributes that can be set are (they are both strings):\n\n") + 
    "\t- node_type: the node type containing the operation.\n") + 
    "\t- operation: the operation that uses this playbook for its implementation\n.") + 
    "\t\t\tThe operation must be contained in an interface of the selected\n") + 
    "\t\t\tnode type.");
  
  private final String EXTERNAL_FILE_INCLUSION_DESCRIPTION = (((((("This is used for importing/including a yaml file.\n\n" + 
    "The attributes that can be set are:\n\n") + 
    "\t- import_playbook   -> the name of the yaml file\n") + 
    "\t- include   -> the name of the yaml file\n") + 
    "\t- when   -> condition\n\n") + 
    "It can be selected either \"import_playbook\" or \"include\",\n") + 
    "while \"when\" is not mandatory.");
  
  private final String WITH_LOOKUP_DESCRIPTION = (("This is the classic \'with_<lookup>\' keyword in Ansible.\n" + 
    "The user is supposed to write \'with\' followed by a space and the <lookup>.\n") + 
    "Writing for example \'with items:\' will be translated into \'with_items:\'.");
  
  public void complete_EPrivilegeEscalation(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("privilege_escalation:");
    this.createNonEditableCompletionProposal("privilege_escalation:", _styledString, context, this.PRIVILEGE_ESCALATION_DESCRIPTION, acceptor);
  }
  
  public void complete_EValidationMode(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("validation_mode:");
    this.createNonEditableCompletionProposal("validation_mode:", _styledString, context, this.VALIDATION_MODE_DESCRIPTION, acceptor);
  }
  
  public void complete_EConnection(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("connection_info:");
    this.createNonEditableCompletionProposal("connection_info:", _styledString, context, this.CONNECTION_INFO_DESCRIPTION, acceptor);
  }
  
  public void complete_EPlayExeSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("play_exe_settings:");
    this.createNonEditableCompletionProposal("play_exe_settings:", _styledString, context, this.PLAY_EXE_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EPlayErrorHandling(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("error_handling:");
    this.createNonEditableCompletionProposal("error_handling:", _styledString, context, this.PLAY_ERROR_HANDLING_DESCRIPTION, acceptor);
  }
  
  public void complete_EFactsSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("facts_settings:");
    this.createNonEditableCompletionProposal("facts_settings:", _styledString, context, this.FACTS_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EExecutionExeSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("exe_settings:");
    this.createNonEditableCompletionProposal("exe_settings:", _styledString, context, this.EXECUTION_EXE_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EDelegation(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("delegation:");
    this.createNonEditableCompletionProposal("delegation:", _styledString, context, this.DELEGATION_DESCRIPTION, acceptor);
  }
  
  public void complete_EBlockAndRoleErrorHandling(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("error_handling:");
    this.createNonEditableCompletionProposal("error_handling:", _styledString, context, this.BLOCK_AND_ROLE_ERROR_HANDLING_DESCRIPTION, acceptor);
  }
  
  public void complete_ETaskHandlerErrorHandling(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("error_handling:");
    this.createNonEditableCompletionProposal("error_handling:", _styledString, context, this.TASK_HANDLER_ERROR_HANDLING_DESCRIPTION, acceptor);
  }
  
  public void complete_EAsynchronousSettings(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("asynchronous_settings:");
    this.createNonEditableCompletionProposal("asynchronous_settings:", _styledString, context, this.ASYNCHRONOUS_SETTINGS_DESCRIPTION, acceptor);
  }
  
  public void complete_EModuleCall(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("module:");
    this.createNonEditableCompletionProposal("module:", _styledString, context, this.MODULE_CALL_DESCRIPTION, acceptor);
  }
  
  public void complete_ELoop(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("loop:");
    this.createNonEditableCompletionProposal("loop:", _styledString, context, this.LOOP_DESCRIPTION, acceptor);
  }
  
  public void complete_ELoopControl(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("loop_control:");
    this.createNonEditableCompletionProposal("loop_control:", _styledString, context, this.LOOP_CONTROL_DESCRIPTION, acceptor);
  }
  
  public void complete_EExternalFileInclusion(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("external_file_inclusion:");
    this.createNonEditableCompletionProposal("external_file_inclusion:", _styledString, context, this.EXTERNAL_FILE_INCLUSION_DESCRIPTION, acceptor);
  }
  
  public void complete_EUsedByBody(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("used_by:");
    this.createNonEditableCompletionProposal("used_by:", _styledString, context, this.USED_BY_DESCRIPTION, acceptor);
  }
  
  public void complete_EWithLookup(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    StyledString _styledString = new StyledString("with");
    this.createNonEditableCompletionProposal("with", _styledString, context, this.WITH_LOOKUP_DESCRIPTION, acceptor);
  }
  
  public void complete_BOOLEAN(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof EParameter)) {
      boolean _equals = AnsibleHelper.getCacheData().get("currentParameterChoices").equals("available");
      if (_equals) {
        return;
      }
      String type = AnsibleHelper.getCacheData().get("currentParameterType");
      if (((!type.equals("boolean")) && (!type.isEmpty()))) {
        return;
      }
    } else {
      if (((model instanceof EDictionaryPairImpl) && (EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class) != null))) {
        boolean _equals_1 = AnsibleHelper.getCacheData().get("currentSubparameterChoices").equals("available");
        if (_equals_1) {
          return;
        }
        String type_1 = AnsibleHelper.getCacheData().get("currentSubparameterType");
        if (((!type_1.equals("boolean")) && (!type_1.isEmpty()))) {
          return;
        }
      }
    }
    Boolean _existProposal = AnsibleHelper.existProposal("False", acceptor);
    boolean _not = (!(_existProposal).booleanValue());
    if (_not) {
      acceptor.accept(this.createCompletionProposal("False", context));
    }
    Boolean _existProposal_1 = AnsibleHelper.existProposal("True", acceptor);
    boolean _not_1 = (!(_existProposal_1).booleanValue());
    if (_not_1) {
      acceptor.accept(this.createCompletionProposal("True", context));
    }
    Boolean _existProposal_2 = AnsibleHelper.existProposal("false", acceptor);
    boolean _not_2 = (!(_existProposal_2).booleanValue());
    if (_not_2) {
      acceptor.accept(this.createCompletionProposal("false", context));
    }
    Boolean _existProposal_3 = AnsibleHelper.existProposal("true", acceptor);
    boolean _not_3 = (!(_existProposal_3).booleanValue());
    if (_not_3) {
      acceptor.accept(this.createCompletionProposal("true", context));
    }
  }
  
  public void complete_BOOLEAN_ONLY_ANSIBLE(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof EParameter)) {
      boolean _equals = AnsibleHelper.getCacheData().get("currentParameterChoices").equals("available");
      if (_equals) {
        return;
      }
      String type = AnsibleHelper.getCacheData().get("currentParameterType");
      if (((!type.equals("boolean")) && (!type.isEmpty()))) {
        return;
      }
    } else {
      if (((model instanceof EDictionaryPairImpl) && (EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class) != null))) {
        boolean _equals_1 = AnsibleHelper.getCacheData().get("currentSubparameterChoices").equals("available");
        if (_equals_1) {
          return;
        }
        String type_1 = AnsibleHelper.getCacheData().get("currentSubparameterType");
        if (((!type_1.equals("boolean")) && (!type_1.isEmpty()))) {
          return;
        }
      }
    }
    Boolean _existProposal = AnsibleHelper.existProposal("no", acceptor);
    boolean _not = (!(_existProposal).booleanValue());
    if (_not) {
      acceptor.accept(this.createCompletionProposal("no", context));
    }
    Boolean _existProposal_1 = AnsibleHelper.existProposal("yes", acceptor);
    boolean _not_1 = (!(_existProposal_1).booleanValue());
    if (_not_1) {
      acceptor.accept(this.createCompletionProposal("yes", context));
    }
  }
  
  public void complete_NULL(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof EParameter)) {
      boolean _equals = AnsibleHelper.getCacheData().get("currentParameterChoices").equals("available");
      if (_equals) {
        return;
      }
    } else {
      if (((model instanceof EDictionaryPairImpl) && (EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class) != null))) {
        boolean _equals_1 = AnsibleHelper.getCacheData().get("currentSubparameterChoices").equals("available");
        if (_equals_1) {
          return;
        }
      }
    }
    Boolean _existProposal = AnsibleHelper.existProposal("null", acceptor);
    boolean _not = (!(_existProposal).booleanValue());
    if (_not) {
      acceptor.accept(this.createCompletionProposal("null", context));
    }
  }
  
  public void complete_SIMPLE_NUMBER(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof EParameter)) {
      boolean _equals = AnsibleHelper.getCacheData().get("currentParameterChoices").equals("available");
      if (_equals) {
        return;
      }
      String type = AnsibleHelper.getCacheData().get("currentParameterType");
      if ((((!type.equals("int")) && (!type.equals("float"))) && (!type.isEmpty()))) {
        return;
      }
    } else {
      if (((model instanceof EDictionaryPairImpl) && (EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class) != null))) {
        boolean _equals_1 = AnsibleHelper.getCacheData().get("currentSubparameterChoices").equals("available");
        if (_equals_1) {
          return;
        }
        String type_1 = AnsibleHelper.getCacheData().get("currentSubparameterType");
        if ((((!type_1.equals("int")) && (!type_1.equals("float"))) && (!type_1.isEmpty()))) {
          return;
        }
      }
    }
    this.createEditableCompletionProposal("0", "0 - NUMBER", context, "A number", acceptor);
  }
  
  public void completeEForStatement_Recursive(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("recursive", context));
  }
  
  public void completeEParameter_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("Parameter_Name", "Parameter_Name", context, "Name of a parameter", acceptor);
    if ((model instanceof EModuleCall)) {
      this.completeEParameter_Name_Module(((EModuleCall) model), assignment, context, acceptor);
    }
  }
  
  public void completeEParameter_Name_Module(final EModuleCall module, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    String fqn = AnsibleHelper.calculateModuleName(module);
    Map<String, Map<String, Object>> parameters = AnsibleHelper.findParameters(module, fqn);
    StyledString.Styler requiredParameterStyler = null;
    Set<String> _keySet = parameters.keySet();
    for (final String parameterKey : _keySet) {
      {
        Map<String, Object> parameter = parameters.get(parameterKey);
        String parameterType = null;
        String description = "";
        boolean _containsKey = parameter.containsKey("required");
        if (_containsKey) {
          requiredParameterStyler = new StyledString.Styler() {
            public void applyStyles(final TextStyle textStyle) {
              textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_RED);
            }
          };
        } else {
          requiredParameterStyler = new StyledString.Styler() {
            public void applyStyles(final TextStyle textStyle) {
              textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
            }
          };
        }
        boolean _containsKey_1 = parameter.containsKey("description");
        if (_containsKey_1) {
          Object _get = parameter.get("description");
          description = ((String) _get);
        }
        boolean _containsKey_2 = parameter.containsKey("type");
        if (_containsKey_2) {
          Object _get_1 = parameter.get("type");
          parameterType = ((String) _get_1);
          String _concat = parameterKey.concat(" - ").concat(parameterType);
          StyledString _styledString = new StyledString(_concat, requiredParameterStyler);
          this.createNonEditableCompletionProposal((parameterKey + ":"), _styledString, context, "Parameter of module ".concat(fqn).concat("\n").concat("Description:").concat("\n").concat(description), acceptor);
        } else {
          StyledString _styledString_1 = new StyledString(parameterKey, requiredParameterStyler);
          this.createNonEditableCompletionProposal((parameterKey + ":"), _styledString_1, context, "Parameter of module ".concat(fqn).concat("\n").concat("Description:").concat("\n").concat(description), acceptor);
        }
      }
    }
  }
  
  public void completeEParameter_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> booleanValues = Arrays.<String>asList("yes", "no", "True", "False", "true", "false");
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    EParameter parameter = EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class);
    EModuleCall module = EcoreUtil2.<EModuleCall>getContainerOfType(parameter, EModuleCall.class);
    String fqn = AnsibleHelper.calculateModuleName(module);
    String[] nameParts = fqn.split("\\.");
    String type = "";
    List<String> choices = new ArrayList<String>();
    String default_value = "";
    StyledString.Styler defaultValueParameterStyler = new StyledString.Styler() {
      public void applyStyles(final TextStyle textStyle) {
        textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_BLUE);
      }
    };
    StyledString.Styler choicesValueParameterStyler = new StyledString.Styler() {
      public void applyStyles(final TextStyle textStyle) {
        textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GREEN);
      }
    };
    String projection = "modules".concat(".").concat(nameParts[2]).concat(".").concat("parameters").concat(".").concat(parameter.getName());
    Bson match = Aggregates.match(Filters.<String>eq("_id", (nameParts[0]).concat(".").concat(nameParts[1])));
    Bson details_project = Aggregates.project(Projections.fields(Projections.excludeId(), Projections.<String>computed("details", "$".concat(projection))));
    Iterator<Document> detailsIterator = mongo_collection.aggregate(Arrays.<Bson>asList(match, details_project)).iterator();
    while (detailsIterator.hasNext()) {
      {
        Document content = detailsIterator.next();
        boolean _isEmpty = content.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          Object _get = content.get("details");
          Document details = ((Document) _get);
          String choicesAvailability = "";
          Object _get_1 = details.get("choices");
          boolean _tripleNotEquals = (_get_1 != null);
          if (_tripleNotEquals) {
            Object _get_2 = details.get("choices");
            choices = ((List<String>) _get_2);
            choicesAvailability = "available";
          } else {
            choices = Collections.<String>emptyList();
            choicesAvailability = "not available";
          }
          String _xifexpression = null;
          Object _get_3 = details.get("default");
          boolean _tripleNotEquals_1 = (_get_3 != null);
          if (_tripleNotEquals_1) {
            _xifexpression = String.valueOf(details.get("default"));
          } else {
            _xifexpression = "";
          }
          default_value = _xifexpression;
          String _xifexpression_1 = null;
          Object _get_4 = details.get("type");
          boolean _tripleNotEquals_2 = (_get_4 != null);
          if (_tripleNotEquals_2) {
            _xifexpression_1 = String.valueOf(details.get("type"));
          } else {
            _xifexpression_1 = "";
          }
          type = _xifexpression_1;
          Map<String, String> cacheData = new HashMap<String, String>();
          cacheData.put("currentModule", fqn);
          cacheData.put("currentParameter", parameter.getName());
          cacheData.put("currentParameterType", type);
          cacheData.put("currentParameterChoices", choicesAvailability);
          AnsibleHelper.setCacheData(cacheData);
        }
      }
    }
    if ((((choices == null) || choices.isEmpty()) && (!Objects.equal(default_value, "")))) {
      String _concat = default_value.concat(" - Default value");
      StyledString _styledString = new StyledString(_concat, defaultValueParameterStyler);
      this.createNonEditableCompletionProposal(default_value, _styledString, context, "Default value", acceptor);
    }
    if ((choices != null)) {
      for (final String choice : choices) {
        {
          String proposal = null;
          boolean _contains = booleanValues.contains(choice);
          if (_contains) {
            proposal = choice;
          } else {
            proposal = "\"".concat(choice).concat("\"");
          }
          boolean _equals = choice.equals(default_value);
          if (_equals) {
            String _concat_1 = choice.concat(" - Default value");
            StyledString _styledString_1 = new StyledString(_concat_1, defaultValueParameterStyler);
            this.createNonEditableCompletionProposal(proposal, _styledString_1, context, "Permitted value", acceptor);
          } else {
            StyledString _styledString_2 = new StyledString(choice, choicesValueParameterStyler);
            this.createNonEditableCompletionProposal(proposal, _styledString_2, context, "Permitted value", acceptor);
          }
        }
      }
    }
  }
  
  public void completeKeyword(final Keyword keyword, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
    EObject _currentModel = contentAssistContext.getCurrentModel();
    if ((_currentModel instanceof EParameter)) {
      String type = AnsibleHelper.getCacheData().get("currentParameterType");
      if ((((!type.contains("list")) && (!type.isEmpty())) && (Objects.equal(keyword.getValue(), "[") || Objects.equal(keyword.getValue(), "-")))) {
        return;
      }
      if ((((!type.equals("dictionary")) && (!type.isEmpty())) && Objects.equal(keyword.getValue(), "{"))) {
        return;
      }
    } else {
      if (((contentAssistContext.getCurrentModel() instanceof EDictionaryPairImpl) && (EcoreUtil2.<EParameter>getContainerOfType(contentAssistContext.getCurrentModel(), EParameter.class) != null))) {
        String type_1 = AnsibleHelper.getCacheData().get("currentSubparameterType");
        if ((((!type_1.contains("list")) && (!type_1.isEmpty())) && (Objects.equal(keyword.getValue(), "[") || Objects.equal(keyword.getValue(), "-")))) {
          return;
        }
        if ((((!type_1.equals("dictionary")) && (!type_1.isEmpty())) && Objects.equal(keyword.getValue(), "{"))) {
          return;
        }
      }
    }
    super.completeKeyword(keyword, contentAssistContext, acceptor);
  }
  
  public void complete_STRING(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof EParameter)) {
      boolean _equals = AnsibleHelper.getCacheData().get("currentParameterChoices").equals("available");
      if (_equals) {
        return;
      }
      String type = AnsibleHelper.getCacheData().get("currentParameterType");
      if ((((!type.equals("string")) && (!type.equals("path"))) && (!type.isEmpty()))) {
        return;
      }
    } else {
      if (((model instanceof EDictionaryPairImpl) && (EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class) != null))) {
        boolean _equals_1 = AnsibleHelper.getCacheData().get("currentSubparameterChoices").equals("available");
        if (_equals_1) {
          return;
        }
        String type_1 = AnsibleHelper.getCacheData().get("currentSubparameterType");
        if ((((!type_1.equals("string")) && (!type_1.equals("path"))) && (!type_1.isEmpty()))) {
          return;
        }
      }
    }
    super.complete_STRING(model, ruleCall, context, acceptor);
  }
  
  public void completeEVariableDeclaration_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("Variable_Name", "Variable_Name - ID", context, "The identifier of the variable to be declared.", acceptor);
  }
  
  public void completeEDictionaryPair_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createEditableCompletionProposal("Name", "Name - ID", context, "The identifier of a key of the dictionary.", acceptor);
    EParameter _containerOfType = EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      this.completeSubparameter_Name(model, assignment, context, acceptor);
    }
    super.completeEDictionaryPair_Name(model, assignment, context, acceptor);
  }
  
  public void completeSubparameter_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EParameter parameter = EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class);
    EModuleCall module = EcoreUtil2.<EModuleCall>getContainerOfType(parameter, EModuleCall.class);
    String fqn = AnsibleHelper.calculateModuleName(module);
    Iterator<EObject> containers = EcoreUtil2.getAllContainers(model).iterator();
    List<String> parameterPath = new ArrayList<String>();
    if ((model instanceof EJinjaAndString)) {
      containers.next();
    }
    if ((model instanceof EDictionaryPair)) {
      EValuePassed _value = ((EDictionaryPair) model).getValue();
      boolean _tripleEquals = (_value == null);
      if (_tripleEquals) {
        parameterPath.add(0, ((EDictionaryPair) model).getName());
      }
    }
    while (containers.hasNext()) {
      {
        EObject container = containers.next();
        if ((container instanceof EDictionaryPair)) {
          parameterPath.add(0, ((EDictionaryPair) container).getName());
        }
      }
    }
    parameterPath.add(0, parameter.getName());
    Map<String, Map<String, Object>> subparameters = AnsibleHelper.findSubparameters(fqn, parameterPath);
    StyledString.Styler requiredParameterStyler = null;
    Set<String> _keySet = subparameters.keySet();
    for (final String subparameterKey : _keySet) {
      {
        Map<String, Object> subparameter = subparameters.get(subparameterKey);
        String parameterType = null;
        String description = "";
        boolean _containsKey = subparameter.containsKey("required");
        if (_containsKey) {
          requiredParameterStyler = new StyledString.Styler() {
            public void applyStyles(final TextStyle textStyle) {
              textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_RED);
            }
          };
        } else {
          requiredParameterStyler = new StyledString.Styler() {
            public void applyStyles(final TextStyle textStyle) {
              textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
            }
          };
        }
        boolean _containsKey_1 = subparameter.containsKey("description");
        if (_containsKey_1) {
          Object _get = subparameter.get("description");
          description = ((String) _get);
        }
        boolean _containsKey_2 = subparameter.containsKey("type");
        if (_containsKey_2) {
          Object _get_1 = subparameter.get("type");
          parameterType = ((String) _get_1);
          String _concat = subparameterKey.concat(" - ").concat(parameterType);
          StyledString _styledString = new StyledString(_concat, requiredParameterStyler);
          int _size = parameterPath.size();
          int _minus = (_size - 1);
          this.createNonEditableCompletionProposal((subparameterKey + ":"), _styledString, context, "Subparameter of ".concat(parameterPath.get(_minus)).concat("\n").concat("Description:").concat("\n").concat(description), acceptor);
        } else {
          StyledString _styledString_1 = new StyledString(subparameterKey, requiredParameterStyler);
          int _size_1 = parameterPath.size();
          int _minus_1 = (_size_1 - 1);
          this.createNonEditableCompletionProposal((subparameterKey + ":"), _styledString_1, context, "Subparameter of ".concat(parameterPath.get(_minus_1)).concat("\n").concat("Description:").concat("\n").concat(description), acceptor);
        }
      }
    }
  }
  
  public void completeEDictionaryPair_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EParameter _containerOfType = EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      this.completeSubparameter_Value(model, assignment, context, acceptor);
    }
    super.completeEDictionaryPair_Value(model, assignment, context, acceptor);
    StyledString _styledString = new StyledString(":");
    this.createNonEditableCompletionProposal(":", _styledString, context, "", acceptor);
  }
  
  public void completeSubparameter_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> booleanValues = Arrays.<String>asList("yes", "no", "True", "False", "true", "false");
    String type = "";
    List<String> choices = null;
    String default_value = "";
    StyledString.Styler defaultValueStyler = new StyledString.Styler() {
      public void applyStyles(final TextStyle textStyle) {
        textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_BLUE);
      }
    };
    StyledString.Styler choicesValueParameterStyler = new StyledString.Styler() {
      public void applyStyles(final TextStyle textStyle) {
        textStyle.foreground = Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GREEN);
      }
    };
    Document details = AnsibleHelper.findSubparameterDetails(model);
    if ((details != null)) {
      String choicesAvailability = "";
      Object _get = details.get("choices");
      boolean _tripleNotEquals = (_get != null);
      if (_tripleNotEquals) {
        Object _get_1 = details.get("choices");
        choices = ((List<String>) _get_1);
        choicesAvailability = "available";
      } else {
        choices = Collections.<String>emptyList();
        choicesAvailability = "not available";
      }
      String _xifexpression = null;
      Object _get_2 = details.get("default");
      boolean _tripleNotEquals_1 = (_get_2 != null);
      if (_tripleNotEquals_1) {
        _xifexpression = String.valueOf(details.get("default"));
      } else {
        _xifexpression = "";
      }
      default_value = _xifexpression;
      String _xifexpression_1 = null;
      Object _get_3 = details.get("type");
      boolean _tripleNotEquals_2 = (_get_3 != null);
      if (_tripleNotEquals_2) {
        _xifexpression_1 = String.valueOf(details.get("type"));
      } else {
        _xifexpression_1 = "";
      }
      type = _xifexpression_1;
      Map<String, String> cacheData = new HashMap<String, String>();
      cacheData.put("currentSubparameter", "");
      cacheData.put("currentSubparameterType", type);
      cacheData.put("currentSubparameterChoices", choicesAvailability);
      AnsibleHelper.setCacheData(cacheData);
    }
    if (((choices == null) && (!Objects.equal(default_value, "")))) {
      String _concat = default_value.concat(" - Default value");
      StyledString _styledString = new StyledString(_concat, defaultValueStyler);
      this.createNonEditableCompletionProposal(default_value, _styledString, context, "Default value", acceptor);
    }
    if ((choices != null)) {
      for (final String choice : choices) {
        {
          String proposal = null;
          boolean _contains = booleanValues.contains(choice);
          if (_contains) {
            proposal = choice;
          } else {
            proposal = "\"".concat(choice).concat("\"");
          }
          boolean _equals = choice.equals(default_value);
          if (_equals) {
            String _concat_1 = choice.concat(" - Default value");
            StyledString _styledString_1 = new StyledString(_concat_1, defaultValueStyler);
            this.createNonEditableCompletionProposal(proposal, _styledString_1, context, "Permitted value", acceptor);
          } else {
            StyledString _styledString_2 = new StyledString(choice, choicesValueParameterStyler);
            this.createNonEditableCompletionProposal(proposal, _styledString_2, context, "Permitted value", acceptor);
          }
        }
      }
    }
  }
  
  public void completeEListInLine_Elements(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EParameter _containerOfType = EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      this.completeSubparameter_Name(model, assignment, context, acceptor);
    }
    super.completeEListInLine_Elements(model, assignment, context, acceptor);
  }
  
  public void completeEListIndented_Elements(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EParameter _containerOfType = EcoreUtil2.<EParameter>getContainerOfType(model, EParameter.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      this.completeSubparameter_Name(model, assignment, context, acceptor);
    }
    super.completeEListIndented_Elements(model, assignment, context, acceptor);
  }
  
  public void completeEVariableDeclarationVariableReference_Variable_declaration_variable_reference(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeDeclaredVariableReference(model, context, acceptor, false);
  }
  
  public void completeERegisterVariableReference_Register_variable_reference(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeRegisteredVariableReference(model, context, acceptor, false);
  }
  
  public void completeEIndexOrLoopVariableReference_Index_or_loop_variable_reference(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeIndexOrLoopVariableReference(model, context, acceptor, false);
  }
  
  public void completeESetFactVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeSetFactVariableReference(model, context, acceptor, false);
  }
  
  public void completeLocalEInputOperationVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeInputOperationVariableReference(model, context, acceptor, false);
  }
  
  public void completeKBEInputOperationVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeInputOperationVariableReference(model, context, acceptor, false);
  }
  
  public void completeLocalEInputInterfaceVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeInputInterfaceVariableReference(model, context, acceptor, false);
  }
  
  public void completeKBEInputInterfaceVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeInputInterfaceVariableReference(model, context, acceptor, false);
  }
  
  public void complete_EVariableReference(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.completeDeclaredVariableReference(model, context, acceptor, true);
    this.completeRegisteredVariableReference(model, context, acceptor, true);
    this.completeIndexOrLoopVariableReference(model, context, acceptor, true);
    this.completeSetFactVariableReference(model, context, acceptor, true);
    this.completeInputOperationVariableReference(model, context, acceptor, true);
    this.completeInputInterfaceVariableReference(model, context, acceptor, true);
  }
  
  public void completeKBNode_Node_type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    try {
      try {
        final ReasonerData<String> raw_modules = SodaliteBackendProxy.getKBReasoner().getModules();
        List<String> modules = CollectionLiterals.<String>newArrayList();
        List<String> _elements = raw_modules.getElements();
        for (final String raw_module : _elements) {
          {
            final String module = RMHelper.extractModule(raw_module);
            modules.add(module);
          }
        }
        System.out.println(("Modules retrieved from KB: " + modules));
        final ReasonerData<Type> nodes = SodaliteBackendProxy.getKBReasoner().getNodeTypes(modules);
        System.out.println("Nodes retrieved from KB:");
        List<Type> _elements_1 = nodes.getElements();
        for (final Type node : _elements_1) {
          {
            String _label = node.getLabel();
            String _plus = ("\tNode: " + _label);
            System.out.println(_plus);
            String _xifexpression = null;
            String _module = node.getModule();
            boolean _tripleNotEquals = (_module != null);
            if (_tripleNotEquals) {
              String _lastSegment = RMHelper.getLastSegment(node.getModule(), "/");
              String _plus_1 = (_lastSegment + "/");
              String _label_1 = node.getLabel();
              _xifexpression = (_plus_1 + _label_1);
            } else {
              _xifexpression = node.getLabel();
            }
            final String qnode = _xifexpression;
            final String proposalText = qnode;
            final StyledString displayText = new StyledString(qnode);
            final String additionalProposalInfo = node.getDescription();
            this.createNonEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof SodaliteException) {
          final SodaliteException ex = (SodaliteException)_t;
          SodaliteLogger.log(ex.getMessage(), ex);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void completeLocalNode_Interface(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlaybookImpl playbook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    if ((playbook != null)) {
      final EUsedByBody usedByBody = playbook.getUsed_by();
      if ((usedByBody != null)) {
        Node _node = usedByBody.getNode();
        final ENodeType nodeType = ((LocalNodeImpl) _node).getNode_type();
        if ((nodeType != null)) {
          final List<EInterfaceDefinitionImpl> candidatesInterface = EcoreUtil2.<EInterfaceDefinitionImpl>getAllContentsOfType(nodeType, EInterfaceDefinitionImpl.class);
          for (final EInterfaceDefinitionImpl candidate : candidatesInterface) {
            String _concat = candidate.getName().concat(" - Interface: ");
            this.createNonEditableCompletionProposal("\"".concat(candidate.getName()).concat("\""), new StyledString(_concat).append(candidate.getName(), StyledString.COUNTER_STYLER), context, "One of the interfaces belonging to the selected node type.", acceptor);
          }
        }
      }
    }
  }
  
  public void completeKBNode_Interface(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    try {
      final EPlaybookImpl playbook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
      if ((playbook != null)) {
        final EUsedByBody usedByBody = playbook.getUsed_by();
        if ((usedByBody != null)) {
          Node _node = usedByBody.getNode();
          final EPREFIX_TYPE nodeType = ((KBNodeImpl) _node).getNode_type();
          String _xifexpression = null;
          String _module = nodeType.getModule();
          boolean _tripleNotEquals = (_module != null);
          if (_tripleNotEquals) {
            String _module_1 = nodeType.getModule();
            _xifexpression = (_module_1 + "/");
          } else {
            _xifexpression = "";
          }
          String _type = nodeType.getType();
          final String resourceId = (_xifexpression + _type);
          final InterfaceDefinitionData candidatesInterfaces = SodaliteBackendProxy.getKBReasoner().getTypeInterfaces(resourceId);
          List<InterfaceDefinition> _elements = candidatesInterfaces.getElements();
          for (final InterfaceDefinition candidateInterface : _elements) {
            {
              final String interface_label = RMHelper.getLastSegment(candidateInterface.getUri().toString(), "/");
              final String proposalText = interface_label;
              final StyledString displayText = new StyledString(interface_label);
              this.createNonEditableCompletionProposal(proposalText, displayText, context, "One of the interfaces belonging to the selected node type.", acceptor);
            }
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void completeLocalNode_Operation(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlaybookImpl playbook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    if ((playbook != null)) {
      final EUsedByBody usedByBody = playbook.getUsed_by();
      if ((usedByBody != null)) {
        Node _node = usedByBody.getNode();
        final ENodeType nodeType = ((LocalNodeImpl) _node).getNode_type();
        Node _node_1 = usedByBody.getNode();
        final EInterfaceDefinition interface_ = ((LocalNodeImpl) _node_1).getInterface();
        if ((nodeType != null)) {
          final List<EOperationDefinitionImpl> candidatesOperation = EcoreUtil2.<EOperationDefinitionImpl>getAllContentsOfType(interface_, EOperationDefinitionImpl.class);
          for (final EOperationDefinitionImpl candidate : candidatesOperation) {
            {
              final EInterfaceDefinitionImpl interfaceDefinition = EcoreUtil2.<EInterfaceDefinitionImpl>getContainerOfType(candidate, EInterfaceDefinitionImpl.class);
              String _concat = candidate.getName().concat(" - Interface: ");
              this.createNonEditableCompletionProposal("\"".concat(candidate.getName()).concat("\""), new StyledString(_concat).append(interfaceDefinition.getName(), StyledString.COUNTER_STYLER), context, "One of the operations belonging to the selected interface and node type.", acceptor);
            }
          }
        }
      }
    }
  }
  
  public void completeKBNode_Operation(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    try {
      final EPlaybookImpl playbook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
      if ((playbook != null)) {
        final EUsedByBody usedByBody = playbook.getUsed_by();
        if ((usedByBody != null)) {
          Node _node = usedByBody.getNode();
          final EPREFIX_TYPE nodeType = ((KBNodeImpl) _node).getNode_type();
          Node _node_1 = usedByBody.getNode();
          final String interface_ = ((KBNodeImpl) _node_1).getInterface();
          String _xifexpression = null;
          String _module = nodeType.getModule();
          boolean _tripleNotEquals = (_module != null);
          if (_tripleNotEquals) {
            String _module_1 = nodeType.getModule();
            _xifexpression = (_module_1 + "/");
          } else {
            _xifexpression = "";
          }
          String _type = nodeType.getType();
          final String resourceId = (_xifexpression + _type);
          final InterfaceDefinitionData candidatesInterfaces = SodaliteBackendProxy.getKBReasoner().getTypeInterfaces(resourceId);
          List<InterfaceDefinition> _elements = candidatesInterfaces.getElements();
          for (final InterfaceDefinition candidateInterface : _elements) {
            boolean _equals = interface_.equals(RMHelper.getLastSegment(candidateInterface.getUri().toString(), "/"));
            if (_equals) {
              List<OperationData> _operations_in_interface = candidateInterface.getOperations_in_interface();
              for (final OperationData candidateOperation : _operations_in_interface) {
                {
                  final String operation_label = candidateOperation.getOperation_name();
                  final String proposalText = operation_label;
                  final StyledString displayText = new StyledString(operation_label);
                  this.createNonEditableCompletionProposal(proposalText, displayText, context, "One of the operations belonging to the selected node type.", acceptor);
                }
              }
            }
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void completeENotifiedHandler_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EHandlerImpl> candidates = EcoreUtil2.<EHandlerImpl>getAllContentsOfType(rootPlay, EHandlerImpl.class);
      for (final EHandlerImpl candidate : candidates) {
        acceptor.accept(this.createCompletionProposal("\"".concat(candidate.getName()).concat("\""), context));
      }
    }
  }
  
  public void completeEHandler_Listen_to(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<ENotifiedTopicImpl> candidatesTopics = EcoreUtil2.<ENotifiedTopicImpl>getAllContentsOfType(rootPlay, ENotifiedTopicImpl.class);
      for (final ENotifiedTopicImpl candidate : candidatesTopics) {
        acceptor.accept(this.createCompletionProposal("\"".concat(candidate.getName()).concat("\""), context));
      }
    }
  }
  
  public void completeEWithLookup_Lookup(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ArrayList<String> lookups = new ArrayList<String>();
    lookups.add("list");
    lookups.add("items");
    lookups.add("indexed_items");
    lookups.add("flattened");
    lookups.add("together");
    lookups.add("dict");
    lookups.add("sequence");
    lookups.add("subelements");
    lookups.add("nested");
    lookups.add("cartesian");
    lookups.add("random_choice");
    for (final String lookup : lookups) {
      acceptor.accept(this.createCompletionProposal(lookup, context));
    }
  }
  
  public void completeECollectionFQN_NamespaceOrFqn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    FindIterable<Document> iterDoc = mongo_collection.find().projection(Projections.include("namespace"));
    Iterator<Document> it = iterDoc.iterator();
    String namespace = null;
    while (it.hasNext()) {
      {
        namespace = it.next().getString("namespace");
        String _concat = namespace.concat(" - Namespace ");
        StyledString _styledString = new StyledString(_concat);
        this.createNonEditableCompletionProposal(namespace, _styledString, context, "Collection Namespace as it is depicted in Ansible Galaxy", acceptor);
      }
    }
  }
  
  public void completeECollectionFQN_CollectionName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    final ECollectionFQNImpl ansible_collection = EcoreUtil2.<ECollectionFQNImpl>getContainerOfType(model, ECollectionFQNImpl.class);
    String namespace = "";
    if ((ansible_collection != null)) {
      int _size = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(ansible_collection.getNamespaceOrFqn(), EJinjaOrStringWithoutQuotes.class).size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        String _stringWithoutQuotes = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(ansible_collection.getNamespaceOrFqn(), EJinjaOrStringWithoutQuotes.class).get(0).getStringWithoutQuotes();
        boolean _tripleNotEquals = (_stringWithoutQuotes != null);
        if (_tripleNotEquals) {
          namespace = EcoreUtil2.<EJinjaOrStringWithoutQuotesImpl>getAllContentsOfType(ansible_collection.getNamespaceOrFqn(), EJinjaOrStringWithoutQuotesImpl.class).get(0).getStringWithoutQuotes();
        }
        int _size_1 = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(ansible_collection.getNamespaceOrFqn(), EVariableDeclarationVariableReference.class).size();
        boolean _greaterThan_1 = (_size_1 > 0);
        if (_greaterThan_1) {
          final EVariableDeclaration variable_reference = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(ansible_collection.getNamespaceOrFqn(), EVariableDeclarationVariableReference.class).get(0).getVariable_declaration_variable_reference();
          namespace = EcoreUtil2.<EJinjaOrString>getAllContentsOfType(variable_reference, EJinjaOrString.class).get(0).getString();
        }
      }
    }
    FindIterable<Document> iterDoc = mongo_collection.find(Filters.<String>eq("namespace", namespace)).projection(Projections.include("collection_name"));
    Iterator<Document> it = iterDoc.iterator();
    String collectionName = null;
    while (it.hasNext()) {
      {
        collectionName = it.next().getString("collection_name");
        String _concat = collectionName.concat(" - Collection Name ");
        StyledString _styledString = new StyledString(_concat);
        this.createNonEditableCompletionProposal(collectionName, _styledString, context, "Collection Name as it is depicted in Ansible Galaxy", acceptor);
      }
    }
  }
  
  public void completeEModuleCall_FirstPart(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    List<String> collections = new ArrayList<String>();
    EBlock _containerOfType = EcoreUtil2.<EBlock>getContainerOfType(model, EBlock.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      EBlock block = EcoreUtil2.<EBlock>getContainerOfType(model, EBlock.class);
      ECollectionListPassed _collections = block.getCollections();
      boolean _tripleNotEquals_1 = (_collections != null);
      if (_tripleNotEquals_1) {
        int _size = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(block.getCollections(), ECollectionFQN.class).size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          final List<ECollectionFQN> collectionsList = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(block.getCollections(), ECollectionFQN.class);
          collections.addAll(AnsibleHelper.findAnsibleCollections(collectionsList));
        }
      }
    }
    EPlay _containerOfType_1 = EcoreUtil2.<EPlay>getContainerOfType(model, EPlay.class);
    boolean _tripleNotEquals_2 = (_containerOfType_1 != null);
    if (_tripleNotEquals_2) {
      EPlay play = EcoreUtil2.<EPlay>getContainerOfType(model, EPlay.class);
      ECollectionListPassed _collections_1 = play.getCollections();
      boolean _tripleNotEquals_3 = (_collections_1 != null);
      if (_tripleNotEquals_3) {
        int _size_1 = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(play.getCollections(), ECollectionFQN.class).size();
        boolean _greaterThan_1 = (_size_1 > 0);
        if (_greaterThan_1) {
          final List<ECollectionFQN> collectionsList_1 = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(play.getCollections(), ECollectionFQN.class);
          collections.addAll(AnsibleHelper.findAnsibleCollections(collectionsList_1));
        }
      }
    }
    ETask _containerOfType_2 = EcoreUtil2.<ETask>getContainerOfType(model, ETask.class);
    boolean _tripleNotEquals_4 = (_containerOfType_2 != null);
    if (_tripleNotEquals_4) {
      ETask task = EcoreUtil2.<ETask>getContainerOfType(model, ETask.class);
      ECollectionListPassed _collections_2 = task.getCollections();
      boolean _tripleNotEquals_5 = (_collections_2 != null);
      if (_tripleNotEquals_5) {
        int _size_2 = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(task.getCollections(), ECollectionFQN.class).size();
        boolean _greaterThan_2 = (_size_2 > 0);
        if (_greaterThan_2) {
          final List<ECollectionFQN> collectionsList_2 = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(task.getCollections(), ECollectionFQN.class);
          collections.addAll(AnsibleHelper.findAnsibleCollections(collectionsList_2));
        }
      }
    }
    EHandler _containerOfType_3 = EcoreUtil2.<EHandler>getContainerOfType(model, EHandler.class);
    boolean _tripleNotEquals_6 = (_containerOfType_3 != null);
    if (_tripleNotEquals_6) {
      EHandler handler = EcoreUtil2.<EHandler>getContainerOfType(model, EHandler.class);
      ECollectionListPassed _collections_3 = handler.getCollections();
      boolean _tripleNotEquals_7 = (_collections_3 != null);
      if (_tripleNotEquals_7) {
        int _size_3 = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(handler.getCollections(), ECollectionFQN.class).size();
        boolean _greaterThan_3 = (_size_3 > 0);
        if (_greaterThan_3) {
          final List<ECollectionFQN> collectionsList_3 = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(handler.getCollections(), ECollectionFQN.class);
          collections.addAll(AnsibleHelper.findAnsibleCollections(collectionsList_3));
        }
      }
    }
    collections.add("ansible.builtin");
    for (final String collection : collections) {
      {
        FindIterable<Document> ansible_collection = mongo_collection.find(Filters.<String>eq("_id", collection)).projection(Projections.exclude("namespace", "collection_name", "_id"));
        Iterator<Document> it = ansible_collection.iterator();
        while (it.hasNext()) {
          {
            Set<String> modules = it.next().<Document>get("modules", Document.class).keySet();
            for (final String module : modules) {
              String _concat = module.concat(" - ").concat(collection);
              StyledString _styledString = new StyledString(_concat);
              this.createNonEditableCompletionProposal(module, _styledString, context, "Module of collection ".concat(collection), acceptor);
            }
          }
        }
      }
    }
    FindIterable<Document> iterDoc = mongo_collection.find().projection(Projections.include("namespace"));
    Iterator<Document> it = iterDoc.iterator();
    String namespace = null;
    while (it.hasNext()) {
      {
        namespace = it.next().getString("namespace");
        String _concat = namespace.concat(" - Namespace ");
        StyledString _styledString = new StyledString(_concat);
        this.createNonEditableCompletionProposal(namespace, _styledString, context, "Collection Namespace as it is depicted in Ansible Galaxy", acceptor);
      }
    }
  }
  
  public void completeEModuleCall_SecondPart(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    FindIterable<Document> iterDoc = null;
    String regex = "\\w+\\.\\w+";
    final EModuleCall module = EcoreUtil2.<EModuleCall>getContainerOfType(model, EModuleCall.class);
    String namespace = "";
    if ((module != null)) {
      int _size = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(module.getFirstPart(), EJinjaOrStringWithoutQuotes.class).size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        String _stringWithoutQuotes = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(module.getFirstPart(), EJinjaOrStringWithoutQuotes.class).get(0).getStringWithoutQuotes();
        boolean _tripleNotEquals = (_stringWithoutQuotes != null);
        if (_tripleNotEquals) {
          namespace = EcoreUtil2.<EJinjaOrStringWithoutQuotesImpl>getAllContentsOfType(module.getFirstPart(), EJinjaOrStringWithoutQuotesImpl.class).get(0).getStringWithoutQuotes();
        }
        int _size_1 = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(module.getFirstPart(), EVariableDeclarationVariableReference.class).size();
        boolean _greaterThan_1 = (_size_1 > 0);
        if (_greaterThan_1) {
          final EVariableDeclaration variable_reference = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(module.getFirstPart(), EVariableDeclarationVariableReference.class).get(0).getVariable_declaration_variable_reference();
          namespace = EcoreUtil2.<EJinjaOrString>getAllContentsOfType(variable_reference, EJinjaOrString.class).get(0).getString();
        }
      }
    }
    boolean _matches = namespace.matches(regex);
    if (_matches) {
      iterDoc = mongo_collection.find(Filters.<String>eq("_id", namespace));
      Iterator<Document> it = iterDoc.iterator();
      Set<String> modules = null;
      while (it.hasNext()) {
        {
          modules = it.next().<Document>get("modules", Document.class).keySet();
          for (final String moduleName : modules) {
            String _concat = moduleName.concat(" - ").concat(namespace.concat(".").concat(moduleName));
            StyledString _styledString = new StyledString(_concat);
            this.createNonEditableCompletionProposal(moduleName, _styledString, context, "Module of collection ".concat(namespace.concat(".").concat(moduleName)), acceptor);
          }
        }
      }
    } else {
      iterDoc = mongo_collection.find(Filters.<String>eq("namespace", namespace)).projection(Projections.include("collection_name"));
      Iterator<Document> it_1 = iterDoc.iterator();
      String collectionName = null;
      while (it_1.hasNext()) {
        {
          collectionName = it_1.next().getString("collection_name");
          String _concat = collectionName.concat(" - Collection Name ");
          StyledString _styledString = new StyledString(_concat);
          this.createNonEditableCompletionProposal(collectionName, _styledString, context, "Collection Name as it is depicted in Ansible Galaxy", acceptor);
        }
      }
    }
  }
  
  public void completeEModuleCall_ThirdPart(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    String namespace = "";
    String collectionName = "";
    final EModuleCall ansible_module = EcoreUtil2.<EModuleCall>getContainerOfType(model, EModuleCall.class);
    if ((ansible_module != null)) {
      int _size = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(ansible_module.getFirstPart(), EJinjaOrStringWithoutQuotes.class).size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        String _stringWithoutQuotes = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(ansible_module.getFirstPart(), EJinjaOrStringWithoutQuotes.class).get(0).getStringWithoutQuotes();
        boolean _tripleNotEquals = (_stringWithoutQuotes != null);
        if (_tripleNotEquals) {
          namespace = EcoreUtil2.<EJinjaOrStringWithoutQuotesImpl>getAllContentsOfType(ansible_module.getFirstPart(), EJinjaOrStringWithoutQuotesImpl.class).get(0).getStringWithoutQuotes();
        }
        int _size_1 = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(ansible_module.getFirstPart(), EVariableDeclarationVariableReference.class).size();
        boolean _greaterThan_1 = (_size_1 > 0);
        if (_greaterThan_1) {
          final EVariableDeclaration variable_reference = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(ansible_module.getFirstPart(), EVariableDeclarationVariableReference.class).get(0).getVariable_declaration_variable_reference();
          namespace = EcoreUtil2.<EJinjaOrString>getAllContentsOfType(variable_reference, EJinjaOrString.class).get(0).getString();
        }
      }
      int _size_2 = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(ansible_module.getSecondPart(), EJinjaOrStringWithoutQuotes.class).size();
      boolean _greaterThan_2 = (_size_2 > 0);
      if (_greaterThan_2) {
        String _stringWithoutQuotes_1 = EcoreUtil2.<EJinjaOrStringWithoutQuotes>getAllContentsOfType(ansible_module.getSecondPart(), EJinjaOrStringWithoutQuotes.class).get(0).getStringWithoutQuotes();
        boolean _tripleNotEquals_1 = (_stringWithoutQuotes_1 != null);
        if (_tripleNotEquals_1) {
          collectionName = EcoreUtil2.<EJinjaOrStringWithoutQuotesImpl>getAllContentsOfType(ansible_module.getSecondPart(), EJinjaOrStringWithoutQuotesImpl.class).get(0).getStringWithoutQuotes();
        }
        int _size_3 = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(ansible_module.getSecondPart(), EVariableDeclarationVariableReference.class).size();
        boolean _greaterThan_3 = (_size_3 > 0);
        if (_greaterThan_3) {
          final EVariableDeclaration variable_reference_1 = EcoreUtil2.<EVariableDeclarationVariableReference>getAllContentsOfType(ansible_module.getSecondPart(), EVariableDeclarationVariableReference.class).get(0).getVariable_declaration_variable_reference();
          collectionName = EcoreUtil2.<EJinjaOrString>getAllContentsOfType(variable_reference_1, EJinjaOrString.class).get(0).getString();
        }
      }
    }
    String fqn = namespace.concat(".").concat(collectionName);
    FindIterable<Document> ansible_collection = mongo_collection.find(Filters.<String>eq("_id", fqn)).projection(Projections.exclude("namespace", "collection_name", "_id"));
    Iterator<Document> it = ansible_collection.iterator();
    while (it.hasNext()) {
      {
        Set<String> modules = it.next().<Document>get("modules", Document.class).keySet();
        for (final String module : modules) {
          String _concat = module.concat(" - ").concat(fqn);
          StyledString _styledString = new StyledString(_concat);
          this.createNonEditableCompletionProposal(module, _styledString, context, "Module of collection ".concat(fqn), acceptor);
        }
      }
    }
  }
  
  public void completeESpecialVariable_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ArrayList<String> specialVariables = new ArrayList<String>();
    specialVariables.add("item");
    specialVariables.add("ansible_check_mode");
    specialVariables.add("ansible_config_file");
    specialVariables.add("ansible_dependent_role_names");
    specialVariables.add("ansible_diff_mode");
    specialVariables.add("ansible_forks");
    specialVariables.add("ansible_inventory_sources");
    specialVariables.add("ansible_limit");
    specialVariables.add("ansible_loop");
    specialVariables.add("ansible_loop_var");
    specialVariables.add("ansible_index_var");
    specialVariables.add("ansible_parent_role_names");
    specialVariables.add("ansible_parent_role_paths");
    specialVariables.add("ansible_play_batch");
    specialVariables.add("ansible_play_hosts");
    specialVariables.add("ansible_play_hosts_all");
    specialVariables.add("ansible_play_roles_names");
    specialVariables.add("ansible_playbook_python");
    specialVariables.add("ansible_role_names");
    specialVariables.add("ansible_role_name");
    specialVariables.add("ansible_collection_name");
    specialVariables.add("ansible_run_tags");
    specialVariables.add("ansible_search_path");
    specialVariables.add("ansible_skip_tags");
    specialVariables.add("ansible_verbosity");
    specialVariables.add("ansible_version");
    specialVariables.add("group_names");
    specialVariables.add("groups");
    specialVariables.add("hostvars");
    specialVariables.add("inventory_hostname");
    specialVariables.add("inventory_hostname_short");
    specialVariables.add("inventory_dir");
    specialVariables.add("inventory_file");
    specialVariables.add("omit");
    specialVariables.add("play_hosts");
    specialVariables.add("ansible_play_name");
    specialVariables.add("playbook_dir");
    specialVariables.add("role_name");
    specialVariables.add("role_names");
    specialVariables.add("role_path");
    specialVariables.add("ansible_facts");
    specialVariables.add("ansible_local");
    specialVariables.add("ansible_become_user");
    specialVariables.add("ansible_connection");
    specialVariables.add("ansible_host");
    specialVariables.add("ansible_python_interpreter");
    specialVariables.add("ansible_user");
    for (final String specialVariable : specialVariables) {
      acceptor.accept(this.createCompletionProposal(specialVariable, context));
    }
  }
  
  public void completeDeclaredVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EVariableDeclarationImpl> candidates = EcoreUtil2.<EVariableDeclarationImpl>getAllContentsOfType(rootPlay, EVariableDeclarationImpl.class);
      for (final EVariableDeclarationImpl candidate : candidates) {
        if (needsPrefix) {
          this.createNonEditableCompletionProposal("declared_variable: ".concat(candidate.getName()), new StyledString("declared_variable: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable declared in this play.", acceptor);
        } else {
          String _name = candidate.getName();
          String _name_1 = candidate.getName();
          StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
          this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable declared in this play.", acceptor);
        }
      }
    }
  }
  
  public void completeRegisteredVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<ERegisterVariableImpl> candidates = EcoreUtil2.<ERegisterVariableImpl>getAllContentsOfType(rootPlay, ERegisterVariableImpl.class);
      for (final ERegisterVariableImpl candidate : candidates) {
        if (needsPrefix) {
          this.createNonEditableCompletionProposal("registered_variable: ".concat(candidate.getName()), new StyledString("registered_variable: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable registered in this play.", acceptor);
        } else {
          String _name = candidate.getName();
          String _name_1 = candidate.getName();
          StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
          this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable registered in this play.", acceptor);
        }
      }
    }
  }
  
  public void completeIndexOrLoopVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EIndexOrLoopVariableImpl> candidatesIndexOrLoopVariables = EcoreUtil2.<EIndexOrLoopVariableImpl>getAllContentsOfType(rootPlay, EIndexOrLoopVariableImpl.class);
      for (final EIndexOrLoopVariableImpl candidate : candidatesIndexOrLoopVariables) {
        if (needsPrefix) {
          this.createNonEditableCompletionProposal("index_or_loop_var: ".concat(candidate.getName()), new StyledString("index_or_loop_var: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable defined with the \'index_var\' or \'loop_var\' keyword.", acceptor);
        } else {
          String _name = candidate.getName();
          String _name_1 = candidate.getName();
          StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
          this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable defined with the \'index_var\' or \'loop_var\' keyword.", acceptor);
        }
      }
    }
  }
  
  public void completeSetFactVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    final EPlaybookImpl rootPlaybook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
    final List<EParameterImpl> candidatesSetFactsVariables = EcoreUtil2.<EParameterImpl>getAllContentsOfType(rootPlaybook, EParameterImpl.class);
    ArrayList<EParameter> legitCandidatesSetFactsVariables = new ArrayList<EParameter>();
    for (final EParameterImpl parameter : candidatesSetFactsVariables) {
      {
        final EModuleCallImpl moduleCall = EcoreUtil2.<EModuleCallImpl>getContainerOfType(parameter, EModuleCallImpl.class);
        if ((moduleCall != null)) {
          EStringWithoutQuotesPassed _firstPart = moduleCall.getFirstPart();
          boolean _equals = Objects.equal(_firstPart, "set_fact");
          if (_equals) {
            legitCandidatesSetFactsVariables.add(parameter);
          }
        }
      }
    }
    for (final EParameter candidate : legitCandidatesSetFactsVariables) {
      if (needsPrefix) {
        this.createNonEditableCompletionProposal("fact_set: ".concat(candidate.getName()), new StyledString("fact_set: ").append(candidate.getName(), StyledString.COUNTER_STYLER), context, "A variable set with the \'set_fact\' module in this playbook.", acceptor);
      } else {
        String _name = candidate.getName();
        String _name_1 = candidate.getName();
        StyledString _styledString = new StyledString(_name_1, StyledString.COUNTER_STYLER);
        this.createNonEditableCompletionProposal(_name, _styledString, context, "A variable set with the \'set_fact\' module in this playbook.", acceptor);
      }
    }
  }
  
  public void completeInputInterfaceVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    try {
      final EPlaybookImpl rootPlaybook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
      if ((rootPlaybook != null)) {
        final EUsedByBody usedByBody = rootPlaybook.getUsed_by();
        if ((usedByBody != null)) {
          Node _node = usedByBody.getNode();
          if ((_node instanceof LocalNodeImpl)) {
            Node _node_1 = usedByBody.getNode();
            final EInterfaceDefinition interface_ = ((LocalNodeImpl) _node_1).getInterface();
            if ((interface_ != null)) {
              EProperties _inputs = interface_.getInterface().getInputs();
              boolean _tripleNotEquals = (_inputs != null);
              if (_tripleNotEquals) {
                final EProperties inputsProperties = interface_.getInterface().getInputs();
                EList<EPropertyDefinition> _properties = inputsProperties.getProperties();
                for (final EPropertyDefinition input : _properties) {
                  if (needsPrefix) {
                    String _concat = "interface_input: ".concat("\"").concat(input.getName()).concat("\"");
                    StyledString _append = new StyledString("interface_input: ").append("\"".concat(input.getName()).concat("\""), StyledString.COUNTER_STYLER).append(" - RM input");
                    String _name = interface_.getName();
                    String _plus = ("An input variable from the \'" + _name);
                    String _plus_1 = (_plus + "\' interface.");
                    this.createNonEditableCompletionProposal(_concat, _append, context, _plus_1, acceptor);
                  } else {
                    String _concat_1 = "\"".concat(input.getName()).concat("\"");
                    String _concat_2 = "\"".concat(input.getName()).concat("\"");
                    StyledString _append_1 = new StyledString(_concat_2, StyledString.COUNTER_STYLER).append(" - RM input");
                    String _name_1 = interface_.getName();
                    String _plus_2 = ("An input variable from the \'" + _name_1);
                    String _plus_3 = (_plus_2 + "\' interface.");
                    this.createNonEditableCompletionProposal(_concat_1, _append_1, context, _plus_3, acceptor);
                  }
                }
              }
            }
          } else {
            Node _node_2 = usedByBody.getNode();
            if ((_node_2 instanceof KBNodeImpl)) {
              Node _node_3 = usedByBody.getNode();
              final EPREFIX_TYPE nodeType = ((KBNodeImpl) _node_3).getNode_type();
              Node _node_4 = usedByBody.getNode();
              final String nodeInterface = ((KBNodeImpl) _node_4).getInterface();
              String _xifexpression = null;
              String _module = nodeType.getModule();
              boolean _tripleNotEquals_1 = (_module != null);
              if (_tripleNotEquals_1) {
                String _module_1 = nodeType.getModule();
                _xifexpression = (_module_1 + "/");
              } else {
                _xifexpression = "";
              }
              String _type = nodeType.getType();
              final String resourceId = (_xifexpression + _type);
              final InterfaceDefinitionData candidatesInterfaces = SodaliteBackendProxy.getKBReasoner().getTypeInterfaces(resourceId);
              List<InterfaceDefinition> _elements = candidatesInterfaces.getElements();
              for (final InterfaceDefinition candidateInterface : _elements) {
                boolean _equals = nodeInterface.equals(RMHelper.getLastSegment(candidateInterface.getUri().toString(), "/"));
                if (_equals) {
                  HashMap<String, String> _inputs_1 = candidateInterface.getInputs();
                  boolean _tripleNotEquals_2 = (_inputs_1 != null);
                  if (_tripleNotEquals_2) {
                    final HashMap<String, String> inputs = candidateInterface.getInputs();
                    Set<String> _keySet = inputs.keySet();
                    for (final String input_1 : _keySet) {
                      if (needsPrefix) {
                        this.createNonEditableCompletionProposal("interface_input: ".concat(input_1), new StyledString("interface_input: ").append(input_1, StyledString.COUNTER_STYLER).append(" - RM input"), context, (("An input variable from the \'" + nodeInterface) + "\' interface."), acceptor);
                      } else {
                        this.createNonEditableCompletionProposal(input_1, new StyledString(input_1, StyledString.COUNTER_STYLER).append(" - RM input"), context, (("An input variable from the \'" + nodeInterface) + "\' interface."), acceptor);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void completeInputOperationVariableReference(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final boolean needsPrefix) {
    try {
      final EPlaybookImpl rootPlaybook = EcoreUtil2.<EPlaybookImpl>getContainerOfType(model, EPlaybookImpl.class);
      if ((rootPlaybook != null)) {
        final EUsedByBody usedByBody = rootPlaybook.getUsed_by();
        if ((usedByBody != null)) {
          Node _node = usedByBody.getNode();
          if ((_node instanceof LocalNodeImpl)) {
            Node _node_1 = usedByBody.getNode();
            final EOperationDefinition operation = ((LocalNodeImpl) _node_1).getOperation();
            if ((operation != null)) {
              final List<EParameterDefinitionImpl> candidatesInputVariableOperation = EcoreUtil2.<EParameterDefinitionImpl>getAllContentsOfType(operation, EParameterDefinitionImpl.class);
              for (final EParameterDefinitionImpl candidate : candidatesInputVariableOperation) {
                if (needsPrefix) {
                  String _concat = "operation_input: ".concat("\"").concat(candidate.getName()).concat("\"");
                  StyledString _append = new StyledString("operation_input: ").append("\"".concat(candidate.getName()).concat("\""), StyledString.COUNTER_STYLER).append(" - RM input");
                  String _name = operation.getName();
                  String _plus = ("An input variable from the \'" + _name);
                  String _plus_1 = (_plus + "\' operation.");
                  this.createNonEditableCompletionProposal(_concat, _append, context, _plus_1, acceptor);
                } else {
                  String _concat_1 = "\"".concat(candidate.getName()).concat("\"");
                  String _concat_2 = "\"".concat(candidate.getName()).concat("\"");
                  StyledString _append_1 = new StyledString(_concat_2, StyledString.COUNTER_STYLER).append(" - RM input");
                  String _name_1 = operation.getName();
                  String _plus_2 = ("An input variable from the \'" + _name_1);
                  String _plus_3 = (_plus_2 + "\' operation.");
                  this.createNonEditableCompletionProposal(_concat_1, _append_1, context, _plus_3, acceptor);
                }
              }
            }
          } else {
            Node _node_2 = usedByBody.getNode();
            if ((_node_2 instanceof KBNodeImpl)) {
              Node _node_3 = usedByBody.getNode();
              final EPREFIX_TYPE nodeType = ((KBNodeImpl) _node_3).getNode_type();
              Node _node_4 = usedByBody.getNode();
              final String nodeInterface = ((KBNodeImpl) _node_4).getInterface();
              Node _node_5 = usedByBody.getNode();
              final String nodeOperation = ((KBNodeImpl) _node_5).getOperation();
              String _xifexpression = null;
              String _module = nodeType.getModule();
              boolean _tripleNotEquals = (_module != null);
              if (_tripleNotEquals) {
                String _module_1 = nodeType.getModule();
                _xifexpression = (_module_1 + "/");
              } else {
                _xifexpression = "";
              }
              String _type = nodeType.getType();
              final String resourceId = (_xifexpression + _type);
              final InterfaceDefinitionData candidatesInterfaces = SodaliteBackendProxy.getKBReasoner().getTypeInterfaces(resourceId);
              List<InterfaceDefinition> _elements = candidatesInterfaces.getElements();
              for (final InterfaceDefinition candidateInterface : _elements) {
                boolean _equals = nodeInterface.equals(RMHelper.getLastSegment(candidateInterface.getUri().toString(), "/"));
                if (_equals) {
                  List<OperationData> _operations_in_interface = candidateInterface.getOperations_in_interface();
                  for (final OperationData candidateOperation : _operations_in_interface) {
                    boolean _equals_1 = nodeOperation.equals(candidateOperation.getOperation_name());
                    if (_equals_1) {
                      HashMap<String, String> _inputs = candidateOperation.getInputs();
                      boolean _tripleNotEquals_1 = (_inputs != null);
                      if (_tripleNotEquals_1) {
                        final HashMap<String, String> inputs = candidateOperation.getInputs();
                        Set<String> _keySet = inputs.keySet();
                        for (final String input : _keySet) {
                          if (needsPrefix) {
                            this.createNonEditableCompletionProposal("operation_input: ".concat(input), new StyledString("operation_input: ").append(input, StyledString.COUNTER_STYLER).append(" - RM input"), context, (("An input variable from the \'" + nodeOperation) + "\' operation."), acceptor);
                          } else {
                            this.createNonEditableCompletionProposal(input, new StyledString(input, StyledString.COUNTER_STYLER).append(" - RM input"), context, (("An input variable from the \'" + nodeOperation) + "\' operation."), acceptor);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void completeERoleName_FirstPart(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> collectionRoles_mongo = AnsibleHelper.getAnsibleCollections();
    List<String> collections = new ArrayList<String>();
    EPlay _containerOfType = EcoreUtil2.<EPlay>getContainerOfType(model, EPlay.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      EPlay play = EcoreUtil2.<EPlay>getContainerOfType(model, EPlay.class);
      ECollectionListPassed _collections = play.getCollections();
      boolean _tripleNotEquals_1 = (_collections != null);
      if (_tripleNotEquals_1) {
        int _size = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(play.getCollections(), ECollectionFQN.class).size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          final List<ECollectionFQN> collectionsList = EcoreUtil2.<ECollectionFQN>getAllContentsOfType(play.getCollections(), ECollectionFQN.class);
          collections.addAll(AnsibleHelper.findAnsibleCollections(collectionsList));
        }
      }
    }
    for (final String collection : collections) {
      {
        FindIterable<Document> ansible_collection = collectionRoles_mongo.find(Filters.<String>eq("_id", collection)).projection(Projections.exclude("namespace", "collection_name", "_id"));
        Iterator<Document> it = ansible_collection.iterator();
        while (it.hasNext()) {
          {
            List<String> roles = it.next().<ArrayList>get("roles", ArrayList.class);
            for (final String role : roles) {
              String _concat = role.concat(" - ").concat(collection);
              StyledString _styledString = new StyledString(_concat);
              this.createNonEditableCompletionProposal(role, _styledString, context, "Role of collection ".concat(collection), acceptor);
            }
          }
        }
      }
    }
    MongoCollection<Document> standaloneRoles_mongo = AnsibleHelper.getAnsibleRoles();
    FindIterable<Document> iterDoc = standaloneRoles_mongo.find().projection(Projections.include("role_namespace"));
    Iterator<Document> it = iterDoc.iterator();
    String role_namespace = null;
    while (it.hasNext()) {
      {
        role_namespace = it.next().getString("role_namespace");
        String _concat = role_namespace.concat(" - Namespace ");
        StyledString _styledString = new StyledString(_concat);
        this.createNonEditableCompletionProposal(role_namespace, _styledString, context, "Role Namespace as it is depicted in Ansible Galaxy", acceptor);
      }
    }
  }
  
  public void completeERoleName_SecondPart(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> collectionRoles_mongo = AnsibleHelper.getAnsibleCollections();
    MongoCollection<Document> standaloneRoles_mongo = AnsibleHelper.getAnsibleRoles();
    String regex = "\\w+\\.\\w+";
    final ERoleName roleName = EcoreUtil2.<ERoleName>getContainerOfType(model, ERoleName.class);
    String namespace = "";
    if ((roleName != null)) {
      namespace = AnsibleHelper.getENumberOrStringWithoutQuotesValue(roleName.getFirstPart());
      FindIterable<Document> iterDoc = null;
      boolean _matches = namespace.matches(regex);
      if (_matches) {
        iterDoc = collectionRoles_mongo.find(Filters.<String>eq("_id", namespace));
        Iterator<Document> it = iterDoc.iterator();
        List<String> roles = null;
        while (it.hasNext()) {
          {
            roles = it.next().<ArrayList>get("roles", ArrayList.class);
            for (final String role : roles) {
              String _concat = role.concat(" - ").concat(namespace.concat(".").concat(role));
              StyledString _styledString = new StyledString(_concat);
              this.createNonEditableCompletionProposal(role, _styledString, context, "Role of collection ".concat(namespace), acceptor);
            }
          }
        }
      } else {
        iterDoc = collectionRoles_mongo.find(Filters.<String>eq("namespace", namespace)).projection(Projections.include("collection_name"));
        Iterator<Document> it_1 = iterDoc.iterator();
        String collectionName = null;
        while (it_1.hasNext()) {
          {
            collectionName = it_1.next().getString("collection_name");
            String _concat = collectionName.concat(" - Collection Name ");
            StyledString _styledString = new StyledString(_concat);
            this.createNonEditableCompletionProposal(collectionName, _styledString, context, "Collection Name as it is depicted in Ansible Galaxy", acceptor);
          }
        }
        iterDoc = standaloneRoles_mongo.find(Filters.<String>eq("role_namespace", namespace)).projection(Projections.include("role_name"));
        Iterator<Document> it_2 = iterDoc.iterator();
        String role_name = null;
        while (it_2.hasNext()) {
          {
            role_name = it_2.next().getString("role_name");
            String _concat = role_name.concat(" - Role Name ");
            StyledString _styledString = new StyledString(_concat);
            this.createNonEditableCompletionProposal(role_name, _styledString, context, "Role Name as it is depicted in Ansible Galaxy", acceptor);
          }
        }
      }
    }
  }
  
  public void completeERoleName_ThirdPart(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    MongoCollection<Document> mongo_collection = AnsibleHelper.getAnsibleCollections();
    String namespace = "";
    String collectionName = "";
    final ERoleName roleName = EcoreUtil2.<ERoleName>getContainerOfType(model, ERoleName.class);
    if ((roleName != null)) {
      namespace = AnsibleHelper.getEJinjaOrStringWithoutQuotesValue(roleName.getFirstPart());
      collectionName = AnsibleHelper.getEJinjaOrStringWithoutQuotesValue(roleName.getSecondPart());
    }
    String fqn = namespace.concat(".").concat(collectionName);
    FindIterable<Document> ansible_collection = mongo_collection.find(Filters.<String>eq("_id", fqn)).projection(Projections.exclude("namespace", "collection_name", "_id"));
    Iterator<Document> it = ansible_collection.iterator();
    while (it.hasNext()) {
      {
        List<String> roles = it.next().<ArrayList>get("roles", ArrayList.class);
        for (final String role : roles) {
          String _concat = role.concat(" - ").concat(fqn);
          StyledString _styledString = new StyledString(_concat);
          this.createNonEditableCompletionProposal(role, _styledString, context, "Role of collection ".concat(fqn), acceptor);
        }
      }
    }
  }
  
  public void createNonEditableCompletionProposal(final String proposalText, final StyledString displayText, final ContentAssistContext context, final String additionalProposalInfo, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal proposal = null;
    if ((context.getPrefix().startsWith("\"") && proposalText.endsWith("\""))) {
      int _length = proposalText.length();
      int _minus = (_length - 1);
      proposal = this.createCompletionProposal(proposalText.substring(0, _minus), displayText, null, context);
    } else {
      proposal = this.createCompletionProposal(proposalText, displayText, null, context);
    }
    if ((proposal instanceof ConfigurableCompletionProposal)) {
      final ConfigurableCompletionProposal configurable = ((ConfigurableCompletionProposal) proposal);
      configurable.setAdditionalProposalInfo(additionalProposalInfo);
      configurable.setAutoInsertable(false);
    }
    acceptor.accept(proposal);
  }
  
  public void createEditableCompletionProposal(final String proposalText, final String displayText, final ContentAssistContext context, final String additionalProposalInfo, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal proposal = this.createCompletionProposal(proposalText, displayText, null, context);
    if ((proposal instanceof ConfigurableCompletionProposal)) {
      final ConfigurableCompletionProposal configurable = ((ConfigurableCompletionProposal) proposal);
      configurable.setSelectionStart(configurable.getReplacementOffset());
      configurable.setSelectionLength(proposalText.length());
      configurable.setAutoInsertable(false);
      configurable.setSimpleLinkedMode(context.getViewer(), '\t', ' ');
      configurable.setAdditionalProposalInfo(additionalProposalInfo);
    }
    acceptor.accept(proposal);
  }
}
