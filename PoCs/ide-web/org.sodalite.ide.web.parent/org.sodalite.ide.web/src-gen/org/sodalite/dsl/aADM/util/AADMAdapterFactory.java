/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.dsl.aADM.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.sodalite.dsl.aADM.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.sodalite.dsl.aADM.AADMPackage
 * @generated
 */
public class AADMAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AADMPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AADMAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AADMPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AADMSwitch<Adapter> modelSwitch =
    new AADMSwitch<Adapter>()
    {
      @Override
      public Adapter caseAADM_Model(AADM_Model object)
      {
        return createAADM_ModelAdapter();
      }
      @Override
      public Adapter caseEOutputs(EOutputs object)
      {
        return createEOutputsAdapter();
      }
      @Override
      public Adapter caseEPolicies(EPolicies object)
      {
        return createEPoliciesAdapter();
      }
      @Override
      public Adapter caseEPolicyDefinition(EPolicyDefinition object)
      {
        return createEPolicyDefinitionAdapter();
      }
      @Override
      public Adapter caseEPolicyDefinitionBody(EPolicyDefinitionBody object)
      {
        return createEPolicyDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseETriggerDefinitions(ETriggerDefinitions object)
      {
        return createETriggerDefinitionsAdapter();
      }
      @Override
      public Adapter caseETriggerDefinition(ETriggerDefinition object)
      {
        return createETriggerDefinitionAdapter();
      }
      @Override
      public Adapter caseETriggerDefinitionBody(ETriggerDefinitionBody object)
      {
        return createETriggerDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEActivityDefinitions(EActivityDefinitions object)
      {
        return createEActivityDefinitionsAdapter();
      }
      @Override
      public Adapter caseEActivityDefinition(EActivityDefinition object)
      {
        return createEActivityDefinitionAdapter();
      }
      @Override
      public Adapter caseECallOperationActivityDefinition(ECallOperationActivityDefinition object)
      {
        return createECallOperationActivityDefinitionAdapter();
      }
      @Override
      public Adapter caseECallOperationActivityDefinitionBody(ECallOperationActivityDefinitionBody object)
      {
        return createECallOperationActivityDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseETimeInterval(ETimeInterval object)
      {
        return createETimeIntervalAdapter();
      }
      @Override
      public Adapter caseEEvenFilter(EEvenFilter object)
      {
        return createEEvenFilterAdapter();
      }
      @Override
      public Adapter caseEExtendedTriggerCondition(EExtendedTriggerCondition object)
      {
        return createEExtendedTriggerConditionAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinition(EConditionClauseDefinition object)
      {
        return createEConditionClauseDefinitionAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionAND(EConditionClauseDefinitionAND object)
      {
        return createEConditionClauseDefinitionANDAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionOR(EConditionClauseDefinitionOR object)
      {
        return createEConditionClauseDefinitionORAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionNOT(EConditionClauseDefinitionNOT object)
      {
        return createEConditionClauseDefinitionNOTAdapter();
      }
      @Override
      public Adapter caseEConditionClauseDefinitionAssert(EConditionClauseDefinitionAssert object)
      {
        return createEConditionClauseDefinitionAssertAdapter();
      }
      @Override
      public Adapter caseEAssertionDefinition(EAssertionDefinition object)
      {
        return createEAssertionDefinitionAdapter();
      }
      @Override
      public Adapter caseEConstraintList(EConstraintList object)
      {
        return createEConstraintListAdapter();
      }
      @Override
      public Adapter caseEConstraint(EConstraint object)
      {
        return createEConstraintAdapter();
      }
      @Override
      public Adapter caseEMaxLength(EMaxLength object)
      {
        return createEMaxLengthAdapter();
      }
      @Override
      public Adapter caseEMinLength(EMinLength object)
      {
        return createEMinLengthAdapter();
      }
      @Override
      public Adapter caseELength(ELength object)
      {
        return createELengthAdapter();
      }
      @Override
      public Adapter caseEValid_Values(EValid_Values object)
      {
        return createEValid_ValuesAdapter();
      }
      @Override
      public Adapter caseEInRange(EInRange object)
      {
        return createEInRangeAdapter();
      }
      @Override
      public Adapter caseELessOrEqual(ELessOrEqual object)
      {
        return createELessOrEqualAdapter();
      }
      @Override
      public Adapter caseELessThan(ELessThan object)
      {
        return createELessThanAdapter();
      }
      @Override
      public Adapter caseEGreaterOrEqual(EGreaterOrEqual object)
      {
        return createEGreaterOrEqualAdapter();
      }
      @Override
      public Adapter caseEGreaterThan(EGreaterThan object)
      {
        return createEGreaterThanAdapter();
      }
      @Override
      public Adapter caseEEqual(EEqual object)
      {
        return createEEqualAdapter();
      }
      @Override
      public Adapter caseETarget(ETarget object)
      {
        return createETargetAdapter();
      }
      @Override
      public Adapter caseENodeTemplates(ENodeTemplates object)
      {
        return createENodeTemplatesAdapter();
      }
      @Override
      public Adapter caseENodeTemplate(ENodeTemplate object)
      {
        return createENodeTemplateAdapter();
      }
      @Override
      public Adapter caseENodeTemplateBody(ENodeTemplateBody object)
      {
        return createENodeTemplateBodyAdapter();
      }
      @Override
      public Adapter caseECapabilityAssignments(ECapabilityAssignments object)
      {
        return createECapabilityAssignmentsAdapter();
      }
      @Override
      public Adapter caseECapabilityAssignment(ECapabilityAssignment object)
      {
        return createECapabilityAssignmentAdapter();
      }
      @Override
      public Adapter caseERequirementAssignments(ERequirementAssignments object)
      {
        return createERequirementAssignmentsAdapter();
      }
      @Override
      public Adapter caseERequirementAssignment(ERequirementAssignment object)
      {
        return createERequirementAssignmentAdapter();
      }
      @Override
      public Adapter caseEAttributeAssignments(EAttributeAssignments object)
      {
        return createEAttributeAssignmentsAdapter();
      }
      @Override
      public Adapter caseEAttributeAssignment(EAttributeAssignment object)
      {
        return createEAttributeAssignmentAdapter();
      }
      @Override
      public Adapter caseEPropertyAssignments(EPropertyAssignments object)
      {
        return createEPropertyAssignmentsAdapter();
      }
      @Override
      public Adapter caseEPropertyAssignment(EPropertyAssignment object)
      {
        return createEPropertyAssignmentAdapter();
      }
      @Override
      public Adapter caseEAssignmentValue(EAssignmentValue object)
      {
        return createEAssignmentValueAdapter();
      }
      @Override
      public Adapter caseEMAP(EMAP object)
      {
        return createEMAPAdapter();
      }
      @Override
      public Adapter caseEMapEntry(EMapEntry object)
      {
        return createEMapEntryAdapter();
      }
      @Override
      public Adapter caseELIST(ELIST object)
      {
        return createELISTAdapter();
      }
      @Override
      public Adapter caseEAlphaNumericValue(EAlphaNumericValue object)
      {
        return createEAlphaNumericValueAdapter();
      }
      @Override
      public Adapter caseEInputs(EInputs object)
      {
        return createEInputsAdapter();
      }
      @Override
      public Adapter caseEParameterDefinition(EParameterDefinition object)
      {
        return createEParameterDefinitionAdapter();
      }
      @Override
      public Adapter caseEParameterDefinitionBody(EParameterDefinitionBody object)
      {
        return createEParameterDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseEValueExpression(EValueExpression object)
      {
        return createEValueExpressionAdapter();
      }
      @Override
      public Adapter caseEFunction(EFunction object)
      {
        return createEFunctionAdapter();
      }
      @Override
      public Adapter caseGetAttribute(GetAttribute object)
      {
        return createGetAttributeAdapter();
      }
      @Override
      public Adapter caseGetAttributeBody(GetAttributeBody object)
      {
        return createGetAttributeBodyAdapter();
      }
      @Override
      public Adapter caseEEntityReference(EEntityReference object)
      {
        return createEEntityReferenceAdapter();
      }
      @Override
      public Adapter caseEPREFIX_REF(EPREFIX_REF object)
      {
        return createEPREFIX_REFAdapter();
      }
      @Override
      public Adapter caseEPREFIX_ID(EPREFIX_ID object)
      {
        return createEPREFIX_IDAdapter();
      }
      @Override
      public Adapter caseEEntity(EEntity object)
      {
        return createEEntityAdapter();
      }
      @Override
      public Adapter caseGetProperty(GetProperty object)
      {
        return createGetPropertyAdapter();
      }
      @Override
      public Adapter caseGetPropertyBody(GetPropertyBody object)
      {
        return createGetPropertyBodyAdapter();
      }
      @Override
      public Adapter caseGetInput(GetInput object)
      {
        return createGetInputAdapter();
      }
      @Override
      public Adapter caseESingleValue(ESingleValue object)
      {
        return createESingleValueAdapter();
      }
      @Override
      public Adapter caseESTRING(ESTRING object)
      {
        return createESTRINGAdapter();
      }
      @Override
      public Adapter caseEBOOLEAN(EBOOLEAN object)
      {
        return createEBOOLEANAdapter();
      }
      @Override
      public Adapter caseEFLOAT(EFLOAT object)
      {
        return createEFLOATAdapter();
      }
      @Override
      public Adapter caseESIGNEDINT(ESIGNEDINT object)
      {
        return createESIGNEDINTAdapter();
      }
      @Override
      public Adapter caseEDataTypeName(EDataTypeName object)
      {
        return createEDataTypeNameAdapter();
      }
      @Override
      public Adapter caseEPREFIX_TYPE(EPREFIX_TYPE object)
      {
        return createEPREFIX_TYPEAdapter();
      }
      @Override
      public Adapter caseEPRIMITIVE_TYPE(EPRIMITIVE_TYPE object)
      {
        return createEPRIMITIVE_TYPEAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.AADM_Model <em>AADM Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.AADM_Model
   * @generated
   */
  public Adapter createAADM_ModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EOutputs <em>EOutputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EOutputs
   * @generated
   */
  public Adapter createEOutputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPolicies <em>EPolicies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPolicies
   * @generated
   */
  public Adapter createEPoliciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPolicyDefinition <em>EPolicy Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPolicyDefinition
   * @generated
   */
  public Adapter createEPolicyDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPolicyDefinitionBody <em>EPolicy Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPolicyDefinitionBody
   * @generated
   */
  public Adapter createEPolicyDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ETriggerDefinitions <em>ETrigger Definitions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ETriggerDefinitions
   * @generated
   */
  public Adapter createETriggerDefinitionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ETriggerDefinition <em>ETrigger Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ETriggerDefinition
   * @generated
   */
  public Adapter createETriggerDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ETriggerDefinitionBody <em>ETrigger Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ETriggerDefinitionBody
   * @generated
   */
  public Adapter createETriggerDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EActivityDefinitions <em>EActivity Definitions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EActivityDefinitions
   * @generated
   */
  public Adapter createEActivityDefinitionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EActivityDefinition <em>EActivity Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EActivityDefinition
   * @generated
   */
  public Adapter createEActivityDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ECallOperationActivityDefinition <em>ECall Operation Activity Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ECallOperationActivityDefinition
   * @generated
   */
  public Adapter createECallOperationActivityDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ECallOperationActivityDefinitionBody <em>ECall Operation Activity Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ECallOperationActivityDefinitionBody
   * @generated
   */
  public Adapter createECallOperationActivityDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ETimeInterval <em>ETime Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ETimeInterval
   * @generated
   */
  public Adapter createETimeIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EEvenFilter <em>EEven Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EEvenFilter
   * @generated
   */
  public Adapter createEEvenFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EExtendedTriggerCondition <em>EExtended Trigger Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EExtendedTriggerCondition
   * @generated
   */
  public Adapter createEExtendedTriggerConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConditionClauseDefinition <em>ECondition Clause Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConditionClauseDefinition
   * @generated
   */
  public Adapter createEConditionClauseDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConditionClauseDefinitionAND <em>ECondition Clause Definition AND</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConditionClauseDefinitionAND
   * @generated
   */
  public Adapter createEConditionClauseDefinitionANDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConditionClauseDefinitionOR <em>ECondition Clause Definition OR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConditionClauseDefinitionOR
   * @generated
   */
  public Adapter createEConditionClauseDefinitionORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConditionClauseDefinitionNOT <em>ECondition Clause Definition NOT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConditionClauseDefinitionNOT
   * @generated
   */
  public Adapter createEConditionClauseDefinitionNOTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConditionClauseDefinitionAssert <em>ECondition Clause Definition Assert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConditionClauseDefinitionAssert
   * @generated
   */
  public Adapter createEConditionClauseDefinitionAssertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EAssertionDefinition <em>EAssertion Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EAssertionDefinition
   * @generated
   */
  public Adapter createEAssertionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConstraintList <em>EConstraint List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConstraintList
   * @generated
   */
  public Adapter createEConstraintListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EConstraint <em>EConstraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EConstraint
   * @generated
   */
  public Adapter createEConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EMaxLength <em>EMax Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EMaxLength
   * @generated
   */
  public Adapter createEMaxLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EMinLength <em>EMin Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EMinLength
   * @generated
   */
  public Adapter createEMinLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ELength <em>ELength</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ELength
   * @generated
   */
  public Adapter createELengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EValid_Values <em>EValid Values</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EValid_Values
   * @generated
   */
  public Adapter createEValid_ValuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EInRange <em>EIn Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EInRange
   * @generated
   */
  public Adapter createEInRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ELessOrEqual <em>ELess Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ELessOrEqual
   * @generated
   */
  public Adapter createELessOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ELessThan <em>ELess Than</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ELessThan
   * @generated
   */
  public Adapter createELessThanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EGreaterOrEqual <em>EGreater Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EGreaterOrEqual
   * @generated
   */
  public Adapter createEGreaterOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EGreaterThan <em>EGreater Than</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EGreaterThan
   * @generated
   */
  public Adapter createEGreaterThanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EEqual <em>EEqual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EEqual
   * @generated
   */
  public Adapter createEEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ETarget <em>ETarget</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ETarget
   * @generated
   */
  public Adapter createETargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ENodeTemplates <em>ENode Templates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ENodeTemplates
   * @generated
   */
  public Adapter createENodeTemplatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ENodeTemplate <em>ENode Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ENodeTemplate
   * @generated
   */
  public Adapter createENodeTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ENodeTemplateBody <em>ENode Template Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ENodeTemplateBody
   * @generated
   */
  public Adapter createENodeTemplateBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ECapabilityAssignments <em>ECapability Assignments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ECapabilityAssignments
   * @generated
   */
  public Adapter createECapabilityAssignmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ECapabilityAssignment <em>ECapability Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ECapabilityAssignment
   * @generated
   */
  public Adapter createECapabilityAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ERequirementAssignments <em>ERequirement Assignments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ERequirementAssignments
   * @generated
   */
  public Adapter createERequirementAssignmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ERequirementAssignment <em>ERequirement Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ERequirementAssignment
   * @generated
   */
  public Adapter createERequirementAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EAttributeAssignments <em>EAttribute Assignments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EAttributeAssignments
   * @generated
   */
  public Adapter createEAttributeAssignmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EAttributeAssignment <em>EAttribute Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EAttributeAssignment
   * @generated
   */
  public Adapter createEAttributeAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPropertyAssignments <em>EProperty Assignments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPropertyAssignments
   * @generated
   */
  public Adapter createEPropertyAssignmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPropertyAssignment <em>EProperty Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPropertyAssignment
   * @generated
   */
  public Adapter createEPropertyAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EAssignmentValue <em>EAssignment Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EAssignmentValue
   * @generated
   */
  public Adapter createEAssignmentValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EMAP <em>EMAP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EMAP
   * @generated
   */
  public Adapter createEMAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EMapEntry <em>EMap Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EMapEntry
   * @generated
   */
  public Adapter createEMapEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ELIST <em>ELIST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ELIST
   * @generated
   */
  public Adapter createELISTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EAlphaNumericValue <em>EAlpha Numeric Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EAlphaNumericValue
   * @generated
   */
  public Adapter createEAlphaNumericValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EInputs <em>EInputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EInputs
   * @generated
   */
  public Adapter createEInputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EParameterDefinition <em>EParameter Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EParameterDefinition
   * @generated
   */
  public Adapter createEParameterDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EParameterDefinitionBody <em>EParameter Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EParameterDefinitionBody
   * @generated
   */
  public Adapter createEParameterDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EValueExpression <em>EValue Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EValueExpression
   * @generated
   */
  public Adapter createEValueExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EFunction <em>EFunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EFunction
   * @generated
   */
  public Adapter createEFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.GetAttribute <em>Get Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.GetAttribute
   * @generated
   */
  public Adapter createGetAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.GetAttributeBody <em>Get Attribute Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.GetAttributeBody
   * @generated
   */
  public Adapter createGetAttributeBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EEntityReference <em>EEntity Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EEntityReference
   * @generated
   */
  public Adapter createEEntityReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPREFIX_REF <em>EPREFIX REF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPREFIX_REF
   * @generated
   */
  public Adapter createEPREFIX_REFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPREFIX_ID <em>EPREFIX ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPREFIX_ID
   * @generated
   */
  public Adapter createEPREFIX_IDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EEntity <em>EEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EEntity
   * @generated
   */
  public Adapter createEEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.GetProperty <em>Get Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.GetProperty
   * @generated
   */
  public Adapter createGetPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.GetPropertyBody <em>Get Property Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.GetPropertyBody
   * @generated
   */
  public Adapter createGetPropertyBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.GetInput <em>Get Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.GetInput
   * @generated
   */
  public Adapter createGetInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ESingleValue <em>ESingle Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ESingleValue
   * @generated
   */
  public Adapter createESingleValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ESTRING <em>ESTRING</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ESTRING
   * @generated
   */
  public Adapter createESTRINGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EBOOLEAN <em>EBOOLEAN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EBOOLEAN
   * @generated
   */
  public Adapter createEBOOLEANAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EFLOAT <em>EFLOAT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EFLOAT
   * @generated
   */
  public Adapter createEFLOATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.ESIGNEDINT <em>ESIGNEDINT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.ESIGNEDINT
   * @generated
   */
  public Adapter createESIGNEDINTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EDataTypeName <em>EData Type Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EDataTypeName
   * @generated
   */
  public Adapter createEDataTypeNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPREFIX_TYPE <em>EPREFIX TYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPREFIX_TYPE
   * @generated
   */
  public Adapter createEPREFIX_TYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.sodalite.dsl.aADM.EPRIMITIVE_TYPE <em>EPRIMITIVE TYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.sodalite.dsl.aADM.EPRIMITIVE_TYPE
   * @generated
   */
  public Adapter createEPRIMITIVE_TYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AADMAdapterFactory
