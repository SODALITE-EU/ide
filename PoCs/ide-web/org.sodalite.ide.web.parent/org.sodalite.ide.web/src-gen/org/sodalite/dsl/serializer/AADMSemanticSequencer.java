/*
 * generated by Xtext 2.25.0
 */
package org.sodalite.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.sodalite.dsl.aADM.AADMPackage;
import org.sodalite.dsl.aADM.AADM_Model;
import org.sodalite.dsl.aADM.EActivityDefinitions;
import org.sodalite.dsl.aADM.EAssertionDefinition;
import org.sodalite.dsl.aADM.EAttributeAssignment;
import org.sodalite.dsl.aADM.EAttributeAssignments;
import org.sodalite.dsl.aADM.EBOOLEAN;
import org.sodalite.dsl.aADM.ECallOperationActivityDefinition;
import org.sodalite.dsl.aADM.ECallOperationActivityDefinitionBody;
import org.sodalite.dsl.aADM.ECapabilityAssignment;
import org.sodalite.dsl.aADM.ECapabilityAssignments;
import org.sodalite.dsl.aADM.EConditionClauseDefinitionAND;
import org.sodalite.dsl.aADM.EConditionClauseDefinitionAssert;
import org.sodalite.dsl.aADM.EConditionClauseDefinitionNOT;
import org.sodalite.dsl.aADM.EConditionClauseDefinitionOR;
import org.sodalite.dsl.aADM.EConstraintList;
import org.sodalite.dsl.aADM.EEntity;
import org.sodalite.dsl.aADM.EEqual;
import org.sodalite.dsl.aADM.EEvenFilter;
import org.sodalite.dsl.aADM.EExtendedTriggerCondition;
import org.sodalite.dsl.aADM.EFLOAT;
import org.sodalite.dsl.aADM.EGreaterOrEqual;
import org.sodalite.dsl.aADM.EGreaterThan;
import org.sodalite.dsl.aADM.EInRange;
import org.sodalite.dsl.aADM.EInputs;
import org.sodalite.dsl.aADM.ELIST;
import org.sodalite.dsl.aADM.ELength;
import org.sodalite.dsl.aADM.ELessOrEqual;
import org.sodalite.dsl.aADM.ELessThan;
import org.sodalite.dsl.aADM.EMAP;
import org.sodalite.dsl.aADM.EMapEntry;
import org.sodalite.dsl.aADM.EMaxLength;
import org.sodalite.dsl.aADM.EMinLength;
import org.sodalite.dsl.aADM.ENodeTemplate;
import org.sodalite.dsl.aADM.ENodeTemplateBody;
import org.sodalite.dsl.aADM.ENodeTemplates;
import org.sodalite.dsl.aADM.EOutputs;
import org.sodalite.dsl.aADM.EPREFIX_ID;
import org.sodalite.dsl.aADM.EPREFIX_TYPE;
import org.sodalite.dsl.aADM.EPRIMITIVE_TYPE;
import org.sodalite.dsl.aADM.EParameterDefinition;
import org.sodalite.dsl.aADM.EParameterDefinitionBody;
import org.sodalite.dsl.aADM.EPolicies;
import org.sodalite.dsl.aADM.EPolicyDefinition;
import org.sodalite.dsl.aADM.EPolicyDefinitionBody;
import org.sodalite.dsl.aADM.EPropertyAssignment;
import org.sodalite.dsl.aADM.EPropertyAssignments;
import org.sodalite.dsl.aADM.ERequirementAssignment;
import org.sodalite.dsl.aADM.ERequirementAssignments;
import org.sodalite.dsl.aADM.ESIGNEDINT;
import org.sodalite.dsl.aADM.ESTRING;
import org.sodalite.dsl.aADM.ETarget;
import org.sodalite.dsl.aADM.ETimeInterval;
import org.sodalite.dsl.aADM.ETriggerDefinition;
import org.sodalite.dsl.aADM.ETriggerDefinitionBody;
import org.sodalite.dsl.aADM.ETriggerDefinitions;
import org.sodalite.dsl.aADM.EValid_Values;
import org.sodalite.dsl.aADM.GetAttribute;
import org.sodalite.dsl.aADM.GetAttributeBody;
import org.sodalite.dsl.aADM.GetInput;
import org.sodalite.dsl.aADM.GetProperty;
import org.sodalite.dsl.aADM.GetPropertyBody;
import org.sodalite.dsl.services.AADMGrammarAccess;

@SuppressWarnings("all")
public class AADMSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AADMGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AADMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AADMPackage.AADM_MODEL:
				sequence_AADM_Model(context, (AADM_Model) semanticObject); 
				return; 
			case AADMPackage.EACTIVITY_DEFINITIONS:
				sequence_EActivityDefinitions(context, (EActivityDefinitions) semanticObject); 
				return; 
			case AADMPackage.EASSERTION_DEFINITION:
				sequence_EAssertionDefinition(context, (EAssertionDefinition) semanticObject); 
				return; 
			case AADMPackage.EATTRIBUTE_ASSIGNMENT:
				sequence_EAttributeAssignment(context, (EAttributeAssignment) semanticObject); 
				return; 
			case AADMPackage.EATTRIBUTE_ASSIGNMENTS:
				sequence_EAttributeAssignments(context, (EAttributeAssignments) semanticObject); 
				return; 
			case AADMPackage.EBOOLEAN:
				sequence_EBOOLEAN(context, (EBOOLEAN) semanticObject); 
				return; 
			case AADMPackage.ECALL_OPERATION_ACTIVITY_DEFINITION:
				sequence_ECallOperationActivityDefinition(context, (ECallOperationActivityDefinition) semanticObject); 
				return; 
			case AADMPackage.ECALL_OPERATION_ACTIVITY_DEFINITION_BODY:
				sequence_ECallOperationActivityDefinitionBody(context, (ECallOperationActivityDefinitionBody) semanticObject); 
				return; 
			case AADMPackage.ECAPABILITY_ASSIGNMENT:
				sequence_ECapabilityAssignment(context, (ECapabilityAssignment) semanticObject); 
				return; 
			case AADMPackage.ECAPABILITY_ASSIGNMENTS:
				sequence_ECapabilityAssignments(context, (ECapabilityAssignments) semanticObject); 
				return; 
			case AADMPackage.ECONDITION_CLAUSE_DEFINITION_AND:
				sequence_EConditionClauseDefinitionAND(context, (EConditionClauseDefinitionAND) semanticObject); 
				return; 
			case AADMPackage.ECONDITION_CLAUSE_DEFINITION_ASSERT:
				sequence_EConditionClauseDefinitionAssert(context, (EConditionClauseDefinitionAssert) semanticObject); 
				return; 
			case AADMPackage.ECONDITION_CLAUSE_DEFINITION_NOT:
				sequence_EConditionClauseDefinitionNOT(context, (EConditionClauseDefinitionNOT) semanticObject); 
				return; 
			case AADMPackage.ECONDITION_CLAUSE_DEFINITION_OR:
				sequence_EConditionClauseDefinitionOR(context, (EConditionClauseDefinitionOR) semanticObject); 
				return; 
			case AADMPackage.ECONSTRAINT_LIST:
				sequence_EConstraintList(context, (EConstraintList) semanticObject); 
				return; 
			case AADMPackage.EENTITY:
				sequence_EEntity(context, (EEntity) semanticObject); 
				return; 
			case AADMPackage.EEQUAL:
				sequence_EEqual(context, (EEqual) semanticObject); 
				return; 
			case AADMPackage.EEVEN_FILTER:
				sequence_EEvenFilter(context, (EEvenFilter) semanticObject); 
				return; 
			case AADMPackage.EEXTENDED_TRIGGER_CONDITION:
				sequence_EExtendedTriggerCondition(context, (EExtendedTriggerCondition) semanticObject); 
				return; 
			case AADMPackage.EFLOAT:
				sequence_EFLOAT(context, (EFLOAT) semanticObject); 
				return; 
			case AADMPackage.EGREATER_OR_EQUAL:
				sequence_EGreaterOrEqual(context, (EGreaterOrEqual) semanticObject); 
				return; 
			case AADMPackage.EGREATER_THAN:
				sequence_EGreaterThan(context, (EGreaterThan) semanticObject); 
				return; 
			case AADMPackage.EIN_RANGE:
				sequence_EInRange(context, (EInRange) semanticObject); 
				return; 
			case AADMPackage.EINPUTS:
				sequence_EInputs(context, (EInputs) semanticObject); 
				return; 
			case AADMPackage.ELIST:
				sequence_ELIST(context, (ELIST) semanticObject); 
				return; 
			case AADMPackage.ELENGTH:
				sequence_ELength(context, (ELength) semanticObject); 
				return; 
			case AADMPackage.ELESS_OR_EQUAL:
				sequence_ELessOrEqual(context, (ELessOrEqual) semanticObject); 
				return; 
			case AADMPackage.ELESS_THAN:
				sequence_ELessThan(context, (ELessThan) semanticObject); 
				return; 
			case AADMPackage.EMAP:
				sequence_EMAP(context, (EMAP) semanticObject); 
				return; 
			case AADMPackage.EMAP_ENTRY:
				sequence_EMapEntry(context, (EMapEntry) semanticObject); 
				return; 
			case AADMPackage.EMAX_LENGTH:
				sequence_EMaxLength(context, (EMaxLength) semanticObject); 
				return; 
			case AADMPackage.EMIN_LENGTH:
				sequence_EMinLength(context, (EMinLength) semanticObject); 
				return; 
			case AADMPackage.ENODE_TEMPLATE:
				sequence_ENodeTemplate(context, (ENodeTemplate) semanticObject); 
				return; 
			case AADMPackage.ENODE_TEMPLATE_BODY:
				sequence_ENodeTemplateBody(context, (ENodeTemplateBody) semanticObject); 
				return; 
			case AADMPackage.ENODE_TEMPLATES:
				sequence_ENodeTemplates(context, (ENodeTemplates) semanticObject); 
				return; 
			case AADMPackage.EOUTPUTS:
				sequence_EOutputs(context, (EOutputs) semanticObject); 
				return; 
			case AADMPackage.EPREFIX_ID:
				sequence_EPREFIX_ID(context, (EPREFIX_ID) semanticObject); 
				return; 
			case AADMPackage.EPREFIX_TYPE:
				sequence_EPREFIX_TYPE(context, (EPREFIX_TYPE) semanticObject); 
				return; 
			case AADMPackage.EPRIMITIVE_TYPE:
				sequence_EPRIMITIVE_TYPE(context, (EPRIMITIVE_TYPE) semanticObject); 
				return; 
			case AADMPackage.EPARAMETER_DEFINITION:
				sequence_EParameterDefinition(context, (EParameterDefinition) semanticObject); 
				return; 
			case AADMPackage.EPARAMETER_DEFINITION_BODY:
				sequence_EParameterDefinitionBody(context, (EParameterDefinitionBody) semanticObject); 
				return; 
			case AADMPackage.EPOLICIES:
				sequence_EPolicies(context, (EPolicies) semanticObject); 
				return; 
			case AADMPackage.EPOLICY_DEFINITION:
				sequence_EPolicyDefinition(context, (EPolicyDefinition) semanticObject); 
				return; 
			case AADMPackage.EPOLICY_DEFINITION_BODY:
				sequence_EPolicyDefinitionBody(context, (EPolicyDefinitionBody) semanticObject); 
				return; 
			case AADMPackage.EPROPERTY_ASSIGNMENT:
				sequence_EPropertyAssignment(context, (EPropertyAssignment) semanticObject); 
				return; 
			case AADMPackage.EPROPERTY_ASSIGNMENTS:
				sequence_EPropertyAssignments(context, (EPropertyAssignments) semanticObject); 
				return; 
			case AADMPackage.EREQUIREMENT_ASSIGNMENT:
				sequence_ERequirementAssignment(context, (ERequirementAssignment) semanticObject); 
				return; 
			case AADMPackage.EREQUIREMENT_ASSIGNMENTS:
				sequence_ERequirementAssignments(context, (ERequirementAssignments) semanticObject); 
				return; 
			case AADMPackage.ESIGNEDINT:
				sequence_ESIGNEDINT(context, (ESIGNEDINT) semanticObject); 
				return; 
			case AADMPackage.ESTRING:
				sequence_ESTRING(context, (ESTRING) semanticObject); 
				return; 
			case AADMPackage.ETARGET:
				sequence_ETarget(context, (ETarget) semanticObject); 
				return; 
			case AADMPackage.ETIME_INTERVAL:
				sequence_ETimeInterval(context, (ETimeInterval) semanticObject); 
				return; 
			case AADMPackage.ETRIGGER_DEFINITION:
				sequence_ETriggerDefinition(context, (ETriggerDefinition) semanticObject); 
				return; 
			case AADMPackage.ETRIGGER_DEFINITION_BODY:
				sequence_ETriggerDefinitionBody(context, (ETriggerDefinitionBody) semanticObject); 
				return; 
			case AADMPackage.ETRIGGER_DEFINITIONS:
				sequence_ETriggerDefinitions(context, (ETriggerDefinitions) semanticObject); 
				return; 
			case AADMPackage.EVALID_VALUES:
				sequence_EValid_Values(context, (EValid_Values) semanticObject); 
				return; 
			case AADMPackage.GET_ATTRIBUTE:
				sequence_GetAttribute(context, (GetAttribute) semanticObject); 
				return; 
			case AADMPackage.GET_ATTRIBUTE_BODY:
				sequence_GetAttributeBody(context, (GetAttributeBody) semanticObject); 
				return; 
			case AADMPackage.GET_INPUT:
				sequence_GetInput(context, (GetInput) semanticObject); 
				return; 
			case AADMPackage.GET_PROPERTY:
				sequence_GetProperty(context, (GetProperty) semanticObject); 
				return; 
			case AADMPackage.GET_PROPERTY_BODY:
				sequence_GetPropertyBody(context, (GetPropertyBody) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AADM_Model returns AADM_Model
	 *
	 * Constraint:
	 *     (
	 *         description=STRING | 
	 *         module=ID | 
	 *         imports+=ID | 
	 *         inputs=EInputs | 
	 *         nodeTemplates=ENodeTemplates | 
	 *         policies=EPolicies | 
	 *         outputs=EOutputs
	 *     )+
	 */
	protected void sequence_AADM_Model(ISerializationContext context, AADM_Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EActivityDefinitions returns EActivityDefinitions
	 *
	 * Constraint:
	 *     list+=EActivityDefinition*
	 */
	protected void sequence_EActivityDefinitions(ISerializationContext context, EActivityDefinitions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssertionDefinition returns EAssertionDefinition
	 *
	 * Constraint:
	 *     (attribute_name=ID constraints=EConstraintList)
	 */
	protected void sequence_EAssertionDefinition(ISerializationContext context, EAssertionDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EASSERTION_DEFINITION__ATTRIBUTE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EASSERTION_DEFINITION__ATTRIBUTE_NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EASSERTION_DEFINITION__CONSTRAINTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EASSERTION_DEFINITION__CONSTRAINTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEAssertionDefinitionAccess().getAttribute_nameIDTerminalRuleCall_0_0(), semanticObject.getAttribute_name());
		feeder.accept(grammarAccess.getEAssertionDefinitionAccess().getConstraintsEConstraintListParserRuleCall_3_0(), semanticObject.getConstraints());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAttributeAssignment returns EAttributeAssignment
	 *
	 * Constraint:
	 *     (name=ID value=EAssignmentValue)
	 */
	protected void sequence_EAttributeAssignment(ISerializationContext context, EAttributeAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EATTRIBUTE_ASSIGNMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EATTRIBUTE_ASSIGNMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EATTRIBUTE_ASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EATTRIBUTE_ASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEAttributeAssignmentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEAttributeAssignmentAccess().getValueEAssignmentValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAttributeAssignments returns EAttributeAssignments
	 *
	 * Constraint:
	 *     attributes+=EAttributeAssignment*
	 */
	protected void sequence_EAttributeAssignments(ISerializationContext context, EAttributeAssignments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns EBOOLEAN
	 *     EValueExpression returns EBOOLEAN
	 *     ESingleValue returns EBOOLEAN
	 *     EBOOLEAN returns EBOOLEAN
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_EBOOLEAN(ISerializationContext context, EBOOLEAN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EBOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EBOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEBOOLEANAccess().getValueBOOLEANTerminalRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ECallOperationActivityDefinitionBody returns ECallOperationActivityDefinitionBody
	 *
	 * Constraint:
	 *     (operation=EPREFIX_TYPE | inputs=EPropertyAssignments)+
	 */
	protected void sequence_ECallOperationActivityDefinitionBody(ISerializationContext context, ECallOperationActivityDefinitionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EActivityDefinition returns ECallOperationActivityDefinition
	 *     ECallOperationActivityDefinition returns ECallOperationActivityDefinition
	 *
	 * Constraint:
	 *     operation=ECallOperationActivityDefinitionBody
	 */
	protected void sequence_ECallOperationActivityDefinition(ISerializationContext context, ECallOperationActivityDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ECALL_OPERATION_ACTIVITY_DEFINITION__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ECALL_OPERATION_ACTIVITY_DEFINITION__OPERATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getECallOperationActivityDefinitionAccess().getOperationECallOperationActivityDefinitionBodyParserRuleCall_2_0(), semanticObject.getOperation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ECapabilityAssignment returns ECapabilityAssignment
	 *
	 * Constraint:
	 *     (name=ID properties=EPropertyAssignments?)
	 */
	protected void sequence_ECapabilityAssignment(ISerializationContext context, ECapabilityAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECapabilityAssignments returns ECapabilityAssignments
	 *
	 * Constraint:
	 *     capabilities+=ECapabilityAssignment*
	 */
	protected void sequence_ECapabilityAssignments(ISerializationContext context, ECapabilityAssignments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConditionClauseDefinition returns EConditionClauseDefinitionAND
	 *     EConditionClauseDefinitionAND returns EConditionClauseDefinitionAND
	 *
	 * Constraint:
	 *     and=EConditionClauseDefinition
	 */
	protected void sequence_EConditionClauseDefinitionAND(ISerializationContext context, EConditionClauseDefinitionAND semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ECONDITION_CLAUSE_DEFINITION_AND__AND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ECONDITION_CLAUSE_DEFINITION_AND__AND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEConditionClauseDefinitionANDAccess().getAndEConditionClauseDefinitionParserRuleCall_2_0(), semanticObject.getAnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConditionClauseDefinition returns EConditionClauseDefinitionAssert
	 *     EConditionClauseDefinitionAssert returns EConditionClauseDefinitionAssert
	 *
	 * Constraint:
	 *     assertions+=EAssertionDefinition*
	 */
	protected void sequence_EConditionClauseDefinitionAssert(ISerializationContext context, EConditionClauseDefinitionAssert semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConditionClauseDefinition returns EConditionClauseDefinitionNOT
	 *     EConditionClauseDefinitionNOT returns EConditionClauseDefinitionNOT
	 *
	 * Constraint:
	 *     not=EConditionClauseDefinition
	 */
	protected void sequence_EConditionClauseDefinitionNOT(ISerializationContext context, EConditionClauseDefinitionNOT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ECONDITION_CLAUSE_DEFINITION_NOT__NOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ECONDITION_CLAUSE_DEFINITION_NOT__NOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEConditionClauseDefinitionNOTAccess().getNotEConditionClauseDefinitionParserRuleCall_2_0(), semanticObject.getNot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConditionClauseDefinition returns EConditionClauseDefinitionOR
	 *     EConditionClauseDefinitionOR returns EConditionClauseDefinitionOR
	 *
	 * Constraint:
	 *     or=EConditionClauseDefinition
	 */
	protected void sequence_EConditionClauseDefinitionOR(ISerializationContext context, EConditionClauseDefinitionOR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ECONDITION_CLAUSE_DEFINITION_OR__OR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ECONDITION_CLAUSE_DEFINITION_OR__OR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEConditionClauseDefinitionORAccess().getOrEConditionClauseDefinitionParserRuleCall_2_0(), semanticObject.getOr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraintList returns EConstraintList
	 *
	 * Constraint:
	 *     (list+=EConstraint list+=EConstraint*)
	 */
	protected void sequence_EConstraintList(ISerializationContext context, EConstraintList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EEntityReference returns EEntity
	 *     EEntity returns EEntity
	 *
	 * Constraint:
	 *     entity=ENTITY
	 */
	protected void sequence_EEntity(ISerializationContext context, EEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EENTITY__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EENTITY__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEEntityAccess().getEntityENTITYTerminalRuleCall_0(), semanticObject.getEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EEqual
	 *     EEqual returns EEqual
	 *
	 * Constraint:
	 *     val=ESingleValue
	 */
	protected void sequence_EEqual(ISerializationContext context, EEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EEQUAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EEQUAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEEqualAccess().getValESingleValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EEvenFilter returns EEvenFilter
	 *
	 * Constraint:
	 *     (node=EPREFIX_REF | requirement=EPREFIX_REF | capability=EPREFIX_REF)+
	 */
	protected void sequence_EEvenFilter(ISerializationContext context, EEvenFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EExtendedTriggerCondition returns EExtendedTriggerCondition
	 *
	 * Constraint:
	 *     (constraint=EConditionClauseDefinition | period=STRING | evaluations=ESIGNEDINT | method=STRING)+
	 */
	protected void sequence_EExtendedTriggerCondition(ISerializationContext context, EExtendedTriggerCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns EFLOAT
	 *     EAlphaNumericValue returns EFLOAT
	 *     EValueExpression returns EFLOAT
	 *     ESingleValue returns EFLOAT
	 *     EFLOAT returns EFLOAT
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_EFLOAT(ISerializationContext context, EFLOAT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EFLOAT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EFLOAT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEFLOATAccess().getValueFLOATParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EGreaterOrEqual
	 *     EGreaterOrEqual returns EGreaterOrEqual
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_EGreaterOrEqual(ISerializationContext context, EGreaterOrEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EGREATER_OR_EQUAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EGREATER_OR_EQUAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEGreaterOrEqualAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EGreaterThan
	 *     EGreaterThan returns EGreaterThan
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_EGreaterThan(ISerializationContext context, EGreaterThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EGREATER_THAN__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EGREATER_THAN__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEGreaterThanAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EInRange
	 *     EInRange returns EInRange
	 *
	 * Constraint:
	 *     (start=EAlphaNumericValue end=EAlphaNumericValue)
	 */
	protected void sequence_EInRange(ISerializationContext context, EInRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EIN_RANGE__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EIN_RANGE__START));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EIN_RANGE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EIN_RANGE__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEInRangeAccess().getStartEAlphaNumericValueParserRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getEInRangeAccess().getEndEAlphaNumericValueParserRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EInputs returns EInputs
	 *
	 * Constraint:
	 *     parameters+=EParameterDefinition*
	 */
	protected void sequence_EInputs(ISerializationContext context, EInputs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns ELIST
	 *     ELIST returns ELIST
	 *
	 * Constraint:
	 *     (list+=EAlphaNumericValue? list+=EAlphaNumericValue*)
	 */
	protected void sequence_ELIST(ISerializationContext context, ELIST semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns ELength
	 *     ELength returns ELength
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_ELength(ISerializationContext context, ELength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ELENGTH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ELENGTH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getELengthAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns ELessOrEqual
	 *     ELessOrEqual returns ELessOrEqual
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_ELessOrEqual(ISerializationContext context, ELessOrEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ELESS_OR_EQUAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ELESS_OR_EQUAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getELessOrEqualAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns ELessThan
	 *     ELessThan returns ELessThan
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_ELessThan(ISerializationContext context, ELessThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ELESS_THAN__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ELESS_THAN__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getELessThanAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns EMAP
	 *     EMAP returns EMAP
	 *
	 * Constraint:
	 *     map+=EMapEntry+
	 */
	protected void sequence_EMAP(ISerializationContext context, EMAP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EMapEntry returns EMapEntry
	 *
	 * Constraint:
	 *     (key=ID value=EAssignmentValue)
	 */
	protected void sequence_EMapEntry(ISerializationContext context, EMapEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EMAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EMAP_ENTRY__KEY));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EMAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EMAP_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEMapEntryAccess().getKeyIDTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEMapEntryAccess().getValueEAssignmentValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EMaxLength
	 *     EMaxLength returns EMaxLength
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_EMaxLength(ISerializationContext context, EMaxLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EMAX_LENGTH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EMAX_LENGTH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEMaxLengthAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EMinLength
	 *     EMinLength returns EMinLength
	 *
	 * Constraint:
	 *     val=EAlphaNumericValue
	 */
	protected void sequence_EMinLength(ISerializationContext context, EMinLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EMIN_LENGTH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EMIN_LENGTH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEMinLengthAccess().getValEAlphaNumericValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ENodeTemplateBody returns ENodeTemplateBody
	 *
	 * Constraint:
	 *     (
	 *         type=EPREFIX_TYPE | 
	 *         description=STRING | 
	 *         properties=EPropertyAssignments | 
	 *         attributes=EAttributeAssignments | 
	 *         requirements=ERequirementAssignments | 
	 *         capabilities=ECapabilityAssignments
	 *     )+
	 */
	protected void sequence_ENodeTemplateBody(ISerializationContext context, ENodeTemplateBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENodeTemplate returns ENodeTemplate
	 *
	 * Constraint:
	 *     (name=ID node=ENodeTemplateBody)
	 */
	protected void sequence_ENodeTemplate(ISerializationContext context, ENodeTemplate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ENODE_TEMPLATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ENODE_TEMPLATE__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ENODE_TEMPLATE__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ENODE_TEMPLATE__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getENodeTemplateAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getENodeTemplateAccess().getNodeENodeTemplateBodyParserRuleCall_3_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ENodeTemplates returns ENodeTemplates
	 *
	 * Constraint:
	 *     nodeTemplates+=ENodeTemplate*
	 */
	protected void sequence_ENodeTemplates(ISerializationContext context, ENodeTemplates semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EOutputs returns EOutputs
	 *
	 * Constraint:
	 *     parameters+=EParameterDefinition*
	 */
	protected void sequence_EOutputs(ISerializationContext context, EOutputs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EEntityReference returns EPREFIX_ID
	 *     EPREFIX_REF returns EPREFIX_ID
	 *     EPREFIX_ID returns EPREFIX_ID
	 *
	 * Constraint:
	 *     (module=ID? id=ID version=VERSION?)
	 */
	protected void sequence_EPREFIX_ID(ISerializationContext context, EPREFIX_ID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EEntityReference returns EPREFIX_TYPE
	 *     EPREFIX_REF returns EPREFIX_TYPE
	 *     EDataTypeName returns EPREFIX_TYPE
	 *     EPREFIX_TYPE returns EPREFIX_TYPE
	 *
	 * Constraint:
	 *     (module=ID? type=QUALIFIED_NAME)
	 */
	protected void sequence_EPREFIX_TYPE(ISerializationContext context, EPREFIX_TYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDataTypeName returns EPRIMITIVE_TYPE
	 *     EPRIMITIVE_TYPE returns EPRIMITIVE_TYPE
	 *
	 * Constraint:
	 *     type=ID
	 */
	protected void sequence_EPRIMITIVE_TYPE(ISerializationContext context, EPRIMITIVE_TYPE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EDATA_TYPE_NAME__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EDATA_TYPE_NAME__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEPRIMITIVE_TYPEAccess().getTypeIDTerminalRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EParameterDefinitionBody returns EParameterDefinitionBody
	 *
	 * Constraint:
	 *     (type=EDataTypeName | description=STRING | value=EValueExpression | default=EValueExpression)*
	 */
	protected void sequence_EParameterDefinitionBody(ISerializationContext context, EParameterDefinitionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EParameterDefinition returns EParameterDefinition
	 *
	 * Constraint:
	 *     (name=ID parameter=EParameterDefinitionBody)
	 */
	protected void sequence_EParameterDefinition(ISerializationContext context, EParameterDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EPARAMETER_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EPARAMETER_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EPARAMETER_DEFINITION__PARAMETER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EPARAMETER_DEFINITION__PARAMETER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEParameterDefinitionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEParameterDefinitionAccess().getParameterEParameterDefinitionBodyParserRuleCall_3_0(), semanticObject.getParameter());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EPolicies returns EPolicies
	 *
	 * Constraint:
	 *     policies+=EPolicyDefinition*
	 */
	protected void sequence_EPolicies(ISerializationContext context, EPolicies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPolicyDefinitionBody returns EPolicyDefinitionBody
	 *
	 * Constraint:
	 *     (type=EPREFIX_TYPE | description=STRING | properties=EPropertyAssignments | targets=ETarget | triggers=ETriggerDefinitions)+
	 */
	protected void sequence_EPolicyDefinitionBody(ISerializationContext context, EPolicyDefinitionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPolicyDefinition returns EPolicyDefinition
	 *
	 * Constraint:
	 *     (name=ID policy=EPolicyDefinitionBody)
	 */
	protected void sequence_EPolicyDefinition(ISerializationContext context, EPolicyDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EPOLICY_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EPOLICY_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EPOLICY_DEFINITION__POLICY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EPOLICY_DEFINITION__POLICY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEPolicyDefinitionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEPolicyDefinitionAccess().getPolicyEPolicyDefinitionBodyParserRuleCall_3_0(), semanticObject.getPolicy());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EPropertyAssignment returns EPropertyAssignment
	 *
	 * Constraint:
	 *     (name=ID value=EAssignmentValue)
	 */
	protected void sequence_EPropertyAssignment(ISerializationContext context, EPropertyAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EPROPERTY_ASSIGNMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EPROPERTY_ASSIGNMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EPROPERTY_ASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EPROPERTY_ASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEPropertyAssignmentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEPropertyAssignmentAccess().getValueEAssignmentValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EPropertyAssignments returns EPropertyAssignments
	 *
	 * Constraint:
	 *     properties+=EPropertyAssignment*
	 */
	protected void sequence_EPropertyAssignments(ISerializationContext context, EPropertyAssignments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERequirementAssignment returns ERequirementAssignment
	 *
	 * Constraint:
	 *     (name=ID node=EPREFIX_ID)
	 */
	protected void sequence_ERequirementAssignment(ISerializationContext context, ERequirementAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EREQUIREMENT_ASSIGNMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EREQUIREMENT_ASSIGNMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EREQUIREMENT_ASSIGNMENT__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EREQUIREMENT_ASSIGNMENT__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getERequirementAssignmentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getERequirementAssignmentAccess().getNodeEPREFIX_IDParserRuleCall_3_1_0(), semanticObject.getNode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ERequirementAssignments returns ERequirementAssignments
	 *
	 * Constraint:
	 *     requirements+=ERequirementAssignment*
	 */
	protected void sequence_ERequirementAssignments(ISerializationContext context, ERequirementAssignments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns ESIGNEDINT
	 *     EAlphaNumericValue returns ESIGNEDINT
	 *     EValueExpression returns ESIGNEDINT
	 *     ESingleValue returns ESIGNEDINT
	 *     ESIGNEDINT returns ESIGNEDINT
	 *
	 * Constraint:
	 *     value=SIGNEDINT
	 */
	protected void sequence_ESIGNEDINT(ISerializationContext context, ESIGNEDINT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ESIGNEDINT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ESIGNEDINT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getESIGNEDINTAccess().getValueSIGNEDINTParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns ESTRING
	 *     EAlphaNumericValue returns ESTRING
	 *     EValueExpression returns ESTRING
	 *     ESingleValue returns ESTRING
	 *     ESTRING returns ESTRING
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ESTRING(ISerializationContext context, ESTRING semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ESTRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ESTRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getESTRINGAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ETarget returns ETarget
	 *
	 * Constraint:
	 *     (target+=EPREFIX_ID target+=EPREFIX_ID*)
	 */
	protected void sequence_ETarget(ISerializationContext context, ETarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ETimeInterval returns ETimeInterval
	 *
	 * Constraint:
	 *     (start_time=STRING end_time=STRING)
	 */
	protected void sequence_ETimeInterval(ISerializationContext context, ETimeInterval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ETIME_INTERVAL__START_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ETIME_INTERVAL__START_TIME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ETIME_INTERVAL__END_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ETIME_INTERVAL__END_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getETimeIntervalAccess().getStart_timeSTRINGTerminalRuleCall_0_1_0(), semanticObject.getStart_time());
		feeder.accept(grammarAccess.getETimeIntervalAccess().getEnd_timeSTRINGTerminalRuleCall_1_1_0(), semanticObject.getEnd_time());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ETriggerDefinitionBody returns ETriggerDefinitionBody
	 *
	 * Constraint:
	 *     (
	 *         description=STRING | 
	 *         event=STRING | 
	 *         schedule=ETimeInterval | 
	 *         target_filter=EEvenFilter | 
	 *         condition=EExtendedTriggerCondition | 
	 *         action=EActivityDefinitions
	 *     )+
	 */
	protected void sequence_ETriggerDefinitionBody(ISerializationContext context, ETriggerDefinitionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ETriggerDefinition returns ETriggerDefinition
	 *
	 * Constraint:
	 *     (name=QUALIFIED_NAME trigger=ETriggerDefinitionBody)
	 */
	protected void sequence_ETriggerDefinition(ISerializationContext context, ETriggerDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ETRIGGER_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ETRIGGER_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.ETRIGGER_DEFINITION__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.ETRIGGER_DEFINITION__TRIGGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getETriggerDefinitionAccess().getNameQUALIFIED_NAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getETriggerDefinitionAccess().getTriggerETriggerDefinitionBodyParserRuleCall_3_0(), semanticObject.getTrigger());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ETriggerDefinitions returns ETriggerDefinitions
	 *
	 * Constraint:
	 *     triggers+=ETriggerDefinition*
	 */
	protected void sequence_ETriggerDefinitions(ISerializationContext context, ETriggerDefinitions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EValid_Values
	 *     EValid_Values returns EValid_Values
	 *
	 * Constraint:
	 *     val=ELIST
	 */
	protected void sequence_EValid_Values(ISerializationContext context, EValid_Values semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.EVALID_VALUES__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.EVALID_VALUES__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEValid_ValuesAccess().getValELISTParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GetAttributeBody returns GetAttributeBody
	 *
	 * Constraint:
	 *     (attribute=EPREFIX_REF | entity=EEntityReference | req_cap=EPREFIX_REF)+
	 */
	protected void sequence_GetAttributeBody(ISerializationContext context, GetAttributeBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns GetAttribute
	 *     EValueExpression returns GetAttribute
	 *     EFunction returns GetAttribute
	 *     GetAttribute returns GetAttribute
	 *
	 * Constraint:
	 *     attribute=GetAttributeBody
	 */
	protected void sequence_GetAttribute(ISerializationContext context, GetAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.GET_ATTRIBUTE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.GET_ATTRIBUTE__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetAttributeAccess().getAttributeGetAttributeBodyParserRuleCall_2_0(), semanticObject.getAttribute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns GetInput
	 *     EValueExpression returns GetInput
	 *     EFunction returns GetInput
	 *     GetInput returns GetInput
	 *
	 * Constraint:
	 *     input=[EParameterDefinition|ID]
	 */
	protected void sequence_GetInput(ISerializationContext context, GetInput semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.GET_INPUT__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.GET_INPUT__INPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetInputAccess().getInputEParameterDefinitionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AADMPackage.Literals.GET_INPUT__INPUT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GetPropertyBody returns GetPropertyBody
	 *
	 * Constraint:
	 *     (property=EPREFIX_REF | entity=EEntityReference | req_cap=EPREFIX_REF)+
	 */
	protected void sequence_GetPropertyBody(ISerializationContext context, GetPropertyBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAssignmentValue returns GetProperty
	 *     EValueExpression returns GetProperty
	 *     EFunction returns GetProperty
	 *     GetProperty returns GetProperty
	 *
	 * Constraint:
	 *     property=GetPropertyBody
	 */
	protected void sequence_GetProperty(ISerializationContext context, GetProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AADMPackage.Literals.GET_PROPERTY__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AADMPackage.Literals.GET_PROPERTY__PROPERTY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetPropertyAccess().getPropertyGetPropertyBodyParserRuleCall_2_0(), semanticObject.getProperty());
		feeder.finish();
	}
	
	
}
