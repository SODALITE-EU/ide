/**
 * generated by Xtext 2.25.0
 */
package org.sodalite.dsl.aADM.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.dsl.aADM.AADMPackage;
import org.sodalite.dsl.aADM.EAssertionDefinition;
import org.sodalite.dsl.aADM.EConstraintList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EAssertion Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.aADM.impl.EAssertionDefinitionImpl#getAttribute_name <em>Attribute name</em>}</li>
 *   <li>{@link org.sodalite.dsl.aADM.impl.EAssertionDefinitionImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EAssertionDefinitionImpl extends MinimalEObjectImpl.Container implements EAssertionDefinition
{
  /**
   * The default value of the '{@link #getAttribute_name() <em>Attribute name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute_name()
   * @generated
   * @ordered
   */
  protected static final String ATTRIBUTE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAttribute_name() <em>Attribute name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute_name()
   * @generated
   * @ordered
   */
  protected String attribute_name = ATTRIBUTE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EConstraintList constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EAssertionDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AADMPackage.Literals.EASSERTION_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAttribute_name()
  {
    return attribute_name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttribute_name(String newAttribute_name)
  {
    String oldAttribute_name = attribute_name;
    attribute_name = newAttribute_name;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AADMPackage.EASSERTION_DEFINITION__ATTRIBUTE_NAME, oldAttribute_name, attribute_name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConstraintList getConstraints()
  {
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraints(EConstraintList newConstraints, NotificationChain msgs)
  {
    EConstraintList oldConstraints = constraints;
    constraints = newConstraints;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS, oldConstraints, newConstraints);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraints(EConstraintList newConstraints)
  {
    if (newConstraints != constraints)
    {
      NotificationChain msgs = null;
      if (constraints != null)
        msgs = ((InternalEObject)constraints).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS, null, msgs);
      if (newConstraints != null)
        msgs = ((InternalEObject)newConstraints).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS, null, msgs);
      msgs = basicSetConstraints(newConstraints, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS, newConstraints, newConstraints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS:
        return basicSetConstraints(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AADMPackage.EASSERTION_DEFINITION__ATTRIBUTE_NAME:
        return getAttribute_name();
      case AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AADMPackage.EASSERTION_DEFINITION__ATTRIBUTE_NAME:
        setAttribute_name((String)newValue);
        return;
      case AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS:
        setConstraints((EConstraintList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AADMPackage.EASSERTION_DEFINITION__ATTRIBUTE_NAME:
        setAttribute_name(ATTRIBUTE_NAME_EDEFAULT);
        return;
      case AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS:
        setConstraints((EConstraintList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AADMPackage.EASSERTION_DEFINITION__ATTRIBUTE_NAME:
        return ATTRIBUTE_NAME_EDEFAULT == null ? attribute_name != null : !ATTRIBUTE_NAME_EDEFAULT.equals(attribute_name);
      case AADMPackage.EASSERTION_DEFINITION__CONSTRAINTS:
        return constraints != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (attribute_name: ");
    result.append(attribute_name);
    result.append(')');
    return result.toString();
  }

} //EAssertionDefinitionImpl
